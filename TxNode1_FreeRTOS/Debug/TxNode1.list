
TxNode1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1b4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000059c  0800d358  0800d358  0001d358  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d8f4  0800d8f4  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d8f4  0800d8f4  0001d8f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d8fc  0800d8fc  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d8fc  0800d8fc  0001d8fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d900  0800d900  0001d900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800d904  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004338  200001f4  0800daf8  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000452c  0800daf8  0002452c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d37c  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044f2  00000000  00000000  0003d5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e8  00000000  00000000  00041a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001728  00000000  00000000  00043380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d110  00000000  00000000  00044aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020089  00000000  00000000  00061bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a8459  00000000  00000000  00081c41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012a09a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c7c  00000000  00000000  0012a0ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d33c 	.word	0x0800d33c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	0800d33c 	.word	0x0800d33c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8001012:	2101      	movs	r1, #1
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f000 f8d4 	bl	80011c2 <LoRa_read>
 800101a:	4603      	mov	r3, r0
 800101c:	73bb      	strb	r3, [r7, #14]
	data = read;
 800101e:	7bbb      	ldrb	r3, [r7, #14]
 8001020:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d107      	bne.n	8001038 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8001028:	7bbb      	ldrb	r3, [r7, #14]
 800102a:	f023 0307 	bic.w	r3, r3, #7
 800102e:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	61da      	str	r2, [r3, #28]
 8001036:	e03e      	b.n	80010b6 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d10c      	bne.n	8001058 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 800103e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001042:	f023 0307 	bic.w	r3, r3, #7
 8001046:	b25b      	sxtb	r3, r3
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	b25b      	sxtb	r3, r3
 800104e:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2201      	movs	r2, #1
 8001054:	61da      	str	r2, [r3, #28]
 8001056:	e02e      	b.n	80010b6 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	2b03      	cmp	r3, #3
 800105c:	d10c      	bne.n	8001078 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 800105e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001062:	f023 0307 	bic.w	r3, r3, #7
 8001066:	b25b      	sxtb	r3, r3
 8001068:	f043 0303 	orr.w	r3, r3, #3
 800106c:	b25b      	sxtb	r3, r3
 800106e:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2203      	movs	r2, #3
 8001074:	61da      	str	r2, [r3, #28]
 8001076:	e01e      	b.n	80010b6 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	2b05      	cmp	r3, #5
 800107c:	d10c      	bne.n	8001098 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 800107e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001082:	f023 0307 	bic.w	r3, r3, #7
 8001086:	b25b      	sxtb	r3, r3
 8001088:	f043 0305 	orr.w	r3, r3, #5
 800108c:	b25b      	sxtb	r3, r3
 800108e:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2205      	movs	r2, #5
 8001094:	61da      	str	r2, [r3, #28]
 8001096:	e00e      	b.n	80010b6 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	2b06      	cmp	r3, #6
 800109c:	d10b      	bne.n	80010b6 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 800109e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010a2:	f023 0307 	bic.w	r3, r3, #7
 80010a6:	b25b      	sxtb	r3, r3
 80010a8:	f043 0306 	orr.w	r3, r3, #6
 80010ac:	b25b      	sxtb	r3, r3
 80010ae:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2206      	movs	r2, #6
 80010b4:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	461a      	mov	r2, r3
 80010ba:	2101      	movs	r1, #1
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f000 f89a 	bl	80011f6 <LoRa_write>
	//HAL_Delay(10);
}
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> determines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b084      	sub	sp, #16
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	60f8      	str	r0, [r7, #12]
 80010d2:	60b9      	str	r1, [r7, #8]
 80010d4:	603b      	str	r3, [r7, #0]
 80010d6:	4613      	mov	r3, r2
 80010d8:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	6818      	ldr	r0, [r3, #0]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	889b      	ldrh	r3, [r3, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	4619      	mov	r1, r3
 80010e6:	f002 fda1 	bl	8003c2c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	6998      	ldr	r0, [r3, #24]
 80010ee:	88fa      	ldrh	r2, [r7, #6]
 80010f0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80010f4:	68b9      	ldr	r1, [r7, #8]
 80010f6:	f003 ff12 	bl	8004f1e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80010fa:	bf00      	nop
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	4618      	mov	r0, r3
 8001102:	f004 fafb 	bl	80056fc <HAL_SPI_GetState>
 8001106:	4603      	mov	r3, r0
 8001108:	2b01      	cmp	r3, #1
 800110a:	d1f7      	bne.n	80010fc <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	6998      	ldr	r0, [r3, #24]
 8001110:	8b3a      	ldrh	r2, [r7, #24]
 8001112:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001116:	6839      	ldr	r1, [r7, #0]
 8001118:	f004 f83d 	bl	8005196 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800111c:	bf00      	nop
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	699b      	ldr	r3, [r3, #24]
 8001122:	4618      	mov	r0, r3
 8001124:	f004 faea 	bl	80056fc <HAL_SPI_GetState>
 8001128:	4603      	mov	r3, r0
 800112a:	2b01      	cmp	r3, #1
 800112c:	d1f7      	bne.n	800111e <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	6818      	ldr	r0, [r3, #0]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	889b      	ldrh	r3, [r3, #4]
 8001136:	2201      	movs	r2, #1
 8001138:	4619      	mov	r1, r3
 800113a:	f002 fd77 	bl	8003c2c <HAL_GPIO_WritePin>
}
 800113e:	bf00      	nop
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> determines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8001146:	b580      	push	{r7, lr}
 8001148:	b084      	sub	sp, #16
 800114a:	af00      	add	r7, sp, #0
 800114c:	60f8      	str	r0, [r7, #12]
 800114e:	60b9      	str	r1, [r7, #8]
 8001150:	603b      	str	r3, [r7, #0]
 8001152:	4613      	mov	r3, r2
 8001154:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	6818      	ldr	r0, [r3, #0]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	889b      	ldrh	r3, [r3, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	4619      	mov	r1, r3
 8001162:	f002 fd63 	bl	8003c2c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	6998      	ldr	r0, [r3, #24]
 800116a:	88fa      	ldrh	r2, [r7, #6]
 800116c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001170:	68b9      	ldr	r1, [r7, #8]
 8001172:	f003 fed4 	bl	8004f1e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001176:	bf00      	nop
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	4618      	mov	r0, r3
 800117e:	f004 fabd 	bl	80056fc <HAL_SPI_GetState>
 8001182:	4603      	mov	r3, r0
 8001184:	2b01      	cmp	r3, #1
 8001186:	d1f7      	bne.n	8001178 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	6998      	ldr	r0, [r3, #24]
 800118c:	8b3a      	ldrh	r2, [r7, #24]
 800118e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001192:	6839      	ldr	r1, [r7, #0]
 8001194:	f003 fec3 	bl	8004f1e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001198:	bf00      	nop
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	4618      	mov	r0, r3
 80011a0:	f004 faac 	bl	80056fc <HAL_SPI_GetState>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d1f7      	bne.n	800119a <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	6818      	ldr	r0, [r3, #0]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	889b      	ldrh	r3, [r3, #4]
 80011b2:	2201      	movs	r2, #1
 80011b4:	4619      	mov	r1, r3
 80011b6:	f002 fd39 	bl	8003c2c <HAL_GPIO_WritePin>
}
 80011ba:	bf00      	nop
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b086      	sub	sp, #24
 80011c6:	af02      	add	r7, sp, #8
 80011c8:	6078      	str	r0, [r7, #4]
 80011ca:	460b      	mov	r3, r1
 80011cc:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 80011ce:	78fb      	ldrb	r3, [r7, #3]
 80011d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80011d8:	f107 030f 	add.w	r3, r7, #15
 80011dc:	f107 010e 	add.w	r1, r7, #14
 80011e0:	2201      	movs	r2, #1
 80011e2:	9200      	str	r2, [sp, #0]
 80011e4:	2201      	movs	r2, #1
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff ff6f 	bl	80010ca <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b086      	sub	sp, #24
 80011fa:	af02      	add	r7, sp, #8
 80011fc:	6078      	str	r0, [r7, #4]
 80011fe:	460b      	mov	r3, r1
 8001200:	70fb      	strb	r3, [r7, #3]
 8001202:	4613      	mov	r3, r2
 8001204:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8001206:	78fb      	ldrb	r3, [r7, #3]
 8001208:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800120c:	b2db      	uxtb	r3, r3
 800120e:	73bb      	strb	r3, [r7, #14]
	data = value;
 8001210:	78bb      	ldrb	r3, [r7, #2]
 8001212:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8001214:	f107 030f 	add.w	r3, r7, #15
 8001218:	f107 010e 	add.w	r1, r7, #14
 800121c:	2201      	movs	r2, #1
 800121e:	9200      	str	r2, [sp, #0]
 8001220:	2201      	movs	r2, #1
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff ff8f 	bl	8001146 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8001228:	bf00      	nop
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	607a      	str	r2, [r7, #4]
 800123a:	461a      	mov	r2, r3
 800123c:	460b      	mov	r3, r1
 800123e:	72fb      	strb	r3, [r7, #11]
 8001240:	4613      	mov	r3, r2
 8001242:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8001244:	7afb      	ldrb	r3, [r7, #11]
 8001246:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800124a:	b2db      	uxtb	r3, r3
 800124c:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	6818      	ldr	r0, [r3, #0]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	889b      	ldrh	r3, [r3, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	4619      	mov	r1, r3
 800125a:	f002 fce7 	bl	8003c2c <HAL_GPIO_WritePin>
	//say module thai I want to write in RegFiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	6998      	ldr	r0, [r3, #24]
 8001262:	f107 0117 	add.w	r1, r7, #23
 8001266:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800126a:	2201      	movs	r2, #1
 800126c:	f003 fe57 	bl	8004f1e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001270:	bf00      	nop
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	4618      	mov	r0, r3
 8001278:	f004 fa40 	bl	80056fc <HAL_SPI_GetState>
 800127c:	4603      	mov	r3, r0
 800127e:	2b01      	cmp	r3, #1
 8001280:	d1f7      	bne.n	8001272 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	6998      	ldr	r0, [r3, #24]
 8001286:	7abb      	ldrb	r3, [r7, #10]
 8001288:	b29a      	uxth	r2, r3
 800128a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	f003 fe45 	bl	8004f1e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001294:	bf00      	nop
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	4618      	mov	r0, r3
 800129c:	f004 fa2e 	bl	80056fc <HAL_SPI_GetState>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d1f7      	bne.n	8001296 <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	6818      	ldr	r0, [r3, #0]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	889b      	ldrh	r3, [r3, #4]
 80012ae:	2201      	movs	r2, #1
 80012b0:	4619      	mov	r1, r3
 80012b2:	f002 fcbb 	bl	8003c2c <HAL_GPIO_WritePin>
}
 80012b6:	bf00      	nop
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 80012be:	b580      	push	{r7, lr}
 80012c0:	b086      	sub	sp, #24
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	60f8      	str	r0, [r7, #12]
 80012c6:	60b9      	str	r1, [r7, #8]
 80012c8:	4611      	mov	r1, r2
 80012ca:	461a      	mov	r2, r3
 80012cc:	460b      	mov	r3, r1
 80012ce:	71fb      	strb	r3, [r7, #7]
 80012d0:	4613      	mov	r3, r2
 80012d2:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	69db      	ldr	r3, [r3, #28]
 80012d8:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80012da:	2101      	movs	r1, #1
 80012dc:	68f8      	ldr	r0, [r7, #12]
 80012de:	f7ff fe93 	bl	8001008 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 80012e2:	210e      	movs	r1, #14
 80012e4:	68f8      	ldr	r0, [r7, #12]
 80012e6:	f7ff ff6c 	bl	80011c2 <LoRa_read>
 80012ea:	4603      	mov	r3, r0
 80012ec:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80012ee:	7cfb      	ldrb	r3, [r7, #19]
 80012f0:	461a      	mov	r2, r3
 80012f2:	210d      	movs	r1, #13
 80012f4:	68f8      	ldr	r0, [r7, #12]
 80012f6:	f7ff ff7e 	bl	80011f6 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	461a      	mov	r2, r3
 80012fe:	2122      	movs	r1, #34	; 0x22
 8001300:	68f8      	ldr	r0, [r7, #12]
 8001302:	f7ff ff78 	bl	80011f6 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	68ba      	ldr	r2, [r7, #8]
 800130a:	2100      	movs	r1, #0
 800130c:	68f8      	ldr	r0, [r7, #12]
 800130e:	f7ff ff8f 	bl	8001230 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8001312:	2103      	movs	r1, #3
 8001314:	68f8      	ldr	r0, [r7, #12]
 8001316:	f7ff fe77 	bl	8001008 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 800131a:	2112      	movs	r1, #18
 800131c:	68f8      	ldr	r0, [r7, #12]
 800131e:	f7ff ff50 	bl	80011c2 <LoRa_read>
 8001322:	4603      	mov	r3, r0
 8001324:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8001326:	7cfb      	ldrb	r3, [r7, #19]
 8001328:	f003 0308 	and.w	r3, r3, #8
 800132c:	2b00      	cmp	r3, #0
 800132e:	d00a      	beq.n	8001346 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001330:	22ff      	movs	r2, #255	; 0xff
 8001332:	2112      	movs	r1, #18
 8001334:	68f8      	ldr	r0, [r7, #12]
 8001336:	f7ff ff5e 	bl	80011f6 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 800133a:	6979      	ldr	r1, [r7, #20]
 800133c:	68f8      	ldr	r0, [r7, #12]
 800133e:	f7ff fe63 	bl	8001008 <LoRa_gotoMode>
			return 1;
 8001342:	2301      	movs	r3, #1
 8001344:	e00f      	b.n	8001366 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8001346:	88bb      	ldrh	r3, [r7, #4]
 8001348:	3b01      	subs	r3, #1
 800134a:	80bb      	strh	r3, [r7, #4]
 800134c:	88bb      	ldrh	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d105      	bne.n	800135e <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8001352:	6979      	ldr	r1, [r7, #20]
 8001354:	68f8      	ldr	r0, [r7, #12]
 8001356:	f7ff fe57 	bl	8001008 <LoRa_gotoMode>
				return 0;
 800135a:	2300      	movs	r3, #0
 800135c:	e003      	b.n	8001366 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 800135e:	2001      	movs	r0, #1
 8001360:	f001 fdd0 	bl	8002f04 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001364:	e7d9      	b.n	800131a <LoRa_transmit+0x5c>
	}

}
 8001366:	4618      	mov	r0, r3
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 800136e:	b590      	push	{r4, r7, lr}
 8001370:	b089      	sub	sp, #36	; 0x24
 8001372:	af00      	add	r7, sp, #0
 8001374:	60f8      	str	r0, [r7, #12]
 8001376:	60b9      	str	r1, [r7, #8]
 8001378:	4613      	mov	r3, r2
 800137a:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8001380:	2300      	movs	r3, #0
 8001382:	61bb      	str	r3, [r7, #24]
 8001384:	e007      	b.n	8001396 <LoRa_receive+0x28>
		data[i]=0;
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	68ba      	ldr	r2, [r7, #8]
 800138a:	4413      	add	r3, r2
 800138c:	2200      	movs	r2, #0
 800138e:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	3301      	adds	r3, #1
 8001394:	61bb      	str	r3, [r7, #24]
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	429a      	cmp	r2, r3
 800139c:	dbf3      	blt.n	8001386 <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 800139e:	2101      	movs	r1, #1
 80013a0:	68f8      	ldr	r0, [r7, #12]
 80013a2:	f7ff fe31 	bl	8001008 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 80013a6:	2112      	movs	r1, #18
 80013a8:	68f8      	ldr	r0, [r7, #12]
 80013aa:	f7ff ff0a 	bl	80011c2 <LoRa_read>
 80013ae:	4603      	mov	r3, r0
 80013b0:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 80013b2:	7cfb      	ldrb	r3, [r7, #19]
 80013b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d02f      	beq.n	800141c <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 80013bc:	22ff      	movs	r2, #255	; 0xff
 80013be:	2112      	movs	r1, #18
 80013c0:	68f8      	ldr	r0, [r7, #12]
 80013c2:	f7ff ff18 	bl	80011f6 <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 80013c6:	2113      	movs	r1, #19
 80013c8:	68f8      	ldr	r0, [r7, #12]
 80013ca:	f7ff fefa 	bl	80011c2 <LoRa_read>
 80013ce:	4603      	mov	r3, r0
 80013d0:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 80013d2:	2110      	movs	r1, #16
 80013d4:	68f8      	ldr	r0, [r7, #12]
 80013d6:	f7ff fef4 	bl	80011c2 <LoRa_read>
 80013da:	4603      	mov	r3, r0
 80013dc:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80013de:	7cfb      	ldrb	r3, [r7, #19]
 80013e0:	461a      	mov	r2, r3
 80013e2:	210d      	movs	r1, #13
 80013e4:	68f8      	ldr	r0, [r7, #12]
 80013e6:	f7ff ff06 	bl	80011f6 <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 80013ea:	7cba      	ldrb	r2, [r7, #18]
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	4293      	cmp	r3, r2
 80013f0:	bf28      	it	cs
 80013f2:	4613      	movcs	r3, r2
 80013f4:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
 80013fa:	e00b      	b.n	8001414 <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	68ba      	ldr	r2, [r7, #8]
 8001400:	18d4      	adds	r4, r2, r3
 8001402:	2100      	movs	r1, #0
 8001404:	68f8      	ldr	r0, [r7, #12]
 8001406:	f7ff fedc 	bl	80011c2 <LoRa_read>
 800140a:	4603      	mov	r3, r0
 800140c:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	3301      	adds	r3, #1
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	7ffb      	ldrb	r3, [r7, #31]
 8001416:	697a      	ldr	r2, [r7, #20]
 8001418:	429a      	cmp	r2, r3
 800141a:	dbef      	blt.n	80013fc <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 800141c:	2105      	movs	r1, #5
 800141e:	68f8      	ldr	r0, [r7, #12]
 8001420:	f7ff fdf2 	bl	8001008 <LoRa_gotoMode>
    return min;
 8001424:	7ffb      	ldrb	r3, [r7, #31]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3724      	adds	r7, #36	; 0x24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd90      	pop	{r4, r7, pc}
	...

08001430 <DHT11_Start>:
float dhtHumidity = 0;

/*********************************** DHT11 FUNCTIONS ********************************************/

void DHT11_Start (void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_Port, DHT11_Pin);  // set the pin as output
 8001434:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001438:	4813      	ldr	r0, [pc, #76]	; (8001488 <DHT11_Start+0x58>)
 800143a:	f000 fda7 	bl	8001f8c <Set_Pin_Output>

	HAL_GPIO_WritePin(DHT11_Port, DHT11_Pin, 1); //initialize with data pin high
 800143e:	2201      	movs	r2, #1
 8001440:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001444:	4810      	ldr	r0, [pc, #64]	; (8001488 <DHT11_Start+0x58>)
 8001446:	f002 fbf1 	bl	8003c2c <HAL_GPIO_WritePin>
	HAL_Delay(1000); //wait for 1000 milliseconds
 800144a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800144e:	f001 fd59 	bl	8002f04 <HAL_Delay>

	HAL_GPIO_WritePin (DHT11_Port, DHT11_Pin, 0);   // pull the pin low
 8001452:	2200      	movs	r2, #0
 8001454:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001458:	480b      	ldr	r0, [pc, #44]	; (8001488 <DHT11_Start+0x58>)
 800145a:	f002 fbe7 	bl	8003c2c <HAL_GPIO_WritePin>
	DelayUS(18000);   // wait for 18ms
 800145e:	f244 6050 	movw	r0, #18000	; 0x4650
 8001462:	f000 fcbb 	bl	8001ddc <DelayUS>
    HAL_GPIO_WritePin (DHT11_Port, DHT11_Pin, 1);   // pull the pin high
 8001466:	2201      	movs	r2, #1
 8001468:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800146c:	4806      	ldr	r0, [pc, #24]	; (8001488 <DHT11_Start+0x58>)
 800146e:	f002 fbdd 	bl	8003c2c <HAL_GPIO_WritePin>
    DelayUS(20);   // wait for 20us
 8001472:	2014      	movs	r0, #20
 8001474:	f000 fcb2 	bl	8001ddc <DelayUS>
	Set_Pin_Input(DHT11_Port, DHT11_Pin);    // set as input
 8001478:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800147c:	4802      	ldr	r0, [pc, #8]	; (8001488 <DHT11_Start+0x58>)
 800147e:	f000 fda3 	bl	8001fc8 <Set_Pin_Input>
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40020800 	.word	0x40020800

0800148c <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	71fb      	strb	r3, [r7, #7]
	DelayUS(40);
 8001496:	2028      	movs	r0, #40	; 0x28
 8001498:	f000 fca0 	bl	8001ddc <DelayUS>
	if (!(HAL_GPIO_ReadPin (DHT11_Port, DHT11_Pin)))
 800149c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014a0:	4811      	ldr	r0, [pc, #68]	; (80014e8 <DHT11_Check_Response+0x5c>)
 80014a2:	f002 fbab 	bl	8003bfc <HAL_GPIO_ReadPin>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d10f      	bne.n	80014cc <DHT11_Check_Response+0x40>
	{
		DelayUS(80);
 80014ac:	2050      	movs	r0, #80	; 0x50
 80014ae:	f000 fc95 	bl	8001ddc <DelayUS>
		if (HAL_GPIO_ReadPin (DHT11_Port, DHT11_Pin))
 80014b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014b6:	480c      	ldr	r0, [pc, #48]	; (80014e8 <DHT11_Check_Response+0x5c>)
 80014b8:	f002 fba0 	bl	8003bfc <HAL_GPIO_ReadPin>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d002      	beq.n	80014c8 <DHT11_Check_Response+0x3c>
			Response = 1;
 80014c2:	2301      	movs	r3, #1
 80014c4:	71fb      	strb	r3, [r7, #7]
 80014c6:	e001      	b.n	80014cc <DHT11_Check_Response+0x40>
		else Response = -1; // 255
 80014c8:	23ff      	movs	r3, #255	; 0xff
 80014ca:	71fb      	strb	r3, [r7, #7]
	}
	while (HAL_GPIO_ReadPin (DHT11_Port, DHT11_Pin));   // wait for the pin to go low
 80014cc:	bf00      	nop
 80014ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014d2:	4805      	ldr	r0, [pc, #20]	; (80014e8 <DHT11_Check_Response+0x5c>)
 80014d4:	f002 fb92 	bl	8003bfc <HAL_GPIO_ReadPin>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1f7      	bne.n	80014ce <DHT11_Check_Response+0x42>

	return Response;
 80014de:	79fb      	ldrb	r3, [r7, #7]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40020800 	.word	0x40020800

080014ec <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 80014f2:	2300      	movs	r3, #0
 80014f4:	71bb      	strb	r3, [r7, #6]
 80014f6:	e03a      	b.n	800156e <DHT11_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_Port, DHT11_Pin)));   // wait for the pin to go high
 80014f8:	bf00      	nop
 80014fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014fe:	4820      	ldr	r0, [pc, #128]	; (8001580 <DHT11_Read+0x94>)
 8001500:	f002 fb7c 	bl	8003bfc <HAL_GPIO_ReadPin>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0f7      	beq.n	80014fa <DHT11_Read+0xe>
		DelayUS(40);   // wait for 40 us
 800150a:	2028      	movs	r0, #40	; 0x28
 800150c:	f000 fc66 	bl	8001ddc <DelayUS>
		if (!(HAL_GPIO_ReadPin (DHT11_Port, DHT11_Pin)))   // if the pin is low
 8001510:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001514:	481a      	ldr	r0, [pc, #104]	; (8001580 <DHT11_Read+0x94>)
 8001516:	f002 fb71 	bl	8003bfc <HAL_GPIO_ReadPin>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d10e      	bne.n	800153e <DHT11_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 8001520:	79bb      	ldrb	r3, [r7, #6]
 8001522:	f1c3 0307 	rsb	r3, r3, #7
 8001526:	2201      	movs	r2, #1
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	b25b      	sxtb	r3, r3
 800152e:	43db      	mvns	r3, r3
 8001530:	b25a      	sxtb	r2, r3
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	4013      	ands	r3, r2
 8001538:	b25b      	sxtb	r3, r3
 800153a:	71fb      	strb	r3, [r7, #7]
 800153c:	e00b      	b.n	8001556 <DHT11_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 800153e:	79bb      	ldrb	r3, [r7, #6]
 8001540:	f1c3 0307 	rsb	r3, r3, #7
 8001544:	2201      	movs	r2, #1
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	b25a      	sxtb	r2, r3
 800154c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001550:	4313      	orrs	r3, r2
 8001552:	b25b      	sxtb	r3, r3
 8001554:	71fb      	strb	r3, [r7, #7]
		while (HAL_GPIO_ReadPin (DHT11_Port, DHT11_Pin));  // wait for the pin to go low
 8001556:	bf00      	nop
 8001558:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800155c:	4808      	ldr	r0, [pc, #32]	; (8001580 <DHT11_Read+0x94>)
 800155e:	f002 fb4d 	bl	8003bfc <HAL_GPIO_ReadPin>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1f7      	bne.n	8001558 <DHT11_Read+0x6c>
	for (j=0;j<8;j++)
 8001568:	79bb      	ldrb	r3, [r7, #6]
 800156a:	3301      	adds	r3, #1
 800156c:	71bb      	strb	r3, [r7, #6]
 800156e:	79bb      	ldrb	r3, [r7, #6]
 8001570:	2b07      	cmp	r3, #7
 8001572:	d9c1      	bls.n	80014f8 <DHT11_Read+0xc>
	}
	return i;
 8001574:	79fb      	ldrb	r3, [r7, #7]
}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40020800 	.word	0x40020800

08001584 <humidity_Task>:


/****************** TASK DEFINITIONS *********************************/

void humidity_Task (void *arg)					// DHT11 -Check Humidity in Air
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
	uint16_t RH;

	//float dhtTemp = 0;
//	while(1)
		{
		  DHT11_Start();
 800158c:	f7ff ff50 	bl	8001430 <DHT11_Start>
		  DHT11_Check_Response();
 8001590:	f7ff ff7c 	bl	800148c <DHT11_Check_Response>

  		  Rh_byte1 = DHT11_Read ();
 8001594:	f7ff ffaa 	bl	80014ec <DHT11_Read>
 8001598:	4603      	mov	r3, r0
 800159a:	461a      	mov	r2, r3
 800159c:	4b15      	ldr	r3, [pc, #84]	; (80015f4 <humidity_Task+0x70>)
 800159e:	701a      	strb	r2, [r3, #0]
		  Rh_byte2 = DHT11_Read ();
 80015a0:	f7ff ffa4 	bl	80014ec <DHT11_Read>
 80015a4:	4603      	mov	r3, r0
 80015a6:	461a      	mov	r2, r3
 80015a8:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <humidity_Task+0x74>)
 80015aa:	701a      	strb	r2, [r3, #0]
		  Temp_byte1 = DHT11_Read ();
 80015ac:	f7ff ff9e 	bl	80014ec <DHT11_Read>
 80015b0:	4603      	mov	r3, r0
 80015b2:	461a      	mov	r2, r3
 80015b4:	4b11      	ldr	r3, [pc, #68]	; (80015fc <humidity_Task+0x78>)
 80015b6:	701a      	strb	r2, [r3, #0]
		  Temp_byte2 = DHT11_Read ();
 80015b8:	f7ff ff98 	bl	80014ec <DHT11_Read>
 80015bc:	4603      	mov	r3, r0
 80015be:	461a      	mov	r2, r3
 80015c0:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <humidity_Task+0x7c>)
 80015c2:	701a      	strb	r2, [r3, #0]

//		  SUM = DHT11_Read();

//		  TEMP = Temp_byte1;
		  RH = Rh_byte1;
 80015c4:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <humidity_Task+0x70>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	81fb      	strh	r3, [r7, #14]

//		  Temperature = (float) TEMP;
//		  dhtHumidity = (float) RH;

		  aHum.id = '4';					// Battery ID
 80015ca:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <humidity_Task+0x80>)
 80015cc:	2234      	movs	r2, #52	; 0x34
 80015ce:	701a      	strb	r2, [r3, #0]
		  aHum.data = RH;					// Present Humidity in the Air
 80015d0:	89fb      	ldrh	r3, [r7, #14]
 80015d2:	4a0c      	ldr	r2, [pc, #48]	; (8001604 <humidity_Task+0x80>)
 80015d4:	6053      	str	r3, [r2, #4]
		  aHum.sep = '|';
 80015d6:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <humidity_Task+0x80>)
 80015d8:	227c      	movs	r2, #124	; 0x7c
 80015da:	721a      	strb	r2, [r3, #8]

		  /***** send to the queue ****/
		  xQueueSendToBack(sensorQHandler, &aHum, 100);
 80015dc:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <humidity_Task+0x84>)
 80015de:	6818      	ldr	r0, [r3, #0]
 80015e0:	2300      	movs	r3, #0
 80015e2:	2264      	movs	r2, #100	; 0x64
 80015e4:	4907      	ldr	r1, [pc, #28]	; (8001604 <humidity_Task+0x80>)
 80015e6:	f005 fa45 	bl	8006a74 <xQueueGenericSend>
   // 	  xQueueSend(sensorQHandler, &aHum, 100);
   // 	  xQueueSend(loraQHandler, &aHum, portMAX_DELAY);
		}
}
 80015ea:	bf00      	nop
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	2000021c 	.word	0x2000021c
 80015f8:	2000021d 	.word	0x2000021d
 80015fc:	2000021e 	.word	0x2000021e
 8001600:	2000021f 	.word	0x2000021f
 8001604:	20000210 	.word	0x20000210
 8001608:	20000730 	.word	0x20000730

0800160c <DS18B20_Start2>:

float airTemp = 0;
uint8_t airTemp_byte1, airTemp_byte2;
/*********************************** DS18B20 FUNCTIONS ****************************************/
uint8_t DS18B20_Start2 (void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(airTemp_PORT, airTemp_PIN);  		 	// set the pin as output
 8001616:	2180      	movs	r1, #128	; 0x80
 8001618:	4813      	ldr	r0, [pc, #76]	; (8001668 <DS18B20_Start2+0x5c>)
 800161a:	f000 fcb7 	bl	8001f8c <Set_Pin_Output>
	HAL_GPIO_WritePin (airTemp_PORT, airTemp_PIN, 0);  		// pull the pin low
 800161e:	2200      	movs	r2, #0
 8001620:	2180      	movs	r1, #128	; 0x80
 8001622:	4811      	ldr	r0, [pc, #68]	; (8001668 <DS18B20_Start2+0x5c>)
 8001624:	f002 fb02 	bl	8003c2c <HAL_GPIO_WritePin>
	DelayUS(480);   										// delay according to datasheet
 8001628:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800162c:	f000 fbd6 	bl	8001ddc <DelayUS>

	Set_Pin_Input(airTemp_PORT, airTemp_PIN);    			// set the pin as input
 8001630:	2180      	movs	r1, #128	; 0x80
 8001632:	480d      	ldr	r0, [pc, #52]	; (8001668 <DS18B20_Start2+0x5c>)
 8001634:	f000 fcc8 	bl	8001fc8 <Set_Pin_Input>
	DelayUS (80);    										// delay according to datasheet
 8001638:	2050      	movs	r0, #80	; 0x50
 800163a:	f000 fbcf 	bl	8001ddc <DelayUS>

	if (!(HAL_GPIO_ReadPin (airTemp_PORT, airTemp_PIN)))
 800163e:	2180      	movs	r1, #128	; 0x80
 8001640:	4809      	ldr	r0, [pc, #36]	; (8001668 <DS18B20_Start2+0x5c>)
 8001642:	f002 fadb 	bl	8003bfc <HAL_GPIO_ReadPin>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d102      	bne.n	8001652 <DS18B20_Start2+0x46>
		Response = 1;    // if the pin is low i.e the presence pulse is detected
 800164c:	2301      	movs	r3, #1
 800164e:	71fb      	strb	r3, [r7, #7]
 8001650:	e001      	b.n	8001656 <DS18B20_Start2+0x4a>
	else Response = -1;
 8001652:	23ff      	movs	r3, #255	; 0xff
 8001654:	71fb      	strb	r3, [r7, #7]

	DelayUS(480); // 480 us delay totally.
 8001656:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800165a:	f000 fbbf 	bl	8001ddc <DelayUS>

	return Response;
 800165e:	79fb      	ldrb	r3, [r7, #7]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40020800 	.word	0x40020800

0800166c <DS18B20_Write2>:

void DS18B20_Write2 (uint8_t data)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(airTemp_PORT, airTemp_PIN);  // set as output
 8001676:	2180      	movs	r1, #128	; 0x80
 8001678:	481e      	ldr	r0, [pc, #120]	; (80016f4 <DS18B20_Write2+0x88>)
 800167a:	f000 fc87 	bl	8001f8c <Set_Pin_Output>

	for (int i=0; i<8; i++)
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	e02e      	b.n	80016e2 <DS18B20_Write2+0x76>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 8001684:	79fa      	ldrb	r2, [r7, #7]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	fa42 f303 	asr.w	r3, r2, r3
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	2b00      	cmp	r3, #0
 8001692:	d013      	beq.n	80016bc <DS18B20_Write2+0x50>
		{
			// write 1
			Set_Pin_Output(airTemp_PORT, airTemp_PIN);  // set as output
 8001694:	2180      	movs	r1, #128	; 0x80
 8001696:	4817      	ldr	r0, [pc, #92]	; (80016f4 <DS18B20_Write2+0x88>)
 8001698:	f000 fc78 	bl	8001f8c <Set_Pin_Output>
			HAL_GPIO_WritePin (airTemp_PORT, airTemp_PIN, 0);  // pull the pin LOW
 800169c:	2200      	movs	r2, #0
 800169e:	2180      	movs	r1, #128	; 0x80
 80016a0:	4814      	ldr	r0, [pc, #80]	; (80016f4 <DS18B20_Write2+0x88>)
 80016a2:	f002 fac3 	bl	8003c2c <HAL_GPIO_WritePin>
			DelayUS(1);  // wait for 1 us
 80016a6:	2001      	movs	r0, #1
 80016a8:	f000 fb98 	bl	8001ddc <DelayUS>

			Set_Pin_Input(airTemp_PORT, airTemp_PIN);  // set as input
 80016ac:	2180      	movs	r1, #128	; 0x80
 80016ae:	4811      	ldr	r0, [pc, #68]	; (80016f4 <DS18B20_Write2+0x88>)
 80016b0:	f000 fc8a 	bl	8001fc8 <Set_Pin_Input>
			DelayUS(60);  // wait for 60 us
 80016b4:	203c      	movs	r0, #60	; 0x3c
 80016b6:	f000 fb91 	bl	8001ddc <DelayUS>
 80016ba:	e00f      	b.n	80016dc <DS18B20_Write2+0x70>
		}

		else  // if the bit is low
		{
			// write 0
			Set_Pin_Output(airTemp_PORT, airTemp_PIN);
 80016bc:	2180      	movs	r1, #128	; 0x80
 80016be:	480d      	ldr	r0, [pc, #52]	; (80016f4 <DS18B20_Write2+0x88>)
 80016c0:	f000 fc64 	bl	8001f8c <Set_Pin_Output>
			HAL_GPIO_WritePin (airTemp_PORT, airTemp_PIN, 0);  // pull the pin LOW
 80016c4:	2200      	movs	r2, #0
 80016c6:	2180      	movs	r1, #128	; 0x80
 80016c8:	480a      	ldr	r0, [pc, #40]	; (80016f4 <DS18B20_Write2+0x88>)
 80016ca:	f002 faaf 	bl	8003c2c <HAL_GPIO_WritePin>
			DelayUS(60);	// wait for 60 us
 80016ce:	203c      	movs	r0, #60	; 0x3c
 80016d0:	f000 fb84 	bl	8001ddc <DelayUS>
			Set_Pin_Input(airTemp_PORT, airTemp_PIN);
 80016d4:	2180      	movs	r1, #128	; 0x80
 80016d6:	4807      	ldr	r0, [pc, #28]	; (80016f4 <DS18B20_Write2+0x88>)
 80016d8:	f000 fc76 	bl	8001fc8 <Set_Pin_Input>
	for (int i=0; i<8; i++)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	3301      	adds	r3, #1
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2b07      	cmp	r3, #7
 80016e6:	ddcd      	ble.n	8001684 <DS18B20_Write2+0x18>
		}
	}
}
 80016e8:	bf00      	nop
 80016ea:	bf00      	nop
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40020800 	.word	0x40020800

080016f8 <DS18B20_Read2>:

uint8_t DS18B20_Read2 (void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
	uint8_t value=0;
 80016fe:	2300      	movs	r3, #0
 8001700:	71fb      	strb	r3, [r7, #7]

	Set_Pin_Input(airTemp_PORT, airTemp_PIN);
 8001702:	2180      	movs	r1, #128	; 0x80
 8001704:	481a      	ldr	r0, [pc, #104]	; (8001770 <DS18B20_Read2+0x78>)
 8001706:	f000 fc5f 	bl	8001fc8 <Set_Pin_Input>

	for (int i=0;i<8;i++)
 800170a:	2300      	movs	r3, #0
 800170c:	603b      	str	r3, [r7, #0]
 800170e:	e026      	b.n	800175e <DS18B20_Read2+0x66>
	{
		Set_Pin_Output(airTemp_PORT, airTemp_PIN);  		// set as output
 8001710:	2180      	movs	r1, #128	; 0x80
 8001712:	4817      	ldr	r0, [pc, #92]	; (8001770 <DS18B20_Read2+0x78>)
 8001714:	f000 fc3a 	bl	8001f8c <Set_Pin_Output>

		HAL_GPIO_WritePin (airTemp_PORT, airTemp_PIN, 0);  // pull the data pin LOW
 8001718:	2200      	movs	r2, #0
 800171a:	2180      	movs	r1, #128	; 0x80
 800171c:	4814      	ldr	r0, [pc, #80]	; (8001770 <DS18B20_Read2+0x78>)
 800171e:	f002 fa85 	bl	8003c2c <HAL_GPIO_WritePin>
		DelayUS(1);
 8001722:	2001      	movs	r0, #1
 8001724:	f000 fb5a 	bl	8001ddc <DelayUS>
		//delay (1);  // wait for > 1us

		Set_Pin_Input(airTemp_PORT, airTemp_PIN);  			// set as input
 8001728:	2180      	movs	r1, #128	; 0x80
 800172a:	4811      	ldr	r0, [pc, #68]	; (8001770 <DS18B20_Read2+0x78>)
 800172c:	f000 fc4c 	bl	8001fc8 <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (airTemp_PORT, airTemp_PIN))  // if the pin is HIGH
 8001730:	2180      	movs	r1, #128	; 0x80
 8001732:	480f      	ldr	r0, [pc, #60]	; (8001770 <DS18B20_Read2+0x78>)
 8001734:	f002 fa62 	bl	8003bfc <HAL_GPIO_ReadPin>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d009      	beq.n	8001752 <DS18B20_Read2+0x5a>
		{
			value |= 1<<i;  // read = 1
 800173e:	2201      	movs	r2, #1
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	b25a      	sxtb	r2, r3
 8001748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174c:	4313      	orrs	r3, r2
 800174e:	b25b      	sxtb	r3, r3
 8001750:	71fb      	strb	r3, [r7, #7]
		}
		DelayUS(60); 		// wait for 60 us
 8001752:	203c      	movs	r0, #60	; 0x3c
 8001754:	f000 fb42 	bl	8001ddc <DelayUS>
	for (int i=0;i<8;i++)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	3301      	adds	r3, #1
 800175c:	603b      	str	r3, [r7, #0]
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	2b07      	cmp	r3, #7
 8001762:	ddd5      	ble.n	8001710 <DS18B20_Read2+0x18>
	}
	return value;
 8001764:	79fb      	ldrb	r3, [r7, #7]
}
 8001766:	4618      	mov	r0, r3
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40020800 	.word	0x40020800

08001774 <airTemp_Task>:


/****************** TASK DEFINITIONS *********************************/

void airTemp_Task (void *arg)					// Check Soil Temperature
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	uint16_t TEMP = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	81fb      	strh	r3, [r7, #14]

	//while(1)
	{
        DS18B20_Start2();
 8001780:	f7ff ff44 	bl	800160c <DS18B20_Start2>
        HAL_Delay (1);
 8001784:	2001      	movs	r0, #1
 8001786:	f001 fbbd 	bl	8002f04 <HAL_Delay>
	    DS18B20_Write2 (0xCC);  					// skip ROM
 800178a:	20cc      	movs	r0, #204	; 0xcc
 800178c:	f7ff ff6e 	bl	800166c <DS18B20_Write2>
	    DS18B20_Write2 (0x44);  					// convert t
 8001790:	2044      	movs	r0, #68	; 0x44
 8001792:	f7ff ff6b 	bl	800166c <DS18B20_Write2>
	    HAL_Delay (800);
 8001796:	f44f 7048 	mov.w	r0, #800	; 0x320
 800179a:	f001 fbb3 	bl	8002f04 <HAL_Delay>

	    DS18B20_Start2();
 800179e:	f7ff ff35 	bl	800160c <DS18B20_Start2>
	    HAL_Delay(1);
 80017a2:	2001      	movs	r0, #1
 80017a4:	f001 fbae 	bl	8002f04 <HAL_Delay>
	    DS18B20_Write2 (0xCC);  					// skip ROM
 80017a8:	20cc      	movs	r0, #204	; 0xcc
 80017aa:	f7ff ff5f 	bl	800166c <DS18B20_Write2>
	    DS18B20_Write2 (0xBE);  					// Read Scratch-pad
 80017ae:	20be      	movs	r0, #190	; 0xbe
 80017b0:	f7ff ff5c 	bl	800166c <DS18B20_Write2>

	    airTemp_byte1 = DS18B20_Read2();
 80017b4:	f7ff ffa0 	bl	80016f8 <DS18B20_Read2>
 80017b8:	4603      	mov	r3, r0
 80017ba:	461a      	mov	r2, r3
 80017bc:	4b1f      	ldr	r3, [pc, #124]	; (800183c <airTemp_Task+0xc8>)
 80017be:	701a      	strb	r2, [r3, #0]
	    airTemp_byte2 = DS18B20_Read2();
 80017c0:	f7ff ff9a 	bl	80016f8 <DS18B20_Read2>
 80017c4:	4603      	mov	r3, r0
 80017c6:	461a      	mov	r2, r3
 80017c8:	4b1d      	ldr	r3, [pc, #116]	; (8001840 <airTemp_Task+0xcc>)
 80017ca:	701a      	strb	r2, [r3, #0]
	    TEMP = (airTemp_byte2<<8)|airTemp_byte1;
 80017cc:	4b1c      	ldr	r3, [pc, #112]	; (8001840 <airTemp_Task+0xcc>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	021b      	lsls	r3, r3, #8
 80017d2:	b21a      	sxth	r2, r3
 80017d4:	4b19      	ldr	r3, [pc, #100]	; (800183c <airTemp_Task+0xc8>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	b21b      	sxth	r3, r3
 80017da:	4313      	orrs	r3, r2
 80017dc:	b21b      	sxth	r3, r3
 80017de:	81fb      	strh	r3, [r7, #14]
	    airTemp = (float)TEMP/16;
 80017e0:	89fb      	ldrh	r3, [r7, #14]
 80017e2:	ee07 3a90 	vmov	s15, r3
 80017e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017ea:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80017ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017f2:	4b14      	ldr	r3, [pc, #80]	; (8001844 <airTemp_Task+0xd0>)
 80017f4:	edc3 7a00 	vstr	s15, [r3]

	   /***** LOAD THE DATA ****/
		aTemp.id = '3';							// Air Temperature ID
 80017f8:	4b13      	ldr	r3, [pc, #76]	; (8001848 <airTemp_Task+0xd4>)
 80017fa:	2233      	movs	r2, #51	; 0x33
 80017fc:	701a      	strb	r2, [r3, #0]
		aTemp.data = airTemp;				// Air Temperature Data
 80017fe:	4b11      	ldr	r3, [pc, #68]	; (8001844 <airTemp_Task+0xd0>)
 8001800:	edd3 7a00 	vldr	s15, [r3]
 8001804:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001808:	ee17 2a90 	vmov	r2, s15
 800180c:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <airTemp_Task+0xd4>)
 800180e:	605a      	str	r2, [r3, #4]
		aTemp.sep = '|';
 8001810:	4b0d      	ldr	r3, [pc, #52]	; (8001848 <airTemp_Task+0xd4>)
 8001812:	227c      	movs	r2, #124	; 0x7c
 8001814:	721a      	strb	r2, [r3, #8]

		/***** send to the queue ****/
		xQueueSendToBack(sensorQHandler, &aTemp, 100);
 8001816:	4b0d      	ldr	r3, [pc, #52]	; (800184c <airTemp_Task+0xd8>)
 8001818:	6818      	ldr	r0, [r3, #0]
 800181a:	2300      	movs	r3, #0
 800181c:	2264      	movs	r2, #100	; 0x64
 800181e:	490a      	ldr	r1, [pc, #40]	; (8001848 <airTemp_Task+0xd4>)
 8001820:	f005 f928 	bl	8006a74 <xQueueGenericSend>
//		xQueueSend(sensorQHandler, &aTemp, 100);
	//	xQueueSend(loraQHandler, &aTemp, portMAX_DELAY);

	  vTaskDelay(pdMS_TO_TICKS(1000));
 8001824:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001828:	f005 ff2e 	bl	8007688 <vTaskDelay>
	}
	vTaskDelete(NULL);
 800182c:	2000      	movs	r0, #0
 800182e:	f005 fe9b 	bl	8007568 <vTaskDelete>
}
 8001832:	bf00      	nop
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000230 	.word	0x20000230
 8001840:	20000231 	.word	0x20000231
 8001844:	2000022c 	.word	0x2000022c
 8001848:	20000220 	.word	0x20000220
 800184c:	20000730 	.word	0x20000730

08001850 <battery_Task>:
//}bVol;
Sensor bVol;
/****************** TASK DEFINITIONS *********************************/

void battery_Task (void *arg)					// Check Battery Level at Node1
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
//	while(1)
	{
		selectADC2();
 8001858:	f000 fb78 	bl	8001f4c <selectADC2>

		HAL_ADC_Start(&hadc1);
 800185c:	4821      	ldr	r0, [pc, #132]	; (80018e4 <battery_Task+0x94>)
 800185e:	f001 fbb9 	bl	8002fd4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY);			// Get Soil Moisture Sensor Reading
 8001862:	f04f 31ff 	mov.w	r1, #4294967295
 8001866:	481f      	ldr	r0, [pc, #124]	; (80018e4 <battery_Task+0x94>)
 8001868:	f001 fc9b 	bl	80031a2 <HAL_ADC_PollForConversion>
		adcValue2 = HAL_ADC_GetValue(&hadc1);
 800186c:	481d      	ldr	r0, [pc, #116]	; (80018e4 <battery_Task+0x94>)
 800186e:	f001 fd23 	bl	80032b8 <HAL_ADC_GetValue>
 8001872:	ee07 0a90 	vmov	s15, r0
 8001876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800187a:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <battery_Task+0x98>)
 800187c:	edc3 7a00 	vstr	s15, [r3]
		HAL_ADC_Stop(&hadc1);
 8001880:	4818      	ldr	r0, [pc, #96]	; (80018e4 <battery_Task+0x94>)
 8001882:	f001 fc5b 	bl	800313c <HAL_ADC_Stop>

		/********** LOAD THE DATA ***********/
		voltage = (adcValue2/4095)*16.5;		//for 3.3v systems : 3.3*5  = 16.5
 8001886:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <battery_Task+0x98>)
 8001888:	ed93 7a00 	vldr	s14, [r3]
 800188c:	eddf 6a17 	vldr	s13, [pc, #92]	; 80018ec <battery_Task+0x9c>
 8001890:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001894:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80018f0 <battery_Task+0xa0>
 8001898:	ee67 7a87 	vmul.f32	s15, s15, s14
 800189c:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <battery_Task+0xa4>)
 800189e:	edc3 7a00 	vstr	s15, [r3]
	//	voltage = (adcValue2/4095)*25;
		bVol.id = '5';							// Battery ID
 80018a2:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <battery_Task+0xa8>)
 80018a4:	2235      	movs	r2, #53	; 0x35
 80018a6:	701a      	strb	r2, [r3, #0]
		bVol.data = voltage;					// Present Battery Voltage
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <battery_Task+0xa4>)
 80018aa:	edd3 7a00 	vldr	s15, [r3]
 80018ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018b2:	ee17 2a90 	vmov	r2, s15
 80018b6:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <battery_Task+0xa8>)
 80018b8:	605a      	str	r2, [r3, #4]
		bVol.sep = '|';
 80018ba:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <battery_Task+0xa8>)
 80018bc:	227c      	movs	r2, #124	; 0x7c
 80018be:	721a      	strb	r2, [r3, #8]

		/***** send to the queue ****/
		xQueueSendToBack(sensorQHandler, &bVol, 100);
 80018c0:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <battery_Task+0xac>)
 80018c2:	6818      	ldr	r0, [r3, #0]
 80018c4:	2300      	movs	r3, #0
 80018c6:	2264      	movs	r2, #100	; 0x64
 80018c8:	490b      	ldr	r1, [pc, #44]	; (80018f8 <battery_Task+0xa8>)
 80018ca:	f005 f8d3 	bl	8006a74 <xQueueGenericSend>
	//	xQueueSend(sensorQHandler, &bVol, 100);
	//	xQueueSend(loraQHandler, &bVol, portMAX_DELAY);

		vTaskDelay(pdMS_TO_TICKS(1000));
 80018ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018d2:	f005 fed9 	bl	8007688 <vTaskDelay>
	}
	vTaskDelete(NULL);
 80018d6:	2000      	movs	r0, #0
 80018d8:	f005 fe46 	bl	8007568 <vTaskDelete>
}
 80018dc:	bf00      	nop
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	200005b0 	.word	0x200005b0
 80018e8:	20000234 	.word	0x20000234
 80018ec:	457ff000 	.word	0x457ff000
 80018f0:	41840000 	.word	0x41840000
 80018f4:	20000238 	.word	0x20000238
 80018f8:	2000023c 	.word	0x2000023c
 80018fc:	20000730 	.word	0x20000730

08001900 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4a07      	ldr	r2, [pc, #28]	; (800192c <vApplicationGetIdleTaskMemory+0x2c>)
 8001910:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	4a06      	ldr	r2, [pc, #24]	; (8001930 <vApplicationGetIdleTaskMemory+0x30>)
 8001916:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2280      	movs	r2, #128	; 0x80
 800191c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800191e:	bf00      	nop
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	20000248 	.word	0x20000248
 8001930:	200002fc 	.word	0x200002fc

08001934 <lcd_Task>:
extern xTaskHandle lcdTaskHandler;

/****************** TASK DEFINITIONS *********************************/

void lcd_Task (void *arg)						// Display Values on LCD
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b0a6      	sub	sp, #152	; 0x98
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		/**** RECEIVE FROM QUEUE *****/
	//	if (xQueueIsQueueFullFromISR(sensorQHandler))
		{
			if(xQueuePeek(sensorQHandler, &buffer, portMAX_DELAY) == pdPASS)
 800193c:	4b34      	ldr	r3, [pc, #208]	; (8001a10 <lcd_Task+0xdc>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f107 011c 	add.w	r1, r7, #28
 8001944:	f04f 32ff 	mov.w	r2, #4294967295
 8001948:	4618      	mov	r0, r3
 800194a:	f005 fa71 	bl	8006e30 <xQueuePeek>
 800194e:	4603      	mov	r3, r0
 8001950:	2b01      	cmp	r3, #1
 8001952:	d13e      	bne.n	80019d2 <lcd_Task+0x9e>
			{
				lcd_Clear();
 8001954:	f000 f8ec 	bl	8001b30 <lcd_Clear>
				HAL_Delay(1000);
 8001958:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800195c:	f001 fad2 	bl	8002f04 <HAL_Delay>
				lcd_SetCursor(0,0);
 8001960:	2100      	movs	r1, #0
 8001962:	2000      	movs	r0, #0
 8001964:	f000 f8fa 	bl	8001b5c <lcd_SetCursor>
				lcd_PrintStr("Farm Node01");
 8001968:	482a      	ldr	r0, [pc, #168]	; (8001a14 <lcd_Task+0xe0>)
 800196a:	f000 f96f 	bl	8001c4c <lcd_PrintStr>
				lcd_SetCursor(0,1);
 800196e:	2101      	movs	r1, #1
 8001970:	2000      	movs	r0, #0
 8001972:	f000 f8f3 	bl	8001b5c <lcd_SetCursor>
				lcd_PrintStr("Data Received");
 8001976:	4828      	ldr	r0, [pc, #160]	; (8001a18 <lcd_Task+0xe4>)
 8001978:	f000 f968 	bl	8001c4c <lcd_PrintStr>
				HAL_Delay(2000);
 800197c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001980:	f001 fac0 	bl	8002f04 <HAL_Delay>
				{
					lcd_Clear();
 8001984:	f000 f8d4 	bl	8001b30 <lcd_Clear>
					lcd_SetCursor(0,0);
 8001988:	2100      	movs	r1, #0
 800198a:	2000      	movs	r0, #0
 800198c:	f000 f8e6 	bl	8001b5c <lcd_SetCursor>

					sprintf(lcdbuffer,"ID: %c", buffer[0]);
 8001990:	69fa      	ldr	r2, [r7, #28]
 8001992:	f107 0308 	add.w	r3, r7, #8
 8001996:	4921      	ldr	r1, [pc, #132]	; (8001a1c <lcd_Task+0xe8>)
 8001998:	4618      	mov	r0, r3
 800199a:	f008 f887 	bl	8009aac <siprintf>
					lcd_PrintStr(lcdbuffer);
 800199e:	f107 0308 	add.w	r3, r7, #8
 80019a2:	4618      	mov	r0, r3
 80019a4:	f000 f952 	bl	8001c4c <lcd_PrintStr>

					lcd_SetCursor(0,1);
 80019a8:	2101      	movs	r1, #1
 80019aa:	2000      	movs	r0, #0
 80019ac:	f000 f8d6 	bl	8001b5c <lcd_SetCursor>
					sprintf(lcdbuffer,"Value: %d", buffer[1]);
 80019b0:	6a3a      	ldr	r2, [r7, #32]
 80019b2:	f107 0308 	add.w	r3, r7, #8
 80019b6:	491a      	ldr	r1, [pc, #104]	; (8001a20 <lcd_Task+0xec>)
 80019b8:	4618      	mov	r0, r3
 80019ba:	f008 f877 	bl	8009aac <siprintf>
					lcd_PrintStr(lcdbuffer);
 80019be:	f107 0308 	add.w	r3, r7, #8
 80019c2:	4618      	mov	r0, r3
 80019c4:	f000 f942 	bl	8001c4c <lcd_PrintStr>
					HAL_Delay(2000);
 80019c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80019cc:	f001 fa9a 	bl	8002f04 <HAL_Delay>
 80019d0:	e015      	b.n	80019fe <lcd_Task+0xca>
//				    }
				}
			}
			else
			{
				lcd_PrintStr("Data NOT Received");
 80019d2:	4814      	ldr	r0, [pc, #80]	; (8001a24 <lcd_Task+0xf0>)
 80019d4:	f000 f93a 	bl	8001c4c <lcd_PrintStr>
				for(int x=0; x<40; x=x+1)
 80019d8:	2300      	movs	r3, #0
 80019da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80019de:	e00a      	b.n	80019f6 <lcd_Task+0xc2>
				   {
					 lcd_ScrollDisplayLeft();
 80019e0:	f000 f904 	bl	8001bec <lcd_ScrollDisplayLeft>
					 HAL_Delay(500);
 80019e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019e8:	f001 fa8c 	bl	8002f04 <HAL_Delay>
				for(int x=0; x<40; x=x+1)
 80019ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80019f0:	3301      	adds	r3, #1
 80019f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80019f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80019fa:	2b27      	cmp	r3, #39	; 0x27
 80019fc:	ddf0      	ble.n	80019e0 <lcd_Task+0xac>
				   }
			}
			vTaskDelay(pdMS_TO_TICKS(1000));
 80019fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a02:	f005 fe41 	bl	8007688 <vTaskDelay>
		 }
	vTaskDelete(NULL);
 8001a06:	2000      	movs	r0, #0
 8001a08:	f005 fdae 	bl	8007568 <vTaskDelete>
			if(xQueuePeek(sensorQHandler, &buffer, portMAX_DELAY) == pdPASS)
 8001a0c:	e796      	b.n	800193c <lcd_Task+0x8>
 8001a0e:	bf00      	nop
 8001a10:	20000730 	.word	0x20000730
 8001a14:	0800d358 	.word	0x0800d358
 8001a18:	0800d364 	.word	0x0800d364
 8001a1c:	0800d374 	.word	0x0800d374
 8001a20:	0800d37c 	.word	0x0800d37c
 8001a24:	0800d388 	.word	0x0800d388

08001a28 <lcd_Init>:
        0b00110,
        0b00000
};

void lcd_Init(uint8_t rows)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8001a32:	4a38      	ldr	r2, [pc, #224]	; (8001b14 <lcd_Init+0xec>)
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8001a38:	4b37      	ldr	r3, [pc, #220]	; (8001b18 <lcd_Init+0xf0>)
 8001a3a:	2208      	movs	r2, #8
 8001a3c:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8001a3e:	4b37      	ldr	r3, [pc, #220]	; (8001b1c <lcd_Init+0xf4>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8001a44:	4b33      	ldr	r3, [pc, #204]	; (8001b14 <lcd_Init+0xec>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d907      	bls.n	8001a5c <lcd_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8001a4c:	4b33      	ldr	r3, [pc, #204]	; (8001b1c <lcd_Init+0xf4>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	f043 0308 	orr.w	r3, r3, #8
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	4b31      	ldr	r3, [pc, #196]	; (8001b1c <lcd_Init+0xf4>)
 8001a58:	701a      	strb	r2, [r3, #0]
 8001a5a:	e006      	b.n	8001a6a <lcd_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8001a5c:	4b2f      	ldr	r3, [pc, #188]	; (8001b1c <lcd_Init+0xf4>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	f043 0304 	orr.w	r3, r3, #4
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	4b2d      	ldr	r3, [pc, #180]	; (8001b1c <lcd_Init+0xf4>)
 8001a68:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8001a6a:	f000 f98d 	bl	8001d88 <DelayInit>
  HAL_Delay(50);
 8001a6e:	2032      	movs	r0, #50	; 0x32
 8001a70:	f001 fa48 	bl	8002f04 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8001a74:	4b28      	ldr	r3, [pc, #160]	; (8001b18 <lcd_Init+0xf0>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 f94b 	bl	8001d14 <ExpanderWrite>
  HAL_Delay(1000);
 8001a7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a82:	f001 fa3f 	bl	8002f04 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8001a86:	2030      	movs	r0, #48	; 0x30
 8001a88:	f000 f932 	bl	8001cf0 <Write4Bits>
  DelayUS(4500);
 8001a8c:	f241 1094 	movw	r0, #4500	; 0x1194
 8001a90:	f000 f9a4 	bl	8001ddc <DelayUS>

  Write4Bits(0x03 << 4);
 8001a94:	2030      	movs	r0, #48	; 0x30
 8001a96:	f000 f92b 	bl	8001cf0 <Write4Bits>
  DelayUS(4500);
 8001a9a:	f241 1094 	movw	r0, #4500	; 0x1194
 8001a9e:	f000 f99d 	bl	8001ddc <DelayUS>

  Write4Bits(0x03 << 4);
 8001aa2:	2030      	movs	r0, #48	; 0x30
 8001aa4:	f000 f924 	bl	8001cf0 <Write4Bits>
  DelayUS(4500);
 8001aa8:	f241 1094 	movw	r0, #4500	; 0x1194
 8001aac:	f000 f996 	bl	8001ddc <DelayUS>

  Write4Bits(0x02 << 4);
 8001ab0:	2020      	movs	r0, #32
 8001ab2:	f000 f91d 	bl	8001cf0 <Write4Bits>
  DelayUS(100);
 8001ab6:	2064      	movs	r0, #100	; 0x64
 8001ab8:	f000 f990 	bl	8001ddc <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8001abc:	4b17      	ldr	r3, [pc, #92]	; (8001b1c <lcd_Init+0xf4>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	f043 0320 	orr.w	r3, r3, #32
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f000 f8d5 	bl	8001c76 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001acc:	4b14      	ldr	r3, [pc, #80]	; (8001b20 <lcd_Init+0xf8>)
 8001ace:	2204      	movs	r2, #4
 8001ad0:	701a      	strb	r2, [r3, #0]
  lcd_Display();
 8001ad2:	f000 f875 	bl	8001bc0 <lcd_Display>
  lcd_Clear();
 8001ad6:	f000 f82b 	bl	8001b30 <lcd_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001ada:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <lcd_Init+0xfc>)
 8001adc:	2202      	movs	r2, #2
 8001ade:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8001ae0:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <lcd_Init+0xfc>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	f043 0304 	orr.w	r3, r3, #4
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	4618      	mov	r0, r3
 8001aec:	f000 f8c3 	bl	8001c76 <SendCommand>
  DelayUS(4500);
 8001af0:	f241 1094 	movw	r0, #4500	; 0x1194
 8001af4:	f000 f972 	bl	8001ddc <DelayUS>

  lcd_CreateSpecialChar(0, special1);
 8001af8:	490b      	ldr	r1, [pc, #44]	; (8001b28 <lcd_Init+0x100>)
 8001afa:	2000      	movs	r0, #0
 8001afc:	f000 f87d 	bl	8001bfa <lcd_CreateSpecialChar>
  lcd_CreateSpecialChar(1, special2);
 8001b00:	490a      	ldr	r1, [pc, #40]	; (8001b2c <lcd_Init+0x104>)
 8001b02:	2001      	movs	r0, #1
 8001b04:	f000 f879 	bl	8001bfa <lcd_CreateSpecialChar>

  lcd_Home();
 8001b08:	f000 f81d 	bl	8001b46 <lcd_Home>
}
 8001b0c:	bf00      	nop
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	200004ff 	.word	0x200004ff
 8001b18:	20000500 	.word	0x20000500
 8001b1c:	200004fc 	.word	0x200004fc
 8001b20:	200004fd 	.word	0x200004fd
 8001b24:	200004fe 	.word	0x200004fe
 8001b28:	20000000 	.word	0x20000000
 8001b2c:	20000008 	.word	0x20000008

08001b30 <lcd_Clear>:

void lcd_Clear()
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8001b34:	2001      	movs	r0, #1
 8001b36:	f000 f89e 	bl	8001c76 <SendCommand>
  DelayUS(2000);
 8001b3a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b3e:	f000 f94d 	bl	8001ddc <DelayUS>
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <lcd_Home>:

void lcd_Home()
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8001b4a:	2002      	movs	r0, #2
 8001b4c:	f000 f893 	bl	8001c76 <SendCommand>
  DelayUS(2000);
 8001b50:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b54:	f000 f942 	bl	8001ddc <DelayUS>
}
 8001b58:	bf00      	nop
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <lcd_SetCursor>:

void lcd_SetCursor(uint8_t col, uint8_t row)
{
 8001b5c:	b590      	push	{r4, r7, lr}
 8001b5e:	b087      	sub	sp, #28
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	460a      	mov	r2, r1
 8001b66:	71fb      	strb	r3, [r7, #7]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8001b6c:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <lcd_SetCursor+0x5c>)
 8001b6e:	f107 0408 	add.w	r4, r7, #8
 8001b72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8001b78:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <lcd_SetCursor+0x60>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	79ba      	ldrb	r2, [r7, #6]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d303      	bcc.n	8001b8a <lcd_SetCursor+0x2e>
  {
    row = dpRows-1;
 8001b82:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <lcd_SetCursor+0x60>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8001b8a:	79bb      	ldrb	r3, [r7, #6]
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	3318      	adds	r3, #24
 8001b90:	443b      	add	r3, r7
 8001b92:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	b25b      	sxtb	r3, r3
 8001ba0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ba4:	b25b      	sxtb	r3, r3
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f000 f864 	bl	8001c76 <SendCommand>
}
 8001bae:	bf00      	nop
 8001bb0:	371c      	adds	r7, #28
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd90      	pop	{r4, r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	0800d39c 	.word	0x0800d39c
 8001bbc:	200004ff 	.word	0x200004ff

08001bc0 <lcd_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void lcd_Display()
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8001bc4:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <lcd_Display+0x28>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	f043 0304 	orr.w	r3, r3, #4
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <lcd_Display+0x28>)
 8001bd0:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8001bd2:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <lcd_Display+0x28>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	f043 0308 	orr.w	r3, r3, #8
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f000 f84a 	bl	8001c76 <SendCommand>
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	200004fd 	.word	0x200004fd

08001bec <lcd_ScrollDisplayLeft>:
  dpControl |= LCD_BLINKON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void lcd_ScrollDisplayLeft(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  SendCommand(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVELEFT);
 8001bf0:	2018      	movs	r0, #24
 8001bf2:	f000 f840 	bl	8001c76 <SendCommand>
}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <lcd_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void lcd_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b084      	sub	sp, #16
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	4603      	mov	r3, r0
 8001c02:	6039      	str	r1, [r7, #0]
 8001c04:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	b25b      	sxtb	r3, r3
 8001c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c18:	b25b      	sxtb	r3, r3
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f000 f82a 	bl	8001c76 <SendCommand>
  for (int i=0; i<8; i++)
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	e009      	b.n	8001c3c <lcd_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f000 f82e 	bl	8001c92 <SendChar>
  for (int i=0; i<8; i++)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2b07      	cmp	r3, #7
 8001c40:	ddf2      	ble.n	8001c28 <lcd_CreateSpecialChar+0x2e>
  }
}
 8001c42:	bf00      	nop
 8001c44:	bf00      	nop
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <lcd_PrintStr>:
{
  lcd_CreateSpecialChar(char_num, rows);
}

void lcd_PrintStr(const char c[])
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8001c54:	e006      	b.n	8001c64 <lcd_PrintStr+0x18>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	1c5a      	adds	r2, r3, #1
 8001c5a:	607a      	str	r2, [r7, #4]
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f000 f817 	bl	8001c92 <SendChar>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1f4      	bne.n	8001c56 <lcd_PrintStr+0xa>
}
 8001c6c:	bf00      	nop
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8001c80:	79fb      	ldrb	r3, [r7, #7]
 8001c82:	2100      	movs	r1, #0
 8001c84:	4618      	mov	r0, r3
 8001c86:	f000 f812 	bl	8001cae <Send>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <SendChar>:

static void SendChar(uint8_t ch)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	4603      	mov	r3, r0
 8001c9a:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8001c9c:	79fb      	ldrb	r3, [r7, #7]
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f000 f804 	bl	8001cae <Send>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b084      	sub	sp, #16
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	460a      	mov	r2, r1
 8001cb8:	71fb      	strb	r3, [r7, #7]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	f023 030f 	bic.w	r3, r3, #15
 8001cc4:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	011b      	lsls	r3, r3, #4
 8001cca:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8001ccc:	7bfa      	ldrb	r2, [r7, #15]
 8001cce:	79bb      	ldrb	r3, [r7, #6]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f000 f80b 	bl	8001cf0 <Write4Bits>
  Write4Bits((lownib)|mode);
 8001cda:	7bba      	ldrb	r2, [r7, #14]
 8001cdc:	79bb      	ldrb	r3, [r7, #6]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f000 f804 	bl	8001cf0 <Write4Bits>
}
 8001ce8:	bf00      	nop
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <Write4Bits>:

static void Write4Bits(uint8_t value)
//void Write4Bits(uint8_t value)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f000 f809 	bl	8001d14 <ExpanderWrite>
  PulseEnable(value);
 8001d02:	79fb      	ldrb	r3, [r7, #7]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f000 f821 	bl	8001d4c <PulseEnable>
}
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
	...

08001d14 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af02      	add	r7, sp, #8
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8001d1e:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <ExpanderWrite+0x30>)
 8001d20:	781a      	ldrb	r2, [r3, #0]
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8001d2a:	f107 020f 	add.w	r2, r7, #15
 8001d2e:	230a      	movs	r3, #10
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	2301      	movs	r3, #1
 8001d34:	214e      	movs	r1, #78	; 0x4e
 8001d36:	4804      	ldr	r0, [pc, #16]	; (8001d48 <ExpanderWrite+0x34>)
 8001d38:	f002 f8d6 	bl	8003ee8 <HAL_I2C_Master_Transmit>
}
 8001d3c:	bf00      	nop
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20000500 	.word	0x20000500
 8001d48:	200005f8 	.word	0x200005f8

08001d4c <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8001d56:	79fb      	ldrb	r3, [r7, #7]
 8001d58:	f043 0304 	orr.w	r3, r3, #4
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff ffd8 	bl	8001d14 <ExpanderWrite>
  DelayUS(20);
 8001d64:	2014      	movs	r0, #20
 8001d66:	f000 f839 	bl	8001ddc <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	f023 0304 	bic.w	r3, r3, #4
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff ffce 	bl	8001d14 <ExpanderWrite>
  DelayUS(20);
 8001d78:	2014      	movs	r0, #20
 8001d7a:	f000 f82f 	bl	8001ddc <DelayUS>
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <DelayInit>:

static void DelayInit(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001d8c:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <DelayInit+0x4c>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	4a10      	ldr	r2, [pc, #64]	; (8001dd4 <DelayInit+0x4c>)
 8001d92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d96:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8001d98:	4b0e      	ldr	r3, [pc, #56]	; (8001dd4 <DelayInit+0x4c>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	4a0d      	ldr	r2, [pc, #52]	; (8001dd4 <DelayInit+0x4c>)
 8001d9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001da2:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001da4:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <DelayInit+0x50>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a0b      	ldr	r2, [pc, #44]	; (8001dd8 <DelayInit+0x50>)
 8001daa:	f023 0301 	bic.w	r3, r3, #1
 8001dae:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001db0:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <DelayInit+0x50>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a08      	ldr	r2, [pc, #32]	; (8001dd8 <DelayInit+0x50>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <DelayInit+0x50>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8001dc2:	bf00      	nop
  __ASM volatile ("NOP");
 8001dc4:	bf00      	nop
  __ASM volatile ("NOP");
 8001dc6:	bf00      	nop
}
 8001dc8:	bf00      	nop
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	e000edf0 	.word	0xe000edf0
 8001dd8:	e0001000 	.word	0xe0001000

08001ddc <DelayUS>:

void DelayUS(uint32_t us) {
 8001ddc:	b480      	push	{r7}
 8001dde:	b087      	sub	sp, #28
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8001de4:	4b0e      	ldr	r3, [pc, #56]	; (8001e20 <DelayUS+0x44>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a0e      	ldr	r2, [pc, #56]	; (8001e24 <DelayUS+0x48>)
 8001dea:	fba2 2303 	umull	r2, r3, r2, r3
 8001dee:	0c9a      	lsrs	r2, r3, #18
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	fb02 f303 	mul.w	r3, r2, r3
 8001df6:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8001df8:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <DelayUS+0x4c>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8001dfe:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <DelayUS+0x4c>)
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d8f6      	bhi.n	8001dfe <DelayUS+0x22>
}
 8001e10:	bf00      	nop
 8001e12:	bf00      	nop
 8001e14:	371c      	adds	r7, #28
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	20000010 	.word	0x20000010
 8001e24:	431bde83 	.word	0x431bde83
 8001e28:	e0001000 	.word	0xe0001000

08001e2c <lora_Task>:
//uint8_t send_data[128];
//int	RSSI;


void lora_Task (void *arg)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b088      	sub	sp, #32
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
	int lrBuffer[3];
	while(1)
	{
		//if (xQueueIsQueueFullFromISR(loraQHandler))
		{
			if(xQueueReceive(sensorQHandler, &lrBuffer, portMAX_DELAY) == pdPASS)
 8001e34:	4b2f      	ldr	r3, [pc, #188]	; (8001ef4 <lora_Task+0xc8>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f107 0108 	add.w	r1, r7, #8
 8001e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e40:	4618      	mov	r0, r3
 8001e42:	f004 ff15 	bl	8006c70 <xQueueReceive>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d115      	bne.n	8001e78 <lora_Task+0x4c>
			{
				lcd_SetCursor(0,0);
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	2000      	movs	r0, #0
 8001e50:	f7ff fe84 	bl	8001b5c <lcd_SetCursor>
				lcd_PrintStr("Data Received by LoRa");
 8001e54:	4828      	ldr	r0, [pc, #160]	; (8001ef8 <lora_Task+0xcc>)
 8001e56:	f7ff fef9 	bl	8001c4c <lcd_PrintStr>
				for(int x=0; x<20; x++)
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
 8001e5e:	e007      	b.n	8001e70 <lora_Task+0x44>
				   {
					 lcd_ScrollDisplayLeft();
 8001e60:	f7ff fec4 	bl	8001bec <lcd_ScrollDisplayLeft>
					 HAL_Delay(250);
 8001e64:	20fa      	movs	r0, #250	; 0xfa
 8001e66:	f001 f84d 	bl	8002f04 <HAL_Delay>
				for(int x=0; x<20; x++)
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	61fb      	str	r3, [r7, #28]
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	2b13      	cmp	r3, #19
 8001e74:	ddf4      	ble.n	8001e60 <lora_Task+0x34>
 8001e76:	e011      	b.n	8001e9c <lora_Task+0x70>
				   }
			}
			else
			{
				lcd_PrintStr("Data NOT Received");
 8001e78:	4820      	ldr	r0, [pc, #128]	; (8001efc <lora_Task+0xd0>)
 8001e7a:	f7ff fee7 	bl	8001c4c <lcd_PrintStr>
				for(int x=0; x<40; x++)
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61bb      	str	r3, [r7, #24]
 8001e82:	e008      	b.n	8001e96 <lora_Task+0x6a>
				   {
					 lcd_ScrollDisplayLeft();
 8001e84:	f7ff feb2 	bl	8001bec <lcd_ScrollDisplayLeft>
					 HAL_Delay(500);
 8001e88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e8c:	f001 f83a 	bl	8002f04 <HAL_Delay>
				for(int x=0; x<40; x++)
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	3301      	adds	r3, #1
 8001e94:	61bb      	str	r3, [r7, #24]
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	2b27      	cmp	r3, #39	; 0x27
 8001e9a:	ddf3      	ble.n	8001e84 <lora_Task+0x58>

		//send_data[0] = 0x3B; 					// MY ADDRESS
		//send_data[0] = 0xBB; 					// MY ADDRESS
		//send_data[0] = 0xFF; 					// MY ADDRESS

		for(int i=0; i<=6; i++)
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	e00a      	b.n	8001eb8 <lora_Task+0x8c>
		{
			LoRa_transmit(&myLoRa, (void *)lrBuffer, 128, 1000);
 8001ea2:	f107 0108 	add.w	r1, r7, #8
 8001ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eaa:	2280      	movs	r2, #128	; 0x80
 8001eac:	4814      	ldr	r0, [pc, #80]	; (8001f00 <lora_Task+0xd4>)
 8001eae:	f7ff fa06 	bl	80012be <LoRa_transmit>
		for(int i=0; i<=6; i++)
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	2b06      	cmp	r3, #6
 8001ebc:	ddf1      	ble.n	8001ea2 <lora_Task+0x76>
	//		HAL_UART_Transmit(&huart1, (uint8_t *)lrBuffer, 128, 1000);
		}

		HAL_Delay(1500);
 8001ebe:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001ec2:	f001 f81f 	bl	8002f04 <HAL_Delay>


		// RECEIVING DATA - - - - - - - - - - - - - - - - - - - - - - - -
				//*********************** SWITCH "ON/OFF" SOLENOID VALVE OF NODE_01.**************************

		LoRa_receive(&myLoRa, read_data, 128);
 8001ec6:	2280      	movs	r2, #128	; 0x80
 8001ec8:	490e      	ldr	r1, [pc, #56]	; (8001f04 <lora_Task+0xd8>)
 8001eca:	480d      	ldr	r0, [pc, #52]	; (8001f00 <lora_Task+0xd4>)
 8001ecc:	f7ff fa4f 	bl	800136e <LoRa_receive>
		if (read_data[0] == 1)
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <lora_Task+0xd8>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d106      	bne.n	8001ee6 <lora_Task+0xba>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ede:	480a      	ldr	r0, [pc, #40]	; (8001f08 <lora_Task+0xdc>)
 8001ee0:	f001 fea4 	bl	8003c2c <HAL_GPIO_WritePin>
 8001ee4:	e7a6      	b.n	8001e34 <lora_Task+0x8>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001eec:	4806      	ldr	r0, [pc, #24]	; (8001f08 <lora_Task+0xdc>)
 8001eee:	f001 fe9d 	bl	8003c2c <HAL_GPIO_WritePin>
			if(xQueueReceive(sensorQHandler, &lrBuffer, portMAX_DELAY) == pdPASS)
 8001ef2:	e79f      	b.n	8001e34 <lora_Task+0x8>
 8001ef4:	20000730 	.word	0x20000730
 8001ef8:	0800d3ac 	.word	0x0800d3ac
 8001efc:	0800d3c4 	.word	0x0800d3c4
 8001f00:	20000504 	.word	0x20000504
 8001f04:	20000530 	.word	0x20000530
 8001f08:	40020800 	.word	0x40020800

08001f0c <selectADC1>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/********************** SELECT ADC CHANNELS ********************************************/
void selectADC1()
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
	 ADC_ChannelConfTypeDef sConfig = {0};
 8001f12:	463b      	mov	r3, r7
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8001f22:	2301      	movs	r3, #1
 8001f24:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001f26:	2300      	movs	r3, #0
 8001f28:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f2a:	463b      	mov	r3, r7
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4806      	ldr	r0, [pc, #24]	; (8001f48 <selectADC1+0x3c>)
 8001f30:	f001 f9d0 	bl	80032d4 <HAL_ADC_ConfigChannel>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <selectADC1+0x32>
	  {
	    Error_Handler();
 8001f3a:	f000 fb19 	bl	8002570 <Error_Handler>
	  }
}
 8001f3e:	bf00      	nop
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	200005b0 	.word	0x200005b0

08001f4c <selectADC2>:

void selectADC2()
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
	 ADC_ChannelConfTypeDef sConfig = {0};
 8001f52:	463b      	mov	r3, r7
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
	 /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_2;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8001f62:	2301      	movs	r3, #1
 8001f64:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001f66:	2300      	movs	r3, #0
 8001f68:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f6a:	463b      	mov	r3, r7
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4806      	ldr	r0, [pc, #24]	; (8001f88 <selectADC2+0x3c>)
 8001f70:	f001 f9b0 	bl	80032d4 <HAL_ADC_ConfigChannel>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <selectADC2+0x32>
	  {
	    Error_Handler();
 8001f7a:	f000 faf9 	bl	8002570 <Error_Handler>
	  }
}
 8001f7e:	bf00      	nop
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	200005b0 	.word	0x200005b0

08001f8c <Set_Pin_Output>:

/*********************** SELECT PINS FOR DS18B20 & DHT ************************************/

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b088      	sub	sp, #32
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	460b      	mov	r3, r1
 8001f96:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f98:	f107 030c 	add.w	r3, r7, #12
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	605a      	str	r2, [r3, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	60da      	str	r2, [r3, #12]
 8001fa6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001fa8:	887b      	ldrh	r3, [r7, #2]
 8001faa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fac:	2301      	movs	r3, #1
 8001fae:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001fb4:	f107 030c 	add.w	r3, r7, #12
 8001fb8:	4619      	mov	r1, r3
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f001 fc9a 	bl	80038f4 <HAL_GPIO_Init>
}
 8001fc0:	bf00      	nop
 8001fc2:	3720      	adds	r7, #32
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b088      	sub	sp, #32
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd4:	f107 030c 	add.w	r3, r7, #12
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001fe4:	887b      	ldrh	r3, [r7, #2]
 8001fe6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fec:	2301      	movs	r3, #1
 8001fee:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001ff0:	f107 030c 	add.w	r3, r7, #12
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f001 fc7c 	bl	80038f4 <HAL_GPIO_Init>
}
 8001ffc:	bf00      	nop
 8001ffe:	3720      	adds	r7, #32
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 800200a:	f000 ff39 	bl	8002e80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800200e:	f000 f89b 	bl	8002148 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002012:	f000 fa17 	bl	8002444 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002016:	f000 f8ff 	bl	8002218 <MX_ADC1_Init>
  MX_I2C1_Init();
 800201a:	f000 f935 	bl	8002288 <MX_I2C1_Init>
  MX_SPI1_Init();
 800201e:	f000 f961 	bl	80022e4 <MX_SPI1_Init>
  MX_TIM1_Init();
 8002022:	f000 f995 	bl	8002350 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8002026:	f000 f9e3 	bl	80023f0 <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */
  lcd_Init(2);
 800202a:	2002      	movs	r0, #2
 800202c:	f7ff fcfc 	bl	8001a28 <lcd_Init>
  lcd_Clear();
 8002030:	f7ff fd7e 	bl	8001b30 <lcd_Clear>
  lcd_SetCursor(0,0);
 8002034:	2100      	movs	r1, #0
 8002036:	2000      	movs	r0, #0
 8002038:	f7ff fd90 	bl	8001b5c <lcd_SetCursor>
  lcd_PrintStr("LCD Initializing...");
 800203c:	482b      	ldr	r0, [pc, #172]	; (80020ec <main+0xe8>)
 800203e:	f7ff fe05 	bl	8001c4c <lcd_PrintStr>

  HAL_Delay(700);
 8002042:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8002046:	f000 ff5d 	bl	8002f04 <HAL_Delay>
//    bin_sem = xSemaphoreCreateBinary();
//    mutex = xSemaphoreCreateMutex();

	#define QueueLength 5				// 5 Tasks

   sensorQHandler = xQueueCreate(QueueLength, sizeof(Sensor));
 800204a:	2200      	movs	r2, #0
 800204c:	210c      	movs	r1, #12
 800204e:	2005      	movs	r0, #5
 8002050:	f004 fcb6 	bl	80069c0 <xQueueGenericCreate>
 8002054:	4603      	mov	r3, r0
 8002056:	4a26      	ldr	r2, [pc, #152]	; (80020f0 <main+0xec>)
 8002058:	6013      	str	r3, [r2, #0]

  /************************ CREATE TASKS ************************************************/

   xTaskCreate(soilMoist_Task,"soilMoist", 128, NULL, 7, &soilMoistTaskHandler);
 800205a:	4b26      	ldr	r3, [pc, #152]	; (80020f4 <main+0xf0>)
 800205c:	9301      	str	r3, [sp, #4]
 800205e:	2307      	movs	r3, #7
 8002060:	9300      	str	r3, [sp, #0]
 8002062:	2300      	movs	r3, #0
 8002064:	2280      	movs	r2, #128	; 0x80
 8002066:	4924      	ldr	r1, [pc, #144]	; (80020f8 <main+0xf4>)
 8002068:	4824      	ldr	r0, [pc, #144]	; (80020fc <main+0xf8>)
 800206a:	f005 f930 	bl	80072ce <xTaskCreate>
   xTaskCreate(soilTemp_Task,"soilTemp", 128, NULL, 6, &soilTempTaskHandler);
 800206e:	4b24      	ldr	r3, [pc, #144]	; (8002100 <main+0xfc>)
 8002070:	9301      	str	r3, [sp, #4]
 8002072:	2306      	movs	r3, #6
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	2300      	movs	r3, #0
 8002078:	2280      	movs	r2, #128	; 0x80
 800207a:	4922      	ldr	r1, [pc, #136]	; (8002104 <main+0x100>)
 800207c:	4822      	ldr	r0, [pc, #136]	; (8002108 <main+0x104>)
 800207e:	f005 f926 	bl	80072ce <xTaskCreate>
   xTaskCreate(humidity_Task,"humidity", 128, NULL, 5, &humidityTaskHandler);
 8002082:	4b22      	ldr	r3, [pc, #136]	; (800210c <main+0x108>)
 8002084:	9301      	str	r3, [sp, #4]
 8002086:	2305      	movs	r3, #5
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	2300      	movs	r3, #0
 800208c:	2280      	movs	r2, #128	; 0x80
 800208e:	4920      	ldr	r1, [pc, #128]	; (8002110 <main+0x10c>)
 8002090:	4820      	ldr	r0, [pc, #128]	; (8002114 <main+0x110>)
 8002092:	f005 f91c 	bl	80072ce <xTaskCreate>
   xTaskCreate(airTemp_Task,"airTemp", 128, NULL, 4, &airTempTaskHandler);
 8002096:	4b20      	ldr	r3, [pc, #128]	; (8002118 <main+0x114>)
 8002098:	9301      	str	r3, [sp, #4]
 800209a:	2304      	movs	r3, #4
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	2300      	movs	r3, #0
 80020a0:	2280      	movs	r2, #128	; 0x80
 80020a2:	491e      	ldr	r1, [pc, #120]	; (800211c <main+0x118>)
 80020a4:	481e      	ldr	r0, [pc, #120]	; (8002120 <main+0x11c>)
 80020a6:	f005 f912 	bl	80072ce <xTaskCreate>
   xTaskCreate(battery_Task,"battery", 128, NULL, 3, &batteryTaskHandler);
 80020aa:	4b1e      	ldr	r3, [pc, #120]	; (8002124 <main+0x120>)
 80020ac:	9301      	str	r3, [sp, #4]
 80020ae:	2303      	movs	r3, #3
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	2300      	movs	r3, #0
 80020b4:	2280      	movs	r2, #128	; 0x80
 80020b6:	491c      	ldr	r1, [pc, #112]	; (8002128 <main+0x124>)
 80020b8:	481c      	ldr	r0, [pc, #112]	; (800212c <main+0x128>)
 80020ba:	f005 f908 	bl	80072ce <xTaskCreate>

   xTaskCreate(lora_Task,"LORA", 128, NULL, 2, &loraTaskHandler);
 80020be:	4b1c      	ldr	r3, [pc, #112]	; (8002130 <main+0x12c>)
 80020c0:	9301      	str	r3, [sp, #4]
 80020c2:	2302      	movs	r3, #2
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	2300      	movs	r3, #0
 80020c8:	2280      	movs	r2, #128	; 0x80
 80020ca:	491a      	ldr	r1, [pc, #104]	; (8002134 <main+0x130>)
 80020cc:	481a      	ldr	r0, [pc, #104]	; (8002138 <main+0x134>)
 80020ce:	f005 f8fe 	bl	80072ce <xTaskCreate>
   xTaskCreate(lcd_Task,"LCD", 128, NULL, 1, &lcdTaskHandler);
 80020d2:	4b1a      	ldr	r3, [pc, #104]	; (800213c <main+0x138>)
 80020d4:	9301      	str	r3, [sp, #4]
 80020d6:	2301      	movs	r3, #1
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	2300      	movs	r3, #0
 80020dc:	2280      	movs	r2, #128	; 0x80
 80020de:	4918      	ldr	r1, [pc, #96]	; (8002140 <main+0x13c>)
 80020e0:	4818      	ldr	r0, [pc, #96]	; (8002144 <main+0x140>)
 80020e2:	f005 f8f4 	bl	80072ce <xTaskCreate>

   vTaskStartScheduler();
 80020e6:	f005 fb03 	bl	80076f0 <vTaskStartScheduler>


   /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80020ea:	e7fe      	b.n	80020ea <main+0xe6>
 80020ec:	0800d3d8 	.word	0x0800d3d8
 80020f0:	20000730 	.word	0x20000730
 80020f4:	2000073c 	.word	0x2000073c
 80020f8:	0800d3ec 	.word	0x0800d3ec
 80020fc:	0800257d 	.word	0x0800257d
 8002100:	20000740 	.word	0x20000740
 8002104:	0800d3f8 	.word	0x0800d3f8
 8002108:	08002799 	.word	0x08002799
 800210c:	20000744 	.word	0x20000744
 8002110:	0800d404 	.word	0x0800d404
 8002114:	08001585 	.word	0x08001585
 8002118:	20000748 	.word	0x20000748
 800211c:	0800d410 	.word	0x0800d410
 8002120:	08001775 	.word	0x08001775
 8002124:	2000074c 	.word	0x2000074c
 8002128:	0800d418 	.word	0x0800d418
 800212c:	08001851 	.word	0x08001851
 8002130:	20000734 	.word	0x20000734
 8002134:	0800d420 	.word	0x0800d420
 8002138:	08001e2d 	.word	0x08001e2d
 800213c:	20000738 	.word	0x20000738
 8002140:	0800d428 	.word	0x0800d428
 8002144:	08001935 	.word	0x08001935

08002148 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b094      	sub	sp, #80	; 0x50
 800214c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800214e:	f107 0320 	add.w	r3, r7, #32
 8002152:	2230      	movs	r2, #48	; 0x30
 8002154:	2100      	movs	r1, #0
 8002156:	4618      	mov	r0, r3
 8002158:	f006 fd11 	bl	8008b7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800215c:	f107 030c 	add.w	r3, r7, #12
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	60da      	str	r2, [r3, #12]
 800216a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800216c:	2300      	movs	r3, #0
 800216e:	60bb      	str	r3, [r7, #8]
 8002170:	4b27      	ldr	r3, [pc, #156]	; (8002210 <SystemClock_Config+0xc8>)
 8002172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002174:	4a26      	ldr	r2, [pc, #152]	; (8002210 <SystemClock_Config+0xc8>)
 8002176:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800217a:	6413      	str	r3, [r2, #64]	; 0x40
 800217c:	4b24      	ldr	r3, [pc, #144]	; (8002210 <SystemClock_Config+0xc8>)
 800217e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002184:	60bb      	str	r3, [r7, #8]
 8002186:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002188:	2300      	movs	r3, #0
 800218a:	607b      	str	r3, [r7, #4]
 800218c:	4b21      	ldr	r3, [pc, #132]	; (8002214 <SystemClock_Config+0xcc>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a20      	ldr	r2, [pc, #128]	; (8002214 <SystemClock_Config+0xcc>)
 8002192:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002196:	6013      	str	r3, [r2, #0]
 8002198:	4b1e      	ldr	r3, [pc, #120]	; (8002214 <SystemClock_Config+0xcc>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021a0:	607b      	str	r3, [r7, #4]
 80021a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021a4:	2302      	movs	r3, #2
 80021a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021a8:	2301      	movs	r3, #1
 80021aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021ac:	2310      	movs	r3, #16
 80021ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021b0:	2302      	movs	r3, #2
 80021b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021b4:	2300      	movs	r3, #0
 80021b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80021b8:	2308      	movs	r3, #8
 80021ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80021bc:	2332      	movs	r3, #50	; 0x32
 80021be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021c0:	2302      	movs	r3, #2
 80021c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80021c4:	2304      	movs	r3, #4
 80021c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021c8:	f107 0320 	add.w	r3, r7, #32
 80021cc:	4618      	mov	r0, r3
 80021ce:	f002 f993 	bl	80044f8 <HAL_RCC_OscConfig>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80021d8:	f000 f9ca 	bl	8002570 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021dc:	230f      	movs	r3, #15
 80021de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021e0:	2302      	movs	r3, #2
 80021e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80021e8:	2300      	movs	r3, #0
 80021ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021ec:	2300      	movs	r3, #0
 80021ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80021f0:	f107 030c 	add.w	r3, r7, #12
 80021f4:	2101      	movs	r1, #1
 80021f6:	4618      	mov	r0, r3
 80021f8:	f002 fbf6 	bl	80049e8 <HAL_RCC_ClockConfig>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8002202:	f000 f9b5 	bl	8002570 <Error_Handler>
  }
}
 8002206:	bf00      	nop
 8002208:	3750      	adds	r7, #80	; 0x50
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40023800 	.word	0x40023800
 8002214:	40007000 	.word	0x40007000

08002218 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800221c:	4b17      	ldr	r3, [pc, #92]	; (800227c <MX_ADC1_Init+0x64>)
 800221e:	4a18      	ldr	r2, [pc, #96]	; (8002280 <MX_ADC1_Init+0x68>)
 8002220:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002222:	4b16      	ldr	r3, [pc, #88]	; (800227c <MX_ADC1_Init+0x64>)
 8002224:	2200      	movs	r2, #0
 8002226:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002228:	4b14      	ldr	r3, [pc, #80]	; (800227c <MX_ADC1_Init+0x64>)
 800222a:	2200      	movs	r2, #0
 800222c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800222e:	4b13      	ldr	r3, [pc, #76]	; (800227c <MX_ADC1_Init+0x64>)
 8002230:	2204      	movs	r2, #4
 8002232:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002234:	4b11      	ldr	r3, [pc, #68]	; (800227c <MX_ADC1_Init+0x64>)
 8002236:	2200      	movs	r2, #0
 8002238:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800223a:	4b10      	ldr	r3, [pc, #64]	; (800227c <MX_ADC1_Init+0x64>)
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002242:	4b0e      	ldr	r3, [pc, #56]	; (800227c <MX_ADC1_Init+0x64>)
 8002244:	2200      	movs	r2, #0
 8002246:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002248:	4b0c      	ldr	r3, [pc, #48]	; (800227c <MX_ADC1_Init+0x64>)
 800224a:	4a0e      	ldr	r2, [pc, #56]	; (8002284 <MX_ADC1_Init+0x6c>)
 800224c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800224e:	4b0b      	ldr	r3, [pc, #44]	; (800227c <MX_ADC1_Init+0x64>)
 8002250:	2200      	movs	r2, #0
 8002252:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002254:	4b09      	ldr	r3, [pc, #36]	; (800227c <MX_ADC1_Init+0x64>)
 8002256:	2201      	movs	r2, #1
 8002258:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800225a:	4b08      	ldr	r3, [pc, #32]	; (800227c <MX_ADC1_Init+0x64>)
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002262:	4b06      	ldr	r3, [pc, #24]	; (800227c <MX_ADC1_Init+0x64>)
 8002264:	2201      	movs	r2, #1
 8002266:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002268:	4804      	ldr	r0, [pc, #16]	; (800227c <MX_ADC1_Init+0x64>)
 800226a:	f000 fe6f 	bl	8002f4c <HAL_ADC_Init>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <MX_ADC1_Init+0x60>
  {
    Error_Handler();
 8002274:	f000 f97c 	bl	8002570 <Error_Handler>

  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002278:	bf00      	nop
 800227a:	bd80      	pop	{r7, pc}
 800227c:	200005b0 	.word	0x200005b0
 8002280:	40012000 	.word	0x40012000
 8002284:	0f000001 	.word	0x0f000001

08002288 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800228c:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <MX_I2C1_Init+0x50>)
 800228e:	4a13      	ldr	r2, [pc, #76]	; (80022dc <MX_I2C1_Init+0x54>)
 8002290:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002292:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <MX_I2C1_Init+0x50>)
 8002294:	4a12      	ldr	r2, [pc, #72]	; (80022e0 <MX_I2C1_Init+0x58>)
 8002296:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002298:	4b0f      	ldr	r3, [pc, #60]	; (80022d8 <MX_I2C1_Init+0x50>)
 800229a:	2200      	movs	r2, #0
 800229c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800229e:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <MX_I2C1_Init+0x50>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022a4:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <MX_I2C1_Init+0x50>)
 80022a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022ac:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <MX_I2C1_Init+0x50>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80022b2:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <MX_I2C1_Init+0x50>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022b8:	4b07      	ldr	r3, [pc, #28]	; (80022d8 <MX_I2C1_Init+0x50>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022be:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <MX_I2C1_Init+0x50>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022c4:	4804      	ldr	r0, [pc, #16]	; (80022d8 <MX_I2C1_Init+0x50>)
 80022c6:	f001 fccb 	bl	8003c60 <HAL_I2C_Init>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80022d0:	f000 f94e 	bl	8002570 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80022d4:	bf00      	nop
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	200005f8 	.word	0x200005f8
 80022dc:	40005400 	.word	0x40005400
 80022e0:	000186a0 	.word	0x000186a0

080022e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80022e8:	4b17      	ldr	r3, [pc, #92]	; (8002348 <MX_SPI1_Init+0x64>)
 80022ea:	4a18      	ldr	r2, [pc, #96]	; (800234c <MX_SPI1_Init+0x68>)
 80022ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80022ee:	4b16      	ldr	r3, [pc, #88]	; (8002348 <MX_SPI1_Init+0x64>)
 80022f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80022f6:	4b14      	ldr	r3, [pc, #80]	; (8002348 <MX_SPI1_Init+0x64>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80022fc:	4b12      	ldr	r3, [pc, #72]	; (8002348 <MX_SPI1_Init+0x64>)
 80022fe:	2200      	movs	r2, #0
 8002300:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002302:	4b11      	ldr	r3, [pc, #68]	; (8002348 <MX_SPI1_Init+0x64>)
 8002304:	2200      	movs	r2, #0
 8002306:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002308:	4b0f      	ldr	r3, [pc, #60]	; (8002348 <MX_SPI1_Init+0x64>)
 800230a:	2200      	movs	r2, #0
 800230c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800230e:	4b0e      	ldr	r3, [pc, #56]	; (8002348 <MX_SPI1_Init+0x64>)
 8002310:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002314:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002316:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <MX_SPI1_Init+0x64>)
 8002318:	2210      	movs	r2, #16
 800231a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800231c:	4b0a      	ldr	r3, [pc, #40]	; (8002348 <MX_SPI1_Init+0x64>)
 800231e:	2200      	movs	r2, #0
 8002320:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002322:	4b09      	ldr	r3, [pc, #36]	; (8002348 <MX_SPI1_Init+0x64>)
 8002324:	2200      	movs	r2, #0
 8002326:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002328:	4b07      	ldr	r3, [pc, #28]	; (8002348 <MX_SPI1_Init+0x64>)
 800232a:	2200      	movs	r2, #0
 800232c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800232e:	4b06      	ldr	r3, [pc, #24]	; (8002348 <MX_SPI1_Init+0x64>)
 8002330:	220a      	movs	r2, #10
 8002332:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002334:	4804      	ldr	r0, [pc, #16]	; (8002348 <MX_SPI1_Init+0x64>)
 8002336:	f002 fd69 	bl	8004e0c <HAL_SPI_Init>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002340:	f000 f916 	bl	8002570 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002344:	bf00      	nop
 8002346:	bd80      	pop	{r7, pc}
 8002348:	2000064c 	.word	0x2000064c
 800234c:	40013000 	.word	0x40013000

08002350 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002356:	f107 0308 	add.w	r3, r7, #8
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	605a      	str	r2, [r3, #4]
 8002360:	609a      	str	r2, [r3, #8]
 8002362:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002364:	463b      	mov	r3, r7
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800236c:	4b1e      	ldr	r3, [pc, #120]	; (80023e8 <MX_TIM1_Init+0x98>)
 800236e:	4a1f      	ldr	r2, [pc, #124]	; (80023ec <MX_TIM1_Init+0x9c>)
 8002370:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 8002372:	4b1d      	ldr	r3, [pc, #116]	; (80023e8 <MX_TIM1_Init+0x98>)
 8002374:	2231      	movs	r2, #49	; 0x31
 8002376:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002378:	4b1b      	ldr	r3, [pc, #108]	; (80023e8 <MX_TIM1_Init+0x98>)
 800237a:	2200      	movs	r2, #0
 800237c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800237e:	4b1a      	ldr	r3, [pc, #104]	; (80023e8 <MX_TIM1_Init+0x98>)
 8002380:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002384:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002386:	4b18      	ldr	r3, [pc, #96]	; (80023e8 <MX_TIM1_Init+0x98>)
 8002388:	2200      	movs	r2, #0
 800238a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800238c:	4b16      	ldr	r3, [pc, #88]	; (80023e8 <MX_TIM1_Init+0x98>)
 800238e:	2200      	movs	r2, #0
 8002390:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002392:	4b15      	ldr	r3, [pc, #84]	; (80023e8 <MX_TIM1_Init+0x98>)
 8002394:	2200      	movs	r2, #0
 8002396:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002398:	4813      	ldr	r0, [pc, #76]	; (80023e8 <MX_TIM1_Init+0x98>)
 800239a:	f003 faed 	bl	8005978 <HAL_TIM_Base_Init>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80023a4:	f000 f8e4 	bl	8002570 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80023ae:	f107 0308 	add.w	r3, r7, #8
 80023b2:	4619      	mov	r1, r3
 80023b4:	480c      	ldr	r0, [pc, #48]	; (80023e8 <MX_TIM1_Init+0x98>)
 80023b6:	f003 fc99 	bl	8005cec <HAL_TIM_ConfigClockSource>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80023c0:	f000 f8d6 	bl	8002570 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023c4:	2300      	movs	r3, #0
 80023c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023c8:	2300      	movs	r3, #0
 80023ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80023cc:	463b      	mov	r3, r7
 80023ce:	4619      	mov	r1, r3
 80023d0:	4805      	ldr	r0, [pc, #20]	; (80023e8 <MX_TIM1_Init+0x98>)
 80023d2:	f003 fe95 	bl	8006100 <HAL_TIMEx_MasterConfigSynchronization>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80023dc:	f000 f8c8 	bl	8002570 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80023e0:	bf00      	nop
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	200006a4 	.word	0x200006a4
 80023ec:	40010000 	.word	0x40010000

080023f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023f4:	4b11      	ldr	r3, [pc, #68]	; (800243c <MX_USART1_UART_Init+0x4c>)
 80023f6:	4a12      	ldr	r2, [pc, #72]	; (8002440 <MX_USART1_UART_Init+0x50>)
 80023f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80023fa:	4b10      	ldr	r3, [pc, #64]	; (800243c <MX_USART1_UART_Init+0x4c>)
 80023fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002400:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002402:	4b0e      	ldr	r3, [pc, #56]	; (800243c <MX_USART1_UART_Init+0x4c>)
 8002404:	2200      	movs	r2, #0
 8002406:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002408:	4b0c      	ldr	r3, [pc, #48]	; (800243c <MX_USART1_UART_Init+0x4c>)
 800240a:	2200      	movs	r2, #0
 800240c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800240e:	4b0b      	ldr	r3, [pc, #44]	; (800243c <MX_USART1_UART_Init+0x4c>)
 8002410:	2200      	movs	r2, #0
 8002412:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002414:	4b09      	ldr	r3, [pc, #36]	; (800243c <MX_USART1_UART_Init+0x4c>)
 8002416:	220c      	movs	r2, #12
 8002418:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800241a:	4b08      	ldr	r3, [pc, #32]	; (800243c <MX_USART1_UART_Init+0x4c>)
 800241c:	2200      	movs	r2, #0
 800241e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002420:	4b06      	ldr	r3, [pc, #24]	; (800243c <MX_USART1_UART_Init+0x4c>)
 8002422:	2200      	movs	r2, #0
 8002424:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002426:	4805      	ldr	r0, [pc, #20]	; (800243c <MX_USART1_UART_Init+0x4c>)
 8002428:	f003 feec 	bl	8006204 <HAL_UART_Init>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002432:	f000 f89d 	bl	8002570 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	200006ec 	.word	0x200006ec
 8002440:	40011000 	.word	0x40011000

08002444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08a      	sub	sp, #40	; 0x28
 8002448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800244a:	f107 0314 	add.w	r3, r7, #20
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	605a      	str	r2, [r3, #4]
 8002454:	609a      	str	r2, [r3, #8]
 8002456:	60da      	str	r2, [r3, #12]
 8002458:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	4b38      	ldr	r3, [pc, #224]	; (8002540 <MX_GPIO_Init+0xfc>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	4a37      	ldr	r2, [pc, #220]	; (8002540 <MX_GPIO_Init+0xfc>)
 8002464:	f043 0304 	orr.w	r3, r3, #4
 8002468:	6313      	str	r3, [r2, #48]	; 0x30
 800246a:	4b35      	ldr	r3, [pc, #212]	; (8002540 <MX_GPIO_Init+0xfc>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	f003 0304 	and.w	r3, r3, #4
 8002472:	613b      	str	r3, [r7, #16]
 8002474:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	4b31      	ldr	r3, [pc, #196]	; (8002540 <MX_GPIO_Init+0xfc>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	4a30      	ldr	r2, [pc, #192]	; (8002540 <MX_GPIO_Init+0xfc>)
 8002480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002484:	6313      	str	r3, [r2, #48]	; 0x30
 8002486:	4b2e      	ldr	r3, [pc, #184]	; (8002540 <MX_GPIO_Init+0xfc>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	60bb      	str	r3, [r7, #8]
 8002496:	4b2a      	ldr	r3, [pc, #168]	; (8002540 <MX_GPIO_Init+0xfc>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	4a29      	ldr	r2, [pc, #164]	; (8002540 <MX_GPIO_Init+0xfc>)
 800249c:	f043 0301 	orr.w	r3, r3, #1
 80024a0:	6313      	str	r3, [r2, #48]	; 0x30
 80024a2:	4b27      	ldr	r3, [pc, #156]	; (8002540 <MX_GPIO_Init+0xfc>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	60bb      	str	r3, [r7, #8]
 80024ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ae:	2300      	movs	r3, #0
 80024b0:	607b      	str	r3, [r7, #4]
 80024b2:	4b23      	ldr	r3, [pc, #140]	; (8002540 <MX_GPIO_Init+0xfc>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	4a22      	ldr	r2, [pc, #136]	; (8002540 <MX_GPIO_Init+0xfc>)
 80024b8:	f043 0302 	orr.w	r3, r3, #2
 80024bc:	6313      	str	r3, [r2, #48]	; 0x30
 80024be:	4b20      	ldr	r3, [pc, #128]	; (8002540 <MX_GPIO_Init+0xfc>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	607b      	str	r3, [r7, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Solenoid_Pin|soilTemp_Pin|airTemp_Pin|DHT11_Pin, GPIO_PIN_RESET);
 80024ca:	2200      	movs	r2, #0
 80024cc:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
 80024d0:	481c      	ldr	r0, [pc, #112]	; (8002544 <MX_GPIO_Init+0x100>)
 80024d2:	f001 fbab 	bl	8003c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Pin|RST_Pin, GPIO_PIN_SET);
 80024d6:	2201      	movs	r2, #1
 80024d8:	21c0      	movs	r1, #192	; 0xc0
 80024da:	481b      	ldr	r0, [pc, #108]	; (8002548 <MX_GPIO_Init+0x104>)
 80024dc:	f001 fba6 	bl	8003c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Solenoid_Pin soilTemp_Pin airTemp_Pin DHT11_Pin */
  GPIO_InitStruct.Pin = Solenoid_Pin|soilTemp_Pin|airTemp_Pin|DHT11_Pin;
 80024e0:	f44f 5313 	mov.w	r3, #9408	; 0x24c0
 80024e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024e6:	2301      	movs	r3, #1
 80024e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ea:	2300      	movs	r3, #0
 80024ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ee:	2300      	movs	r3, #0
 80024f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024f2:	f107 0314 	add.w	r3, r7, #20
 80024f6:	4619      	mov	r1, r3
 80024f8:	4812      	ldr	r0, [pc, #72]	; (8002544 <MX_GPIO_Init+0x100>)
 80024fa:	f001 f9fb 	bl	80038f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 80024fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002502:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002504:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002508:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250a:	2300      	movs	r3, #0
 800250c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 800250e:	f107 0314 	add.w	r3, r7, #20
 8002512:	4619      	mov	r1, r3
 8002514:	480b      	ldr	r0, [pc, #44]	; (8002544 <MX_GPIO_Init+0x100>)
 8002516:	f001 f9ed 	bl	80038f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NSS_Pin RST_Pin */
  GPIO_InitStruct.Pin = NSS_Pin|RST_Pin;
 800251a:	23c0      	movs	r3, #192	; 0xc0
 800251c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800251e:	2301      	movs	r3, #1
 8002520:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002522:	2300      	movs	r3, #0
 8002524:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002526:	2300      	movs	r3, #0
 8002528:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800252a:	f107 0314 	add.w	r3, r7, #20
 800252e:	4619      	mov	r1, r3
 8002530:	4805      	ldr	r0, [pc, #20]	; (8002548 <MX_GPIO_Init+0x104>)
 8002532:	f001 f9df 	bl	80038f4 <HAL_GPIO_Init>

}
 8002536:	bf00      	nop
 8002538:	3728      	adds	r7, #40	; 0x28
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40023800 	.word	0x40023800
 8002544:	40020800 	.word	0x40020800
 8002548:	40020400 	.word	0x40020400

0800254c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a04      	ldr	r2, [pc, #16]	; (800256c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d101      	bne.n	8002562 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800255e:	f000 fcb1 	bl	8002ec4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002562:	bf00      	nop
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40000c00 	.word	0x40000c00

08002570 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002574:	b672      	cpsid	i
}
 8002576:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002578:	e7fe      	b.n	8002578 <Error_Handler+0x8>
	...

0800257c <soilMoist_Task>:

Sensor sMoist;
/****************** TASK DEFINITIONS *********************************/

void soilMoist_Task (void *arg)					// Check Soil Moisture
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
	//while(1)
	{
		selectADC1();
 8002584:	f7ff fcc2 	bl	8001f0c <selectADC1>

		HAL_ADC_Start(&hadc1);
 8002588:	4822      	ldr	r0, [pc, #136]	; (8002614 <soilMoist_Task+0x98>)
 800258a:	f000 fd23 	bl	8002fd4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY);			// Get Soil Moisture Sensor Reading
 800258e:	f04f 31ff 	mov.w	r1, #4294967295
 8002592:	4820      	ldr	r0, [pc, #128]	; (8002614 <soilMoist_Task+0x98>)
 8002594:	f000 fe05 	bl	80031a2 <HAL_ADC_PollForConversion>
		adcValue1 = HAL_ADC_GetValue(&hadc1);
 8002598:	481e      	ldr	r0, [pc, #120]	; (8002614 <soilMoist_Task+0x98>)
 800259a:	f000 fe8d 	bl	80032b8 <HAL_ADC_GetValue>
 800259e:	ee07 0a90 	vmov	s15, r0
 80025a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025a6:	4b1c      	ldr	r3, [pc, #112]	; (8002618 <soilMoist_Task+0x9c>)
 80025a8:	edc3 7a00 	vstr	s15, [r3]
		HAL_ADC_Stop(&hadc1);
 80025ac:	4819      	ldr	r0, [pc, #100]	; (8002614 <soilMoist_Task+0x98>)
 80025ae:	f000 fdc5 	bl	800313c <HAL_ADC_Stop>

		moisture = 100-(adcValue1/2783)*100;				// Max Value of Sensor without water = 2783
 80025b2:	4b19      	ldr	r3, [pc, #100]	; (8002618 <soilMoist_Task+0x9c>)
 80025b4:	ed93 7a00 	vldr	s14, [r3]
 80025b8:	eddf 6a18 	vldr	s13, [pc, #96]	; 800261c <soilMoist_Task+0xa0>
 80025bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025c0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002620 <soilMoist_Task+0xa4>
 80025c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025c8:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002620 <soilMoist_Task+0xa4>
 80025cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025d4:	ee17 2a90 	vmov	r2, s15
 80025d8:	4b12      	ldr	r3, [pc, #72]	; (8002624 <soilMoist_Task+0xa8>)
 80025da:	601a      	str	r2, [r3, #0]

		sMoist.id = '1';
 80025dc:	4b12      	ldr	r3, [pc, #72]	; (8002628 <soilMoist_Task+0xac>)
 80025de:	2231      	movs	r2, #49	; 0x31
 80025e0:	701a      	strb	r2, [r3, #0]
		sMoist.data = moisture;				// As Voltage is inversely proportional to Capacitance Hence Value subtracted from 100.
 80025e2:	4b10      	ldr	r3, [pc, #64]	; (8002624 <soilMoist_Task+0xa8>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a10      	ldr	r2, [pc, #64]	; (8002628 <soilMoist_Task+0xac>)
 80025e8:	6053      	str	r3, [r2, #4]
		sMoist.sep ='|';
 80025ea:	4b0f      	ldr	r3, [pc, #60]	; (8002628 <soilMoist_Task+0xac>)
 80025ec:	227c      	movs	r2, #124	; 0x7c
 80025ee:	721a      	strb	r2, [r3, #8]

		/***** send to the queue ****/
		xQueueSend(sensorQHandler, &sMoist, 100);
 80025f0:	4b0e      	ldr	r3, [pc, #56]	; (800262c <soilMoist_Task+0xb0>)
 80025f2:	6818      	ldr	r0, [r3, #0]
 80025f4:	2300      	movs	r3, #0
 80025f6:	2264      	movs	r2, #100	; 0x64
 80025f8:	490b      	ldr	r1, [pc, #44]	; (8002628 <soilMoist_Task+0xac>)
 80025fa:	f004 fa3b 	bl	8006a74 <xQueueGenericSend>

		vTaskDelay(pdMS_TO_TICKS(1000));
 80025fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002602:	f005 f841 	bl	8007688 <vTaskDelay>
	}
	vTaskDelete(NULL);
 8002606:	2000      	movs	r0, #0
 8002608:	f004 ffae 	bl	8007568 <vTaskDelete>
}
 800260c:	bf00      	nop
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	200005b0 	.word	0x200005b0
 8002618:	20000754 	.word	0x20000754
 800261c:	452df000 	.word	0x452df000
 8002620:	42c80000 	.word	0x42c80000
 8002624:	20000750 	.word	0x20000750
 8002628:	20000758 	.word	0x20000758
 800262c:	20000730 	.word	0x20000730

08002630 <DS18B20_Start1>:

float soilTemp = 0;
uint8_t soil_byte1, soil_byte2;
/*********************************** DS18B20 FUNCTIONS ****************************************/
uint8_t DS18B20_Start1 (void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8002636:	2300      	movs	r3, #0
 8002638:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(soilTemp_PORT, soilTemp_PIN);   // set the pin as output
 800263a:	2140      	movs	r1, #64	; 0x40
 800263c:	4813      	ldr	r0, [pc, #76]	; (800268c <DS18B20_Start1+0x5c>)
 800263e:	f7ff fca5 	bl	8001f8c <Set_Pin_Output>
	HAL_GPIO_WritePin (soilTemp_PORT, soilTemp_PIN, 0);  // pull the pin low
 8002642:	2200      	movs	r2, #0
 8002644:	2140      	movs	r1, #64	; 0x40
 8002646:	4811      	ldr	r0, [pc, #68]	; (800268c <DS18B20_Start1+0x5c>)
 8002648:	f001 faf0 	bl	8003c2c <HAL_GPIO_WritePin>
	DelayUS(480);   // delay according to datasheet
 800264c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8002650:	f7ff fbc4 	bl	8001ddc <DelayUS>

	Set_Pin_Input(soilTemp_PORT, soilTemp_PIN);    // set the pin as input
 8002654:	2140      	movs	r1, #64	; 0x40
 8002656:	480d      	ldr	r0, [pc, #52]	; (800268c <DS18B20_Start1+0x5c>)
 8002658:	f7ff fcb6 	bl	8001fc8 <Set_Pin_Input>
	DelayUS (80);    // delay according to datasheet
 800265c:	2050      	movs	r0, #80	; 0x50
 800265e:	f7ff fbbd 	bl	8001ddc <DelayUS>

	if (!(HAL_GPIO_ReadPin (soilTemp_PORT, soilTemp_PIN)))
 8002662:	2140      	movs	r1, #64	; 0x40
 8002664:	4809      	ldr	r0, [pc, #36]	; (800268c <DS18B20_Start1+0x5c>)
 8002666:	f001 fac9 	bl	8003bfc <HAL_GPIO_ReadPin>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d102      	bne.n	8002676 <DS18B20_Start1+0x46>
		Response = 1;    // if the pin is low i.e the presence pulse is detected
 8002670:	2301      	movs	r3, #1
 8002672:	71fb      	strb	r3, [r7, #7]
 8002674:	e001      	b.n	800267a <DS18B20_Start1+0x4a>
	else Response = -1;
 8002676:	23ff      	movs	r3, #255	; 0xff
 8002678:	71fb      	strb	r3, [r7, #7]

	DelayUS(400); // 480 us delay totally.
 800267a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800267e:	f7ff fbad 	bl	8001ddc <DelayUS>

	return Response;
 8002682:	79fb      	ldrb	r3, [r7, #7]
}
 8002684:	4618      	mov	r0, r3
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40020800 	.word	0x40020800

08002690 <DS18B20_Write1>:

void DS18B20_Write1 (uint8_t data)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(soilTemp_PORT, soilTemp_PIN);  // set as output
 800269a:	2140      	movs	r1, #64	; 0x40
 800269c:	481e      	ldr	r0, [pc, #120]	; (8002718 <DS18B20_Write1+0x88>)
 800269e:	f7ff fc75 	bl	8001f8c <Set_Pin_Output>

	for (int i=0; i<8; i++)
 80026a2:	2300      	movs	r3, #0
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	e02e      	b.n	8002706 <DS18B20_Write1+0x76>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 80026a8:	79fa      	ldrb	r2, [r7, #7]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	fa42 f303 	asr.w	r3, r2, r3
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d013      	beq.n	80026e0 <DS18B20_Write1+0x50>
		{
			// write 1
			Set_Pin_Output(soilTemp_PORT, soilTemp_PIN);  // set as output
 80026b8:	2140      	movs	r1, #64	; 0x40
 80026ba:	4817      	ldr	r0, [pc, #92]	; (8002718 <DS18B20_Write1+0x88>)
 80026bc:	f7ff fc66 	bl	8001f8c <Set_Pin_Output>
			HAL_GPIO_WritePin (soilTemp_PORT, soilTemp_PIN, 0);  // pull the pin LOW
 80026c0:	2200      	movs	r2, #0
 80026c2:	2140      	movs	r1, #64	; 0x40
 80026c4:	4814      	ldr	r0, [pc, #80]	; (8002718 <DS18B20_Write1+0x88>)
 80026c6:	f001 fab1 	bl	8003c2c <HAL_GPIO_WritePin>
			DelayUS(1);  // wait for 1 us
 80026ca:	2001      	movs	r0, #1
 80026cc:	f7ff fb86 	bl	8001ddc <DelayUS>

			Set_Pin_Input(soilTemp_PORT, soilTemp_PIN);  // set as input
 80026d0:	2140      	movs	r1, #64	; 0x40
 80026d2:	4811      	ldr	r0, [pc, #68]	; (8002718 <DS18B20_Write1+0x88>)
 80026d4:	f7ff fc78 	bl	8001fc8 <Set_Pin_Input>
			DelayUS(50);  // wait for 60 us
 80026d8:	2032      	movs	r0, #50	; 0x32
 80026da:	f7ff fb7f 	bl	8001ddc <DelayUS>
 80026de:	e00f      	b.n	8002700 <DS18B20_Write1+0x70>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(soilTemp_PORT, soilTemp_PIN);
 80026e0:	2140      	movs	r1, #64	; 0x40
 80026e2:	480d      	ldr	r0, [pc, #52]	; (8002718 <DS18B20_Write1+0x88>)
 80026e4:	f7ff fc52 	bl	8001f8c <Set_Pin_Output>
			HAL_GPIO_WritePin (soilTemp_PORT, soilTemp_PIN, 0);  // pull the pin LOW
 80026e8:	2200      	movs	r2, #0
 80026ea:	2140      	movs	r1, #64	; 0x40
 80026ec:	480a      	ldr	r0, [pc, #40]	; (8002718 <DS18B20_Write1+0x88>)
 80026ee:	f001 fa9d 	bl	8003c2c <HAL_GPIO_WritePin>
			//delay (50);  // wait for 60 us
			DelayUS(50);
 80026f2:	2032      	movs	r0, #50	; 0x32
 80026f4:	f7ff fb72 	bl	8001ddc <DelayUS>
			Set_Pin_Input(soilTemp_PORT, soilTemp_PIN);
 80026f8:	2140      	movs	r1, #64	; 0x40
 80026fa:	4807      	ldr	r0, [pc, #28]	; (8002718 <DS18B20_Write1+0x88>)
 80026fc:	f7ff fc64 	bl	8001fc8 <Set_Pin_Input>
	for (int i=0; i<8; i++)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	3301      	adds	r3, #1
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2b07      	cmp	r3, #7
 800270a:	ddcd      	ble.n	80026a8 <DS18B20_Write1+0x18>
		}
	}
}
 800270c:	bf00      	nop
 800270e:	bf00      	nop
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40020800 	.word	0x40020800

0800271c <DS18B20_Read1>:

uint8_t DS18B20_Read1 (void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
	uint8_t value=0;
 8002722:	2300      	movs	r3, #0
 8002724:	71fb      	strb	r3, [r7, #7]

	Set_Pin_Input(soilTemp_PORT, soilTemp_PIN);
 8002726:	2140      	movs	r1, #64	; 0x40
 8002728:	481a      	ldr	r0, [pc, #104]	; (8002794 <DS18B20_Read1+0x78>)
 800272a:	f7ff fc4d 	bl	8001fc8 <Set_Pin_Input>

	for (int i=0;i<8;i++)
 800272e:	2300      	movs	r3, #0
 8002730:	603b      	str	r3, [r7, #0]
 8002732:	e026      	b.n	8002782 <DS18B20_Read1+0x66>
	{
		Set_Pin_Output(soilTemp_PORT, soilTemp_PIN);   // set as output
 8002734:	2140      	movs	r1, #64	; 0x40
 8002736:	4817      	ldr	r0, [pc, #92]	; (8002794 <DS18B20_Read1+0x78>)
 8002738:	f7ff fc28 	bl	8001f8c <Set_Pin_Output>

		HAL_GPIO_WritePin (soilTemp_PORT, soilTemp_PIN, 0);  // pull the data pin LOW
 800273c:	2200      	movs	r2, #0
 800273e:	2140      	movs	r1, #64	; 0x40
 8002740:	4814      	ldr	r0, [pc, #80]	; (8002794 <DS18B20_Read1+0x78>)
 8002742:	f001 fa73 	bl	8003c2c <HAL_GPIO_WritePin>
		DelayUS(1);
 8002746:	2001      	movs	r0, #1
 8002748:	f7ff fb48 	bl	8001ddc <DelayUS>
		//delay (1);  // wait for > 1us

		Set_Pin_Input(soilTemp_PORT, soilTemp_PIN);  // set as input
 800274c:	2140      	movs	r1, #64	; 0x40
 800274e:	4811      	ldr	r0, [pc, #68]	; (8002794 <DS18B20_Read1+0x78>)
 8002750:	f7ff fc3a 	bl	8001fc8 <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (soilTemp_PORT, soilTemp_PIN))  // if the pin is HIGH
 8002754:	2140      	movs	r1, #64	; 0x40
 8002756:	480f      	ldr	r0, [pc, #60]	; (8002794 <DS18B20_Read1+0x78>)
 8002758:	f001 fa50 	bl	8003bfc <HAL_GPIO_ReadPin>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d009      	beq.n	8002776 <DS18B20_Read1+0x5a>
		{
			value |= 1<<i;  // read = 1
 8002762:	2201      	movs	r2, #1
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	b25a      	sxtb	r2, r3
 800276c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002770:	4313      	orrs	r3, r2
 8002772:	b25b      	sxtb	r3, r3
 8002774:	71fb      	strb	r3, [r7, #7]
		}
		DelayUS(50);  // wait for 60 us
 8002776:	2032      	movs	r0, #50	; 0x32
 8002778:	f7ff fb30 	bl	8001ddc <DelayUS>
	for (int i=0;i<8;i++)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	3301      	adds	r3, #1
 8002780:	603b      	str	r3, [r7, #0]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	2b07      	cmp	r3, #7
 8002786:	ddd5      	ble.n	8002734 <DS18B20_Read1+0x18>
	}
	return value;
 8002788:	79fb      	ldrb	r3, [r7, #7]
}
 800278a:	4618      	mov	r0, r3
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40020800 	.word	0x40020800

08002798 <soilTemp_Task>:


/****************** TASK DEFINITIONS *********************************/

void soilTemp_Task (void *arg)					// Check Soil Temperature
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
	uint16_t TEMP;

//	while(1)
	{
        DS18B20_Start1();
 80027a0:	f7ff ff46 	bl	8002630 <DS18B20_Start1>
        HAL_Delay (1);
 80027a4:	2001      	movs	r0, #1
 80027a6:	f000 fbad 	bl	8002f04 <HAL_Delay>
	    DS18B20_Write1 (0xCC);  					// skip ROM
 80027aa:	20cc      	movs	r0, #204	; 0xcc
 80027ac:	f7ff ff70 	bl	8002690 <DS18B20_Write1>
	    DS18B20_Write1 (0x44);  					// convert t
 80027b0:	2044      	movs	r0, #68	; 0x44
 80027b2:	f7ff ff6d 	bl	8002690 <DS18B20_Write1>
	    HAL_Delay (800);
 80027b6:	f44f 7048 	mov.w	r0, #800	; 0x320
 80027ba:	f000 fba3 	bl	8002f04 <HAL_Delay>

	    DS18B20_Start1();
 80027be:	f7ff ff37 	bl	8002630 <DS18B20_Start1>
	    HAL_Delay(1);
 80027c2:	2001      	movs	r0, #1
 80027c4:	f000 fb9e 	bl	8002f04 <HAL_Delay>
	    DS18B20_Write1 (0xCC);  					// skip ROM
 80027c8:	20cc      	movs	r0, #204	; 0xcc
 80027ca:	f7ff ff61 	bl	8002690 <DS18B20_Write1>
	    DS18B20_Write1 (0xBE);  					// Read Scratch-pad
 80027ce:	20be      	movs	r0, #190	; 0xbe
 80027d0:	f7ff ff5e 	bl	8002690 <DS18B20_Write1>

	    soil_byte1 = DS18B20_Read1();
 80027d4:	f7ff ffa2 	bl	800271c <DS18B20_Read1>
 80027d8:	4603      	mov	r3, r0
 80027da:	461a      	mov	r2, r3
 80027dc:	4b1f      	ldr	r3, [pc, #124]	; (800285c <soilTemp_Task+0xc4>)
 80027de:	701a      	strb	r2, [r3, #0]
	    soil_byte2 = DS18B20_Read1();
 80027e0:	f7ff ff9c 	bl	800271c <DS18B20_Read1>
 80027e4:	4603      	mov	r3, r0
 80027e6:	461a      	mov	r2, r3
 80027e8:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <soilTemp_Task+0xc8>)
 80027ea:	701a      	strb	r2, [r3, #0]
	    TEMP = (soil_byte2<<8)|soil_byte1;
 80027ec:	4b1c      	ldr	r3, [pc, #112]	; (8002860 <soilTemp_Task+0xc8>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	021b      	lsls	r3, r3, #8
 80027f2:	b21a      	sxth	r2, r3
 80027f4:	4b19      	ldr	r3, [pc, #100]	; (800285c <soilTemp_Task+0xc4>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	b21b      	sxth	r3, r3
 80027fa:	4313      	orrs	r3, r2
 80027fc:	b21b      	sxth	r3, r3
 80027fe:	81fb      	strh	r3, [r7, #14]
	    soilTemp = (float)TEMP/16;
 8002800:	89fb      	ldrh	r3, [r7, #14]
 8002802:	ee07 3a90 	vmov	s15, r3
 8002806:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800280a:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800280e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002812:	4b14      	ldr	r3, [pc, #80]	; (8002864 <soilTemp_Task+0xcc>)
 8002814:	edc3 7a00 	vstr	s15, [r3]

		/***** LOAD THE DATA ****/
		sTemp.id = '2';							// Soil Temperature ID
 8002818:	4b13      	ldr	r3, [pc, #76]	; (8002868 <soilTemp_Task+0xd0>)
 800281a:	2232      	movs	r2, #50	; 0x32
 800281c:	701a      	strb	r2, [r3, #0]
		sTemp.data = soilTemp;				// Soil Temperature Data
 800281e:	4b11      	ldr	r3, [pc, #68]	; (8002864 <soilTemp_Task+0xcc>)
 8002820:	edd3 7a00 	vldr	s15, [r3]
 8002824:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002828:	ee17 2a90 	vmov	r2, s15
 800282c:	4b0e      	ldr	r3, [pc, #56]	; (8002868 <soilTemp_Task+0xd0>)
 800282e:	605a      	str	r2, [r3, #4]
		sTemp.sep = '|';
 8002830:	4b0d      	ldr	r3, [pc, #52]	; (8002868 <soilTemp_Task+0xd0>)
 8002832:	227c      	movs	r2, #124	; 0x7c
 8002834:	721a      	strb	r2, [r3, #8]

		/***** send to the queue ****/
		xQueueSendToBack(sensorQHandler, &sTemp, 100);
 8002836:	4b0d      	ldr	r3, [pc, #52]	; (800286c <soilTemp_Task+0xd4>)
 8002838:	6818      	ldr	r0, [r3, #0]
 800283a:	2300      	movs	r3, #0
 800283c:	2264      	movs	r2, #100	; 0x64
 800283e:	490a      	ldr	r1, [pc, #40]	; (8002868 <soilTemp_Task+0xd0>)
 8002840:	f004 f918 	bl	8006a74 <xQueueGenericSend>
//			   {
//				 lcd_ScrollDisplayLeft();
//				 HAL_Delay(500);
//			   }
//		}
	  vTaskDelay(pdMS_TO_TICKS(1000));
 8002844:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002848:	f004 ff1e 	bl	8007688 <vTaskDelay>
	}
	vTaskDelete(NULL);
 800284c:	2000      	movs	r0, #0
 800284e:	f004 fe8b 	bl	8007568 <vTaskDelete>
}
 8002852:	bf00      	nop
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20000774 	.word	0x20000774
 8002860:	20000775 	.word	0x20000775
 8002864:	20000770 	.word	0x20000770
 8002868:	20000764 	.word	0x20000764
 800286c:	20000730 	.word	0x20000730

08002870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	607b      	str	r3, [r7, #4]
 800287a:	4b12      	ldr	r3, [pc, #72]	; (80028c4 <HAL_MspInit+0x54>)
 800287c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287e:	4a11      	ldr	r2, [pc, #68]	; (80028c4 <HAL_MspInit+0x54>)
 8002880:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002884:	6453      	str	r3, [r2, #68]	; 0x44
 8002886:	4b0f      	ldr	r3, [pc, #60]	; (80028c4 <HAL_MspInit+0x54>)
 8002888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800288e:	607b      	str	r3, [r7, #4]
 8002890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	603b      	str	r3, [r7, #0]
 8002896:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <HAL_MspInit+0x54>)
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	4a0a      	ldr	r2, [pc, #40]	; (80028c4 <HAL_MspInit+0x54>)
 800289c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a0:	6413      	str	r3, [r2, #64]	; 0x40
 80028a2:	4b08      	ldr	r3, [pc, #32]	; (80028c4 <HAL_MspInit+0x54>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028aa:	603b      	str	r3, [r7, #0]
 80028ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80028ae:	2200      	movs	r2, #0
 80028b0:	210f      	movs	r1, #15
 80028b2:	f06f 0001 	mvn.w	r0, #1
 80028b6:	f000 fff3 	bl	80038a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028ba:	bf00      	nop
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40023800 	.word	0x40023800

080028c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08a      	sub	sp, #40	; 0x28
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d0:	f107 0314 	add.w	r3, r7, #20
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	605a      	str	r2, [r3, #4]
 80028da:	609a      	str	r2, [r3, #8]
 80028dc:	60da      	str	r2, [r3, #12]
 80028de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a17      	ldr	r2, [pc, #92]	; (8002944 <HAL_ADC_MspInit+0x7c>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d127      	bne.n	800293a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	613b      	str	r3, [r7, #16]
 80028ee:	4b16      	ldr	r3, [pc, #88]	; (8002948 <HAL_ADC_MspInit+0x80>)
 80028f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f2:	4a15      	ldr	r2, [pc, #84]	; (8002948 <HAL_ADC_MspInit+0x80>)
 80028f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f8:	6453      	str	r3, [r2, #68]	; 0x44
 80028fa:	4b13      	ldr	r3, [pc, #76]	; (8002948 <HAL_ADC_MspInit+0x80>)
 80028fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002902:	613b      	str	r3, [r7, #16]
 8002904:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002906:	2300      	movs	r3, #0
 8002908:	60fb      	str	r3, [r7, #12]
 800290a:	4b0f      	ldr	r3, [pc, #60]	; (8002948 <HAL_ADC_MspInit+0x80>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	4a0e      	ldr	r2, [pc, #56]	; (8002948 <HAL_ADC_MspInit+0x80>)
 8002910:	f043 0301 	orr.w	r3, r3, #1
 8002914:	6313      	str	r3, [r2, #48]	; 0x30
 8002916:	4b0c      	ldr	r3, [pc, #48]	; (8002948 <HAL_ADC_MspInit+0x80>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = SoilMoisture_Pin|BatteryVol_Pin;
 8002922:	2306      	movs	r3, #6
 8002924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002926:	2303      	movs	r3, #3
 8002928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292a:	2300      	movs	r3, #0
 800292c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800292e:	f107 0314 	add.w	r3, r7, #20
 8002932:	4619      	mov	r1, r3
 8002934:	4805      	ldr	r0, [pc, #20]	; (800294c <HAL_ADC_MspInit+0x84>)
 8002936:	f000 ffdd 	bl	80038f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800293a:	bf00      	nop
 800293c:	3728      	adds	r7, #40	; 0x28
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40012000 	.word	0x40012000
 8002948:	40023800 	.word	0x40023800
 800294c:	40020000 	.word	0x40020000

08002950 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b08a      	sub	sp, #40	; 0x28
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002958:	f107 0314 	add.w	r3, r7, #20
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	605a      	str	r2, [r3, #4]
 8002962:	609a      	str	r2, [r3, #8]
 8002964:	60da      	str	r2, [r3, #12]
 8002966:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a19      	ldr	r2, [pc, #100]	; (80029d4 <HAL_I2C_MspInit+0x84>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d12c      	bne.n	80029cc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002972:	2300      	movs	r3, #0
 8002974:	613b      	str	r3, [r7, #16]
 8002976:	4b18      	ldr	r3, [pc, #96]	; (80029d8 <HAL_I2C_MspInit+0x88>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	4a17      	ldr	r2, [pc, #92]	; (80029d8 <HAL_I2C_MspInit+0x88>)
 800297c:	f043 0302 	orr.w	r3, r3, #2
 8002980:	6313      	str	r3, [r2, #48]	; 0x30
 8002982:	4b15      	ldr	r3, [pc, #84]	; (80029d8 <HAL_I2C_MspInit+0x88>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	613b      	str	r3, [r7, #16]
 800298c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800298e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002994:	2312      	movs	r3, #18
 8002996:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002998:	2300      	movs	r3, #0
 800299a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800299c:	2303      	movs	r3, #3
 800299e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80029a0:	2304      	movs	r3, #4
 80029a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029a4:	f107 0314 	add.w	r3, r7, #20
 80029a8:	4619      	mov	r1, r3
 80029aa:	480c      	ldr	r0, [pc, #48]	; (80029dc <HAL_I2C_MspInit+0x8c>)
 80029ac:	f000 ffa2 	bl	80038f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029b0:	2300      	movs	r3, #0
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <HAL_I2C_MspInit+0x88>)
 80029b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b8:	4a07      	ldr	r2, [pc, #28]	; (80029d8 <HAL_I2C_MspInit+0x88>)
 80029ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029be:	6413      	str	r3, [r2, #64]	; 0x40
 80029c0:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <HAL_I2C_MspInit+0x88>)
 80029c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80029cc:	bf00      	nop
 80029ce:	3728      	adds	r7, #40	; 0x28
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40005400 	.word	0x40005400
 80029d8:	40023800 	.word	0x40023800
 80029dc:	40020400 	.word	0x40020400

080029e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08a      	sub	sp, #40	; 0x28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e8:	f107 0314 	add.w	r3, r7, #20
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	609a      	str	r2, [r3, #8]
 80029f4:	60da      	str	r2, [r3, #12]
 80029f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a19      	ldr	r2, [pc, #100]	; (8002a64 <HAL_SPI_MspInit+0x84>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d12b      	bne.n	8002a5a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	613b      	str	r3, [r7, #16]
 8002a06:	4b18      	ldr	r3, [pc, #96]	; (8002a68 <HAL_SPI_MspInit+0x88>)
 8002a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0a:	4a17      	ldr	r2, [pc, #92]	; (8002a68 <HAL_SPI_MspInit+0x88>)
 8002a0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a10:	6453      	str	r3, [r2, #68]	; 0x44
 8002a12:	4b15      	ldr	r3, [pc, #84]	; (8002a68 <HAL_SPI_MspInit+0x88>)
 8002a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a1a:	613b      	str	r3, [r7, #16]
 8002a1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <HAL_SPI_MspInit+0x88>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	4a10      	ldr	r2, [pc, #64]	; (8002a68 <HAL_SPI_MspInit+0x88>)
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a2e:	4b0e      	ldr	r3, [pc, #56]	; (8002a68 <HAL_SPI_MspInit+0x88>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002a3a:	23e0      	movs	r3, #224	; 0xe0
 8002a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a46:	2303      	movs	r3, #3
 8002a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a4a:	2305      	movs	r3, #5
 8002a4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a4e:	f107 0314 	add.w	r3, r7, #20
 8002a52:	4619      	mov	r1, r3
 8002a54:	4805      	ldr	r0, [pc, #20]	; (8002a6c <HAL_SPI_MspInit+0x8c>)
 8002a56:	f000 ff4d 	bl	80038f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002a5a:	bf00      	nop
 8002a5c:	3728      	adds	r7, #40	; 0x28
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40013000 	.word	0x40013000
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40020000 	.word	0x40020000

08002a70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a0b      	ldr	r2, [pc, #44]	; (8002aac <HAL_TIM_Base_MspInit+0x3c>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d10d      	bne.n	8002a9e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a82:	2300      	movs	r3, #0
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	4b0a      	ldr	r3, [pc, #40]	; (8002ab0 <HAL_TIM_Base_MspInit+0x40>)
 8002a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8a:	4a09      	ldr	r2, [pc, #36]	; (8002ab0 <HAL_TIM_Base_MspInit+0x40>)
 8002a8c:	f043 0301 	orr.w	r3, r3, #1
 8002a90:	6453      	str	r3, [r2, #68]	; 0x44
 8002a92:	4b07      	ldr	r3, [pc, #28]	; (8002ab0 <HAL_TIM_Base_MspInit+0x40>)
 8002a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	60fb      	str	r3, [r7, #12]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002a9e:	bf00      	nop
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	40010000 	.word	0x40010000
 8002ab0:	40023800 	.word	0x40023800

08002ab4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b08a      	sub	sp, #40	; 0x28
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002abc:	f107 0314 	add.w	r3, r7, #20
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	605a      	str	r2, [r3, #4]
 8002ac6:	609a      	str	r2, [r3, #8]
 8002ac8:	60da      	str	r2, [r3, #12]
 8002aca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a19      	ldr	r2, [pc, #100]	; (8002b38 <HAL_UART_MspInit+0x84>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d12c      	bne.n	8002b30 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	613b      	str	r3, [r7, #16]
 8002ada:	4b18      	ldr	r3, [pc, #96]	; (8002b3c <HAL_UART_MspInit+0x88>)
 8002adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ade:	4a17      	ldr	r2, [pc, #92]	; (8002b3c <HAL_UART_MspInit+0x88>)
 8002ae0:	f043 0310 	orr.w	r3, r3, #16
 8002ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ae6:	4b15      	ldr	r3, [pc, #84]	; (8002b3c <HAL_UART_MspInit+0x88>)
 8002ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aea:	f003 0310 	and.w	r3, r3, #16
 8002aee:	613b      	str	r3, [r7, #16]
 8002af0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af2:	2300      	movs	r3, #0
 8002af4:	60fb      	str	r3, [r7, #12]
 8002af6:	4b11      	ldr	r3, [pc, #68]	; (8002b3c <HAL_UART_MspInit+0x88>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	4a10      	ldr	r2, [pc, #64]	; (8002b3c <HAL_UART_MspInit+0x88>)
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	6313      	str	r3, [r2, #48]	; 0x30
 8002b02:	4b0e      	ldr	r3, [pc, #56]	; (8002b3c <HAL_UART_MspInit+0x88>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002b0e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b14:	2302      	movs	r3, #2
 8002b16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b20:	2307      	movs	r3, #7
 8002b22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b24:	f107 0314 	add.w	r3, r7, #20
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4805      	ldr	r0, [pc, #20]	; (8002b40 <HAL_UART_MspInit+0x8c>)
 8002b2c:	f000 fee2 	bl	80038f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002b30:	bf00      	nop
 8002b32:	3728      	adds	r7, #40	; 0x28
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40011000 	.word	0x40011000
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	40020000 	.word	0x40020000

08002b44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b08e      	sub	sp, #56	; 0x38
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8002b54:	2300      	movs	r3, #0
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	4b33      	ldr	r3, [pc, #204]	; (8002c28 <HAL_InitTick+0xe4>)
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5c:	4a32      	ldr	r2, [pc, #200]	; (8002c28 <HAL_InitTick+0xe4>)
 8002b5e:	f043 0308 	orr.w	r3, r3, #8
 8002b62:	6413      	str	r3, [r2, #64]	; 0x40
 8002b64:	4b30      	ldr	r3, [pc, #192]	; (8002c28 <HAL_InitTick+0xe4>)
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	f003 0308 	and.w	r3, r3, #8
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b70:	f107 0210 	add.w	r2, r7, #16
 8002b74:	f107 0314 	add.w	r3, r7, #20
 8002b78:	4611      	mov	r1, r2
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f002 f914 	bl	8004da8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002b80:	6a3b      	ldr	r3, [r7, #32]
 8002b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d103      	bne.n	8002b92 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002b8a:	f002 f8e5 	bl	8004d58 <HAL_RCC_GetPCLK1Freq>
 8002b8e:	6378      	str	r0, [r7, #52]	; 0x34
 8002b90:	e004      	b.n	8002b9c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002b92:	f002 f8e1 	bl	8004d58 <HAL_RCC_GetPCLK1Freq>
 8002b96:	4603      	mov	r3, r0
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b9e:	4a23      	ldr	r2, [pc, #140]	; (8002c2c <HAL_InitTick+0xe8>)
 8002ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba4:	0c9b      	lsrs	r3, r3, #18
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8002baa:	4b21      	ldr	r3, [pc, #132]	; (8002c30 <HAL_InitTick+0xec>)
 8002bac:	4a21      	ldr	r2, [pc, #132]	; (8002c34 <HAL_InitTick+0xf0>)
 8002bae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8002bb0:	4b1f      	ldr	r3, [pc, #124]	; (8002c30 <HAL_InitTick+0xec>)
 8002bb2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002bb6:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8002bb8:	4a1d      	ldr	r2, [pc, #116]	; (8002c30 <HAL_InitTick+0xec>)
 8002bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bbc:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8002bbe:	4b1c      	ldr	r3, [pc, #112]	; (8002c30 <HAL_InitTick+0xec>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bc4:	4b1a      	ldr	r3, [pc, #104]	; (8002c30 <HAL_InitTick+0xec>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bca:	4b19      	ldr	r3, [pc, #100]	; (8002c30 <HAL_InitTick+0xec>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8002bd0:	4817      	ldr	r0, [pc, #92]	; (8002c30 <HAL_InitTick+0xec>)
 8002bd2:	f002 fed1 	bl	8005978 <HAL_TIM_Base_Init>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002bdc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d11b      	bne.n	8002c1c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8002be4:	4812      	ldr	r0, [pc, #72]	; (8002c30 <HAL_InitTick+0xec>)
 8002be6:	f002 ff17 	bl	8005a18 <HAL_TIM_Base_Start_IT>
 8002bea:	4603      	mov	r3, r0
 8002bec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002bf0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d111      	bne.n	8002c1c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002bf8:	2032      	movs	r0, #50	; 0x32
 8002bfa:	f000 fe6d 	bl	80038d8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b0f      	cmp	r3, #15
 8002c02:	d808      	bhi.n	8002c16 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8002c04:	2200      	movs	r2, #0
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	2032      	movs	r0, #50	; 0x32
 8002c0a:	f000 fe49 	bl	80038a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c0e:	4a0a      	ldr	r2, [pc, #40]	; (8002c38 <HAL_InitTick+0xf4>)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6013      	str	r3, [r2, #0]
 8002c14:	e002      	b.n	8002c1c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002c1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3738      	adds	r7, #56	; 0x38
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	40023800 	.word	0x40023800
 8002c2c:	431bde83 	.word	0x431bde83
 8002c30:	20000778 	.word	0x20000778
 8002c34:	40000c00 	.word	0x40000c00
 8002c38:	20000014 	.word	0x20000014

08002c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c40:	e7fe      	b.n	8002c40 <NMI_Handler+0x4>

08002c42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c42:	b480      	push	{r7}
 8002c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c46:	e7fe      	b.n	8002c46 <HardFault_Handler+0x4>

08002c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c4c:	e7fe      	b.n	8002c4c <MemManage_Handler+0x4>

08002c4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c52:	e7fe      	b.n	8002c52 <BusFault_Handler+0x4>

08002c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c58:	e7fe      	b.n	8002c58 <UsageFault_Handler+0x4>

08002c5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c5e:	bf00      	nop
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002c6c:	4802      	ldr	r0, [pc, #8]	; (8002c78 <TIM5_IRQHandler+0x10>)
 8002c6e:	f002 ff35 	bl	8005adc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002c72:	bf00      	nop
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	20000778 	.word	0x20000778

08002c7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
	return 1;
 8002c80:	2301      	movs	r3, #1
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <_kill>:

int _kill(int pid, int sig)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002c96:	f005 fe41 	bl	800891c <__errno>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2216      	movs	r2, #22
 8002c9e:	601a      	str	r2, [r3, #0]
	return -1;
 8002ca0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3708      	adds	r7, #8
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <_exit>:

void _exit (int status)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7ff ffe7 	bl	8002c8c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002cbe:	e7fe      	b.n	8002cbe <_exit+0x12>

08002cc0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ccc:	2300      	movs	r3, #0
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	e00a      	b.n	8002ce8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002cd2:	f3af 8000 	nop.w
 8002cd6:	4601      	mov	r1, r0
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	1c5a      	adds	r2, r3, #1
 8002cdc:	60ba      	str	r2, [r7, #8]
 8002cde:	b2ca      	uxtb	r2, r1
 8002ce0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	617b      	str	r3, [r7, #20]
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	dbf0      	blt.n	8002cd2 <_read+0x12>
	}

return len;
 8002cf0:	687b      	ldr	r3, [r7, #4]
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3718      	adds	r7, #24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b086      	sub	sp, #24
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	60f8      	str	r0, [r7, #12]
 8002d02:	60b9      	str	r1, [r7, #8]
 8002d04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d06:	2300      	movs	r3, #0
 8002d08:	617b      	str	r3, [r7, #20]
 8002d0a:	e009      	b.n	8002d20 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	1c5a      	adds	r2, r3, #1
 8002d10:	60ba      	str	r2, [r7, #8]
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	dbf1      	blt.n	8002d0c <_write+0x12>
	}
	return len;
 8002d28:	687b      	ldr	r3, [r7, #4]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3718      	adds	r7, #24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <_close>:

int _close(int file)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
	return -1;
 8002d3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b083      	sub	sp, #12
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
 8002d52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d5a:	605a      	str	r2, [r3, #4]
	return 0;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <_isatty>:

int _isatty(int file)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
	return 1;
 8002d72:	2301      	movs	r3, #1
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
	return 0;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
	...

08002d9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002da4:	4a14      	ldr	r2, [pc, #80]	; (8002df8 <_sbrk+0x5c>)
 8002da6:	4b15      	ldr	r3, [pc, #84]	; (8002dfc <_sbrk+0x60>)
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002db0:	4b13      	ldr	r3, [pc, #76]	; (8002e00 <_sbrk+0x64>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d102      	bne.n	8002dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002db8:	4b11      	ldr	r3, [pc, #68]	; (8002e00 <_sbrk+0x64>)
 8002dba:	4a12      	ldr	r2, [pc, #72]	; (8002e04 <_sbrk+0x68>)
 8002dbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dbe:	4b10      	ldr	r3, [pc, #64]	; (8002e00 <_sbrk+0x64>)
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d207      	bcs.n	8002ddc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dcc:	f005 fda6 	bl	800891c <__errno>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	220c      	movs	r2, #12
 8002dd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dda:	e009      	b.n	8002df0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ddc:	4b08      	ldr	r3, [pc, #32]	; (8002e00 <_sbrk+0x64>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002de2:	4b07      	ldr	r3, [pc, #28]	; (8002e00 <_sbrk+0x64>)
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4413      	add	r3, r2
 8002dea:	4a05      	ldr	r2, [pc, #20]	; (8002e00 <_sbrk+0x64>)
 8002dec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dee:	68fb      	ldr	r3, [r7, #12]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3718      	adds	r7, #24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	20020000 	.word	0x20020000
 8002dfc:	00000400 	.word	0x00000400
 8002e00:	200007c0 	.word	0x200007c0
 8002e04:	20004530 	.word	0x20004530

08002e08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e0c:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <SystemInit+0x20>)
 8002e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e12:	4a05      	ldr	r2, [pc, #20]	; (8002e28 <SystemInit+0x20>)
 8002e14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e1c:	bf00      	nop
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	e000ed00 	.word	0xe000ed00

08002e2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e30:	480d      	ldr	r0, [pc, #52]	; (8002e68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e32:	490e      	ldr	r1, [pc, #56]	; (8002e6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e34:	4a0e      	ldr	r2, [pc, #56]	; (8002e70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e38:	e002      	b.n	8002e40 <LoopCopyDataInit>

08002e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e3e:	3304      	adds	r3, #4

08002e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e44:	d3f9      	bcc.n	8002e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e46:	4a0b      	ldr	r2, [pc, #44]	; (8002e74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e48:	4c0b      	ldr	r4, [pc, #44]	; (8002e78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e4c:	e001      	b.n	8002e52 <LoopFillZerobss>

08002e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e50:	3204      	adds	r2, #4

08002e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e54:	d3fb      	bcc.n	8002e4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e56:	f7ff ffd7 	bl	8002e08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e5a:	f005 fe5b 	bl	8008b14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e5e:	f7ff f8d1 	bl	8002004 <main>
  bx  lr    
 8002e62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e6c:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002e70:	0800d904 	.word	0x0800d904
  ldr r2, =_sbss
 8002e74:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8002e78:	2000452c 	.word	0x2000452c

08002e7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e7c:	e7fe      	b.n	8002e7c <ADC_IRQHandler>
	...

08002e80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e84:	4b0e      	ldr	r3, [pc, #56]	; (8002ec0 <HAL_Init+0x40>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a0d      	ldr	r2, [pc, #52]	; (8002ec0 <HAL_Init+0x40>)
 8002e8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e90:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <HAL_Init+0x40>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a0a      	ldr	r2, [pc, #40]	; (8002ec0 <HAL_Init+0x40>)
 8002e96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e9c:	4b08      	ldr	r3, [pc, #32]	; (8002ec0 <HAL_Init+0x40>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a07      	ldr	r2, [pc, #28]	; (8002ec0 <HAL_Init+0x40>)
 8002ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ea8:	2003      	movs	r0, #3
 8002eaa:	f000 fcee 	bl	800388a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002eae:	200f      	movs	r0, #15
 8002eb0:	f7ff fe48 	bl	8002b44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002eb4:	f7ff fcdc 	bl	8002870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40023c00 	.word	0x40023c00

08002ec4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ec8:	4b06      	ldr	r3, [pc, #24]	; (8002ee4 <HAL_IncTick+0x20>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <HAL_IncTick+0x24>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	4a04      	ldr	r2, [pc, #16]	; (8002ee8 <HAL_IncTick+0x24>)
 8002ed6:	6013      	str	r3, [r2, #0]
}
 8002ed8:	bf00      	nop
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	20000018 	.word	0x20000018
 8002ee8:	200007c4 	.word	0x200007c4

08002eec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  return uwTick;
 8002ef0:	4b03      	ldr	r3, [pc, #12]	; (8002f00 <HAL_GetTick+0x14>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	200007c4 	.word	0x200007c4

08002f04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f0c:	f7ff ffee 	bl	8002eec <HAL_GetTick>
 8002f10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f1c:	d005      	beq.n	8002f2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f1e:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <HAL_Delay+0x44>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	461a      	mov	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	4413      	add	r3, r2
 8002f28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f2a:	bf00      	nop
 8002f2c:	f7ff ffde 	bl	8002eec <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d8f7      	bhi.n	8002f2c <HAL_Delay+0x28>
  {
  }
}
 8002f3c:	bf00      	nop
 8002f3e:	bf00      	nop
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	20000018 	.word	0x20000018

08002f4c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f54:	2300      	movs	r3, #0
 8002f56:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e033      	b.n	8002fca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d109      	bne.n	8002f7e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7ff fcac 	bl	80028c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	f003 0310 	and.w	r3, r3, #16
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d118      	bne.n	8002fbc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f92:	f023 0302 	bic.w	r3, r3, #2
 8002f96:	f043 0202 	orr.w	r2, r3, #2
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 faca 	bl	8003538 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	f023 0303 	bic.w	r3, r3, #3
 8002fb2:	f043 0201 	orr.w	r2, r3, #1
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	641a      	str	r2, [r3, #64]	; 0x40
 8002fba:	e001      	b.n	8002fc0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
	...

08002fd4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d101      	bne.n	8002fee <HAL_ADC_Start+0x1a>
 8002fea:	2302      	movs	r3, #2
 8002fec:	e097      	b.n	800311e <HAL_ADC_Start+0x14a>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	2b01      	cmp	r3, #1
 8003002:	d018      	beq.n	8003036 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f042 0201 	orr.w	r2, r2, #1
 8003012:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003014:	4b45      	ldr	r3, [pc, #276]	; (800312c <HAL_ADC_Start+0x158>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a45      	ldr	r2, [pc, #276]	; (8003130 <HAL_ADC_Start+0x15c>)
 800301a:	fba2 2303 	umull	r2, r3, r2, r3
 800301e:	0c9a      	lsrs	r2, r3, #18
 8003020:	4613      	mov	r3, r2
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	4413      	add	r3, r2
 8003026:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003028:	e002      	b.n	8003030 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	3b01      	subs	r3, #1
 800302e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1f9      	bne.n	800302a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	2b01      	cmp	r3, #1
 8003042:	d15f      	bne.n	8003104 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003048:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800304c:	f023 0301 	bic.w	r3, r3, #1
 8003050:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003062:	2b00      	cmp	r3, #0
 8003064:	d007      	beq.n	8003076 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800306e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800307e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003082:	d106      	bne.n	8003092 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003088:	f023 0206 	bic.w	r2, r3, #6
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	645a      	str	r2, [r3, #68]	; 0x44
 8003090:	e002      	b.n	8003098 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030a0:	4b24      	ldr	r3, [pc, #144]	; (8003134 <HAL_ADC_Start+0x160>)
 80030a2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80030ac:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f003 031f 	and.w	r3, r3, #31
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10f      	bne.n	80030da <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d129      	bne.n	800311c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	e020      	b.n	800311c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a16      	ldr	r2, [pc, #88]	; (8003138 <HAL_ADC_Start+0x164>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d11b      	bne.n	800311c <HAL_ADC_Start+0x148>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d114      	bne.n	800311c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003100:	609a      	str	r2, [r3, #8]
 8003102:	e00b      	b.n	800311c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003108:	f043 0210 	orr.w	r2, r3, #16
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003114:	f043 0201 	orr.w	r2, r3, #1
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3714      	adds	r7, #20
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	20000010 	.word	0x20000010
 8003130:	431bde83 	.word	0x431bde83
 8003134:	40012300 	.word	0x40012300
 8003138:	40012000 	.word	0x40012000

0800313c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800314a:	2b01      	cmp	r3, #1
 800314c:	d101      	bne.n	8003152 <HAL_ADC_Stop+0x16>
 800314e:	2302      	movs	r3, #2
 8003150:	e021      	b.n	8003196 <HAL_ADC_Stop+0x5a>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 0201 	bic.w	r2, r2, #1
 8003168:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	2b00      	cmp	r3, #0
 8003176:	d109      	bne.n	800318c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003180:	f023 0301 	bic.w	r3, r3, #1
 8003184:	f043 0201 	orr.w	r2, r3, #1
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b084      	sub	sp, #16
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
 80031aa:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031be:	d113      	bne.n	80031e8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80031ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031ce:	d10b      	bne.n	80031e8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d4:	f043 0220 	orr.w	r2, r3, #32
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e063      	b.n	80032b0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80031e8:	f7ff fe80 	bl	8002eec <HAL_GetTick>
 80031ec:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80031ee:	e021      	b.n	8003234 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f6:	d01d      	beq.n	8003234 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d007      	beq.n	800320e <HAL_ADC_PollForConversion+0x6c>
 80031fe:	f7ff fe75 	bl	8002eec <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	429a      	cmp	r2, r3
 800320c:	d212      	bcs.n	8003234 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b02      	cmp	r3, #2
 800321a:	d00b      	beq.n	8003234 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003220:	f043 0204 	orr.w	r2, r3, #4
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e03d      	b.n	80032b0 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b02      	cmp	r3, #2
 8003240:	d1d6      	bne.n	80031f0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f06f 0212 	mvn.w	r2, #18
 800324a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003250:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d123      	bne.n	80032ae <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800326a:	2b00      	cmp	r3, #0
 800326c:	d11f      	bne.n	80032ae <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003274:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003278:	2b00      	cmp	r3, #0
 800327a:	d006      	beq.n	800328a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003286:	2b00      	cmp	r3, #0
 8003288:	d111      	bne.n	80032ae <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d105      	bne.n	80032ae <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	f043 0201 	orr.w	r2, r3, #1
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
	...

080032d4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80032de:	2300      	movs	r3, #0
 80032e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d101      	bne.n	80032f0 <HAL_ADC_ConfigChannel+0x1c>
 80032ec:	2302      	movs	r3, #2
 80032ee:	e113      	b.n	8003518 <HAL_ADC_ConfigChannel+0x244>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2b09      	cmp	r3, #9
 80032fe:	d925      	bls.n	800334c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68d9      	ldr	r1, [r3, #12]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	b29b      	uxth	r3, r3
 800330c:	461a      	mov	r2, r3
 800330e:	4613      	mov	r3, r2
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	4413      	add	r3, r2
 8003314:	3b1e      	subs	r3, #30
 8003316:	2207      	movs	r2, #7
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	43da      	mvns	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	400a      	ands	r2, r1
 8003324:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68d9      	ldr	r1, [r3, #12]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	b29b      	uxth	r3, r3
 8003336:	4618      	mov	r0, r3
 8003338:	4603      	mov	r3, r0
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	4403      	add	r3, r0
 800333e:	3b1e      	subs	r3, #30
 8003340:	409a      	lsls	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	60da      	str	r2, [r3, #12]
 800334a:	e022      	b.n	8003392 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6919      	ldr	r1, [r3, #16]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	b29b      	uxth	r3, r3
 8003358:	461a      	mov	r2, r3
 800335a:	4613      	mov	r3, r2
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	4413      	add	r3, r2
 8003360:	2207      	movs	r2, #7
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	43da      	mvns	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	400a      	ands	r2, r1
 800336e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6919      	ldr	r1, [r3, #16]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	b29b      	uxth	r3, r3
 8003380:	4618      	mov	r0, r3
 8003382:	4603      	mov	r3, r0
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	4403      	add	r3, r0
 8003388:	409a      	lsls	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2b06      	cmp	r3, #6
 8003398:	d824      	bhi.n	80033e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	4613      	mov	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4413      	add	r3, r2
 80033aa:	3b05      	subs	r3, #5
 80033ac:	221f      	movs	r2, #31
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	43da      	mvns	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	400a      	ands	r2, r1
 80033ba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	4618      	mov	r0, r3
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	4613      	mov	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	3b05      	subs	r3, #5
 80033d6:	fa00 f203 	lsl.w	r2, r0, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	635a      	str	r2, [r3, #52]	; 0x34
 80033e2:	e04c      	b.n	800347e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	2b0c      	cmp	r3, #12
 80033ea:	d824      	bhi.n	8003436 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	4613      	mov	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	3b23      	subs	r3, #35	; 0x23
 80033fe:	221f      	movs	r2, #31
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	43da      	mvns	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	400a      	ands	r2, r1
 800340c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	b29b      	uxth	r3, r3
 800341a:	4618      	mov	r0, r3
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	4613      	mov	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	3b23      	subs	r3, #35	; 0x23
 8003428:	fa00 f203 	lsl.w	r2, r0, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	430a      	orrs	r2, r1
 8003432:	631a      	str	r2, [r3, #48]	; 0x30
 8003434:	e023      	b.n	800347e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	4613      	mov	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	3b41      	subs	r3, #65	; 0x41
 8003448:	221f      	movs	r2, #31
 800344a:	fa02 f303 	lsl.w	r3, r2, r3
 800344e:	43da      	mvns	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	400a      	ands	r2, r1
 8003456:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	b29b      	uxth	r3, r3
 8003464:	4618      	mov	r0, r3
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	4613      	mov	r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4413      	add	r3, r2
 8003470:	3b41      	subs	r3, #65	; 0x41
 8003472:	fa00 f203 	lsl.w	r2, r0, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	430a      	orrs	r2, r1
 800347c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800347e:	4b29      	ldr	r3, [pc, #164]	; (8003524 <HAL_ADC_ConfigChannel+0x250>)
 8003480:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a28      	ldr	r2, [pc, #160]	; (8003528 <HAL_ADC_ConfigChannel+0x254>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d10f      	bne.n	80034ac <HAL_ADC_ConfigChannel+0x1d8>
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2b12      	cmp	r3, #18
 8003492:	d10b      	bne.n	80034ac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a1d      	ldr	r2, [pc, #116]	; (8003528 <HAL_ADC_ConfigChannel+0x254>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d12b      	bne.n	800350e <HAL_ADC_ConfigChannel+0x23a>
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a1c      	ldr	r2, [pc, #112]	; (800352c <HAL_ADC_ConfigChannel+0x258>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d003      	beq.n	80034c8 <HAL_ADC_ConfigChannel+0x1f4>
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2b11      	cmp	r3, #17
 80034c6:	d122      	bne.n	800350e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a11      	ldr	r2, [pc, #68]	; (800352c <HAL_ADC_ConfigChannel+0x258>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d111      	bne.n	800350e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034ea:	4b11      	ldr	r3, [pc, #68]	; (8003530 <HAL_ADC_ConfigChannel+0x25c>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a11      	ldr	r2, [pc, #68]	; (8003534 <HAL_ADC_ConfigChannel+0x260>)
 80034f0:	fba2 2303 	umull	r2, r3, r2, r3
 80034f4:	0c9a      	lsrs	r2, r3, #18
 80034f6:	4613      	mov	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003500:	e002      	b.n	8003508 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	3b01      	subs	r3, #1
 8003506:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1f9      	bne.n	8003502 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3714      	adds	r7, #20
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	40012300 	.word	0x40012300
 8003528:	40012000 	.word	0x40012000
 800352c:	10000012 	.word	0x10000012
 8003530:	20000010 	.word	0x20000010
 8003534:	431bde83 	.word	0x431bde83

08003538 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003540:	4b79      	ldr	r3, [pc, #484]	; (8003728 <ADC_Init+0x1f0>)
 8003542:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	431a      	orrs	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800356c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6859      	ldr	r1, [r3, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	021a      	lsls	r2, r3, #8
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003590:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6859      	ldr	r1, [r3, #4]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	430a      	orrs	r2, r1
 80035a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689a      	ldr	r2, [r3, #8]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6899      	ldr	r1, [r3, #8]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68da      	ldr	r2, [r3, #12]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ca:	4a58      	ldr	r2, [pc, #352]	; (800372c <ADC_Init+0x1f4>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d022      	beq.n	8003616 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689a      	ldr	r2, [r3, #8]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6899      	ldr	r1, [r3, #8]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003600:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6899      	ldr	r1, [r3, #8]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	430a      	orrs	r2, r1
 8003612:	609a      	str	r2, [r3, #8]
 8003614:	e00f      	b.n	8003636 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003624:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003634:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0202 	bic.w	r2, r2, #2
 8003644:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6899      	ldr	r1, [r3, #8]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	7e1b      	ldrb	r3, [r3, #24]
 8003650:	005a      	lsls	r2, r3, #1
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d01b      	beq.n	800369c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003672:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003682:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6859      	ldr	r1, [r3, #4]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368e:	3b01      	subs	r3, #1
 8003690:	035a      	lsls	r2, r3, #13
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	605a      	str	r2, [r3, #4]
 800369a:	e007      	b.n	80036ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80036ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	051a      	lsls	r2, r3, #20
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80036e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6899      	ldr	r1, [r3, #8]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80036ee:	025a      	lsls	r2, r3, #9
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689a      	ldr	r2, [r3, #8]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003706:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6899      	ldr	r1, [r3, #8]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	029a      	lsls	r2, r3, #10
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	430a      	orrs	r2, r1
 800371a:	609a      	str	r2, [r3, #8]
}
 800371c:	bf00      	nop
 800371e:	3714      	adds	r7, #20
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	40012300 	.word	0x40012300
 800372c:	0f000001 	.word	0x0f000001

08003730 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f003 0307 	and.w	r3, r3, #7
 800373e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003740:	4b0c      	ldr	r3, [pc, #48]	; (8003774 <__NVIC_SetPriorityGrouping+0x44>)
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800374c:	4013      	ands	r3, r2
 800374e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003758:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800375c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003760:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003762:	4a04      	ldr	r2, [pc, #16]	; (8003774 <__NVIC_SetPriorityGrouping+0x44>)
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	60d3      	str	r3, [r2, #12]
}
 8003768:	bf00      	nop
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	e000ed00 	.word	0xe000ed00

08003778 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800377c:	4b04      	ldr	r3, [pc, #16]	; (8003790 <__NVIC_GetPriorityGrouping+0x18>)
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	0a1b      	lsrs	r3, r3, #8
 8003782:	f003 0307 	and.w	r3, r3, #7
}
 8003786:	4618      	mov	r0, r3
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	e000ed00 	.word	0xe000ed00

08003794 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	4603      	mov	r3, r0
 800379c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800379e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	db0b      	blt.n	80037be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037a6:	79fb      	ldrb	r3, [r7, #7]
 80037a8:	f003 021f 	and.w	r2, r3, #31
 80037ac:	4907      	ldr	r1, [pc, #28]	; (80037cc <__NVIC_EnableIRQ+0x38>)
 80037ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b2:	095b      	lsrs	r3, r3, #5
 80037b4:	2001      	movs	r0, #1
 80037b6:	fa00 f202 	lsl.w	r2, r0, r2
 80037ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037be:	bf00      	nop
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	e000e100 	.word	0xe000e100

080037d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4603      	mov	r3, r0
 80037d8:	6039      	str	r1, [r7, #0]
 80037da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	db0a      	blt.n	80037fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	b2da      	uxtb	r2, r3
 80037e8:	490c      	ldr	r1, [pc, #48]	; (800381c <__NVIC_SetPriority+0x4c>)
 80037ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ee:	0112      	lsls	r2, r2, #4
 80037f0:	b2d2      	uxtb	r2, r2
 80037f2:	440b      	add	r3, r1
 80037f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037f8:	e00a      	b.n	8003810 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	b2da      	uxtb	r2, r3
 80037fe:	4908      	ldr	r1, [pc, #32]	; (8003820 <__NVIC_SetPriority+0x50>)
 8003800:	79fb      	ldrb	r3, [r7, #7]
 8003802:	f003 030f 	and.w	r3, r3, #15
 8003806:	3b04      	subs	r3, #4
 8003808:	0112      	lsls	r2, r2, #4
 800380a:	b2d2      	uxtb	r2, r2
 800380c:	440b      	add	r3, r1
 800380e:	761a      	strb	r2, [r3, #24]
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	e000e100 	.word	0xe000e100
 8003820:	e000ed00 	.word	0xe000ed00

08003824 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003824:	b480      	push	{r7}
 8003826:	b089      	sub	sp, #36	; 0x24
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f003 0307 	and.w	r3, r3, #7
 8003836:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	f1c3 0307 	rsb	r3, r3, #7
 800383e:	2b04      	cmp	r3, #4
 8003840:	bf28      	it	cs
 8003842:	2304      	movcs	r3, #4
 8003844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	3304      	adds	r3, #4
 800384a:	2b06      	cmp	r3, #6
 800384c:	d902      	bls.n	8003854 <NVIC_EncodePriority+0x30>
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	3b03      	subs	r3, #3
 8003852:	e000      	b.n	8003856 <NVIC_EncodePriority+0x32>
 8003854:	2300      	movs	r3, #0
 8003856:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003858:	f04f 32ff 	mov.w	r2, #4294967295
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	fa02 f303 	lsl.w	r3, r2, r3
 8003862:	43da      	mvns	r2, r3
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	401a      	ands	r2, r3
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800386c:	f04f 31ff 	mov.w	r1, #4294967295
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	fa01 f303 	lsl.w	r3, r1, r3
 8003876:	43d9      	mvns	r1, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800387c:	4313      	orrs	r3, r2
         );
}
 800387e:	4618      	mov	r0, r3
 8003880:	3724      	adds	r7, #36	; 0x24
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr

0800388a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b082      	sub	sp, #8
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7ff ff4c 	bl	8003730 <__NVIC_SetPriorityGrouping>
}
 8003898:	bf00      	nop
 800389a:	3708      	adds	r7, #8
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	4603      	mov	r3, r0
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
 80038ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038b2:	f7ff ff61 	bl	8003778 <__NVIC_GetPriorityGrouping>
 80038b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	68b9      	ldr	r1, [r7, #8]
 80038bc:	6978      	ldr	r0, [r7, #20]
 80038be:	f7ff ffb1 	bl	8003824 <NVIC_EncodePriority>
 80038c2:	4602      	mov	r2, r0
 80038c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038c8:	4611      	mov	r1, r2
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff ff80 	bl	80037d0 <__NVIC_SetPriority>
}
 80038d0:	bf00      	nop
 80038d2:	3718      	adds	r7, #24
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	4603      	mov	r3, r0
 80038e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7ff ff54 	bl	8003794 <__NVIC_EnableIRQ>
}
 80038ec:	bf00      	nop
 80038ee:	3708      	adds	r7, #8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b089      	sub	sp, #36	; 0x24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038fe:	2300      	movs	r3, #0
 8003900:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003902:	2300      	movs	r3, #0
 8003904:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003906:	2300      	movs	r3, #0
 8003908:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800390a:	2300      	movs	r3, #0
 800390c:	61fb      	str	r3, [r7, #28]
 800390e:	e159      	b.n	8003bc4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003910:	2201      	movs	r2, #1
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	4013      	ands	r3, r2
 8003922:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	429a      	cmp	r2, r3
 800392a:	f040 8148 	bne.w	8003bbe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f003 0303 	and.w	r3, r3, #3
 8003936:	2b01      	cmp	r3, #1
 8003938:	d005      	beq.n	8003946 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003942:	2b02      	cmp	r3, #2
 8003944:	d130      	bne.n	80039a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	2203      	movs	r2, #3
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	43db      	mvns	r3, r3
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	4013      	ands	r3, r2
 800395c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	68da      	ldr	r2, [r3, #12]
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	fa02 f303 	lsl.w	r3, r2, r3
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	4313      	orrs	r3, r2
 800396e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800397c:	2201      	movs	r2, #1
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	fa02 f303 	lsl.w	r3, r2, r3
 8003984:	43db      	mvns	r3, r3
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	4013      	ands	r3, r2
 800398a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	091b      	lsrs	r3, r3, #4
 8003992:	f003 0201 	and.w	r2, r3, #1
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	4313      	orrs	r3, r2
 80039a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f003 0303 	and.w	r3, r3, #3
 80039b0:	2b03      	cmp	r3, #3
 80039b2:	d017      	beq.n	80039e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	2203      	movs	r2, #3
 80039c0:	fa02 f303 	lsl.w	r3, r2, r3
 80039c4:	43db      	mvns	r3, r3
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	4013      	ands	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	689a      	ldr	r2, [r3, #8]
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	fa02 f303 	lsl.w	r3, r2, r3
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	4313      	orrs	r3, r2
 80039dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f003 0303 	and.w	r3, r3, #3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d123      	bne.n	8003a38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	08da      	lsrs	r2, r3, #3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	3208      	adds	r2, #8
 80039f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	f003 0307 	and.w	r3, r3, #7
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	220f      	movs	r2, #15
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	4013      	ands	r3, r2
 8003a12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	691a      	ldr	r2, [r3, #16]
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	f003 0307 	and.w	r3, r3, #7
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	08da      	lsrs	r2, r3, #3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	3208      	adds	r2, #8
 8003a32:	69b9      	ldr	r1, [r7, #24]
 8003a34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	2203      	movs	r2, #3
 8003a44:	fa02 f303 	lsl.w	r3, r2, r3
 8003a48:	43db      	mvns	r3, r3
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f003 0203 	and.w	r2, r3, #3
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 80a2 	beq.w	8003bbe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60fb      	str	r3, [r7, #12]
 8003a7e:	4b57      	ldr	r3, [pc, #348]	; (8003bdc <HAL_GPIO_Init+0x2e8>)
 8003a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a82:	4a56      	ldr	r2, [pc, #344]	; (8003bdc <HAL_GPIO_Init+0x2e8>)
 8003a84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a88:	6453      	str	r3, [r2, #68]	; 0x44
 8003a8a:	4b54      	ldr	r3, [pc, #336]	; (8003bdc <HAL_GPIO_Init+0x2e8>)
 8003a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a92:	60fb      	str	r3, [r7, #12]
 8003a94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a96:	4a52      	ldr	r2, [pc, #328]	; (8003be0 <HAL_GPIO_Init+0x2ec>)
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	089b      	lsrs	r3, r3, #2
 8003a9c:	3302      	adds	r3, #2
 8003a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	220f      	movs	r2, #15
 8003aae:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab2:	43db      	mvns	r3, r3
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a49      	ldr	r2, [pc, #292]	; (8003be4 <HAL_GPIO_Init+0x2f0>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d019      	beq.n	8003af6 <HAL_GPIO_Init+0x202>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a48      	ldr	r2, [pc, #288]	; (8003be8 <HAL_GPIO_Init+0x2f4>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d013      	beq.n	8003af2 <HAL_GPIO_Init+0x1fe>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a47      	ldr	r2, [pc, #284]	; (8003bec <HAL_GPIO_Init+0x2f8>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d00d      	beq.n	8003aee <HAL_GPIO_Init+0x1fa>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a46      	ldr	r2, [pc, #280]	; (8003bf0 <HAL_GPIO_Init+0x2fc>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d007      	beq.n	8003aea <HAL_GPIO_Init+0x1f6>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a45      	ldr	r2, [pc, #276]	; (8003bf4 <HAL_GPIO_Init+0x300>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d101      	bne.n	8003ae6 <HAL_GPIO_Init+0x1f2>
 8003ae2:	2304      	movs	r3, #4
 8003ae4:	e008      	b.n	8003af8 <HAL_GPIO_Init+0x204>
 8003ae6:	2307      	movs	r3, #7
 8003ae8:	e006      	b.n	8003af8 <HAL_GPIO_Init+0x204>
 8003aea:	2303      	movs	r3, #3
 8003aec:	e004      	b.n	8003af8 <HAL_GPIO_Init+0x204>
 8003aee:	2302      	movs	r3, #2
 8003af0:	e002      	b.n	8003af8 <HAL_GPIO_Init+0x204>
 8003af2:	2301      	movs	r3, #1
 8003af4:	e000      	b.n	8003af8 <HAL_GPIO_Init+0x204>
 8003af6:	2300      	movs	r3, #0
 8003af8:	69fa      	ldr	r2, [r7, #28]
 8003afa:	f002 0203 	and.w	r2, r2, #3
 8003afe:	0092      	lsls	r2, r2, #2
 8003b00:	4093      	lsls	r3, r2
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b08:	4935      	ldr	r1, [pc, #212]	; (8003be0 <HAL_GPIO_Init+0x2ec>)
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	089b      	lsrs	r3, r3, #2
 8003b0e:	3302      	adds	r3, #2
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b16:	4b38      	ldr	r3, [pc, #224]	; (8003bf8 <HAL_GPIO_Init+0x304>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	43db      	mvns	r3, r3
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	4013      	ands	r3, r2
 8003b24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b3a:	4a2f      	ldr	r2, [pc, #188]	; (8003bf8 <HAL_GPIO_Init+0x304>)
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b40:	4b2d      	ldr	r3, [pc, #180]	; (8003bf8 <HAL_GPIO_Init+0x304>)
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	43db      	mvns	r3, r3
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d003      	beq.n	8003b64 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b64:	4a24      	ldr	r2, [pc, #144]	; (8003bf8 <HAL_GPIO_Init+0x304>)
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b6a:	4b23      	ldr	r3, [pc, #140]	; (8003bf8 <HAL_GPIO_Init+0x304>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	43db      	mvns	r3, r3
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	4013      	ands	r3, r2
 8003b78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d003      	beq.n	8003b8e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b8e:	4a1a      	ldr	r2, [pc, #104]	; (8003bf8 <HAL_GPIO_Init+0x304>)
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b94:	4b18      	ldr	r3, [pc, #96]	; (8003bf8 <HAL_GPIO_Init+0x304>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	43db      	mvns	r3, r3
 8003b9e:	69ba      	ldr	r2, [r7, #24]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d003      	beq.n	8003bb8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003bb8:	4a0f      	ldr	r2, [pc, #60]	; (8003bf8 <HAL_GPIO_Init+0x304>)
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	61fb      	str	r3, [r7, #28]
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	2b0f      	cmp	r3, #15
 8003bc8:	f67f aea2 	bls.w	8003910 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003bcc:	bf00      	nop
 8003bce:	bf00      	nop
 8003bd0:	3724      	adds	r7, #36	; 0x24
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	40013800 	.word	0x40013800
 8003be4:	40020000 	.word	0x40020000
 8003be8:	40020400 	.word	0x40020400
 8003bec:	40020800 	.word	0x40020800
 8003bf0:	40020c00 	.word	0x40020c00
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	40013c00 	.word	0x40013c00

08003bfc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	460b      	mov	r3, r1
 8003c06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691a      	ldr	r2, [r3, #16]
 8003c0c:	887b      	ldrh	r3, [r7, #2]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d002      	beq.n	8003c1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c14:	2301      	movs	r3, #1
 8003c16:	73fb      	strb	r3, [r7, #15]
 8003c18:	e001      	b.n	8003c1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3714      	adds	r7, #20
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	460b      	mov	r3, r1
 8003c36:	807b      	strh	r3, [r7, #2]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c3c:	787b      	ldrb	r3, [r7, #1]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c42:	887a      	ldrh	r2, [r7, #2]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c48:	e003      	b.n	8003c52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c4a:	887b      	ldrh	r3, [r7, #2]
 8003c4c:	041a      	lsls	r2, r3, #16
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	619a      	str	r2, [r3, #24]
}
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
	...

08003c60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e12b      	b.n	8003eca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d106      	bne.n	8003c8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f7fe fe62 	bl	8002950 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2224      	movs	r2, #36	; 0x24
 8003c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0201 	bic.w	r2, r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cb2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003cc4:	f001 f848 	bl	8004d58 <HAL_RCC_GetPCLK1Freq>
 8003cc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	4a81      	ldr	r2, [pc, #516]	; (8003ed4 <HAL_I2C_Init+0x274>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d807      	bhi.n	8003ce4 <HAL_I2C_Init+0x84>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	4a80      	ldr	r2, [pc, #512]	; (8003ed8 <HAL_I2C_Init+0x278>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	bf94      	ite	ls
 8003cdc:	2301      	movls	r3, #1
 8003cde:	2300      	movhi	r3, #0
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	e006      	b.n	8003cf2 <HAL_I2C_Init+0x92>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4a7d      	ldr	r2, [pc, #500]	; (8003edc <HAL_I2C_Init+0x27c>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	bf94      	ite	ls
 8003cec:	2301      	movls	r3, #1
 8003cee:	2300      	movhi	r3, #0
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e0e7      	b.n	8003eca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	4a78      	ldr	r2, [pc, #480]	; (8003ee0 <HAL_I2C_Init+0x280>)
 8003cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003d02:	0c9b      	lsrs	r3, r3, #18
 8003d04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	6a1b      	ldr	r3, [r3, #32]
 8003d20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	4a6a      	ldr	r2, [pc, #424]	; (8003ed4 <HAL_I2C_Init+0x274>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d802      	bhi.n	8003d34 <HAL_I2C_Init+0xd4>
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	3301      	adds	r3, #1
 8003d32:	e009      	b.n	8003d48 <HAL_I2C_Init+0xe8>
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d3a:	fb02 f303 	mul.w	r3, r2, r3
 8003d3e:	4a69      	ldr	r2, [pc, #420]	; (8003ee4 <HAL_I2C_Init+0x284>)
 8003d40:	fba2 2303 	umull	r2, r3, r2, r3
 8003d44:	099b      	lsrs	r3, r3, #6
 8003d46:	3301      	adds	r3, #1
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	6812      	ldr	r2, [r2, #0]
 8003d4c:	430b      	orrs	r3, r1
 8003d4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	495c      	ldr	r1, [pc, #368]	; (8003ed4 <HAL_I2C_Init+0x274>)
 8003d64:	428b      	cmp	r3, r1
 8003d66:	d819      	bhi.n	8003d9c <HAL_I2C_Init+0x13c>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	1e59      	subs	r1, r3, #1
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d76:	1c59      	adds	r1, r3, #1
 8003d78:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d7c:	400b      	ands	r3, r1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00a      	beq.n	8003d98 <HAL_I2C_Init+0x138>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	1e59      	subs	r1, r3, #1
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d90:	3301      	adds	r3, #1
 8003d92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d96:	e051      	b.n	8003e3c <HAL_I2C_Init+0x1dc>
 8003d98:	2304      	movs	r3, #4
 8003d9a:	e04f      	b.n	8003e3c <HAL_I2C_Init+0x1dc>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d111      	bne.n	8003dc8 <HAL_I2C_Init+0x168>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	1e58      	subs	r0, r3, #1
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6859      	ldr	r1, [r3, #4]
 8003dac:	460b      	mov	r3, r1
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	440b      	add	r3, r1
 8003db2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003db6:	3301      	adds	r3, #1
 8003db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	bf0c      	ite	eq
 8003dc0:	2301      	moveq	r3, #1
 8003dc2:	2300      	movne	r3, #0
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	e012      	b.n	8003dee <HAL_I2C_Init+0x18e>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	1e58      	subs	r0, r3, #1
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6859      	ldr	r1, [r3, #4]
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	440b      	add	r3, r1
 8003dd6:	0099      	lsls	r1, r3, #2
 8003dd8:	440b      	add	r3, r1
 8003dda:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dde:	3301      	adds	r3, #1
 8003de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	bf0c      	ite	eq
 8003de8:	2301      	moveq	r3, #1
 8003dea:	2300      	movne	r3, #0
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <HAL_I2C_Init+0x196>
 8003df2:	2301      	movs	r3, #1
 8003df4:	e022      	b.n	8003e3c <HAL_I2C_Init+0x1dc>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10e      	bne.n	8003e1c <HAL_I2C_Init+0x1bc>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	1e58      	subs	r0, r3, #1
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6859      	ldr	r1, [r3, #4]
 8003e06:	460b      	mov	r3, r1
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	440b      	add	r3, r1
 8003e0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e10:	3301      	adds	r3, #1
 8003e12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e1a:	e00f      	b.n	8003e3c <HAL_I2C_Init+0x1dc>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	1e58      	subs	r0, r3, #1
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6859      	ldr	r1, [r3, #4]
 8003e24:	460b      	mov	r3, r1
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	440b      	add	r3, r1
 8003e2a:	0099      	lsls	r1, r3, #2
 8003e2c:	440b      	add	r3, r1
 8003e2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e32:	3301      	adds	r3, #1
 8003e34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e3c:	6879      	ldr	r1, [r7, #4]
 8003e3e:	6809      	ldr	r1, [r1, #0]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	69da      	ldr	r2, [r3, #28]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	431a      	orrs	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	6911      	ldr	r1, [r2, #16]
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	68d2      	ldr	r2, [r2, #12]
 8003e76:	4311      	orrs	r1, r2
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6812      	ldr	r2, [r2, #0]
 8003e7c:	430b      	orrs	r3, r1
 8003e7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	695a      	ldr	r2, [r3, #20]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	431a      	orrs	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f042 0201 	orr.w	r2, r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	000186a0 	.word	0x000186a0
 8003ed8:	001e847f 	.word	0x001e847f
 8003edc:	003d08ff 	.word	0x003d08ff
 8003ee0:	431bde83 	.word	0x431bde83
 8003ee4:	10624dd3 	.word	0x10624dd3

08003ee8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b088      	sub	sp, #32
 8003eec:	af02      	add	r7, sp, #8
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	607a      	str	r2, [r7, #4]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	817b      	strh	r3, [r7, #10]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003efc:	f7fe fff6 	bl	8002eec <HAL_GetTick>
 8003f00:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b20      	cmp	r3, #32
 8003f0c:	f040 80e0 	bne.w	80040d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	2319      	movs	r3, #25
 8003f16:	2201      	movs	r2, #1
 8003f18:	4970      	ldr	r1, [pc, #448]	; (80040dc <HAL_I2C_Master_Transmit+0x1f4>)
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 f964 	bl	80041e8 <I2C_WaitOnFlagUntilTimeout>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003f26:	2302      	movs	r3, #2
 8003f28:	e0d3      	b.n	80040d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d101      	bne.n	8003f38 <HAL_I2C_Master_Transmit+0x50>
 8003f34:	2302      	movs	r3, #2
 8003f36:	e0cc      	b.n	80040d2 <HAL_I2C_Master_Transmit+0x1ea>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d007      	beq.n	8003f5e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f042 0201 	orr.w	r2, r2, #1
 8003f5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f6c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2221      	movs	r2, #33	; 0x21
 8003f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2210      	movs	r2, #16
 8003f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	893a      	ldrh	r2, [r7, #8]
 8003f8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	4a50      	ldr	r2, [pc, #320]	; (80040e0 <HAL_I2C_Master_Transmit+0x1f8>)
 8003f9e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003fa0:	8979      	ldrh	r1, [r7, #10]
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	6a3a      	ldr	r2, [r7, #32]
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f000 f89c 	bl	80040e4 <I2C_MasterRequestWrite>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e08d      	b.n	80040d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	613b      	str	r3, [r7, #16]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	613b      	str	r3, [r7, #16]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	613b      	str	r3, [r7, #16]
 8003fca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003fcc:	e066      	b.n	800409c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	6a39      	ldr	r1, [r7, #32]
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f000 f9de 	bl	8004394 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00d      	beq.n	8003ffa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	d107      	bne.n	8003ff6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ff4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e06b      	b.n	80040d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffe:	781a      	ldrb	r2, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	1c5a      	adds	r2, r3, #1
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004014:	b29b      	uxth	r3, r3
 8004016:	3b01      	subs	r3, #1
 8004018:	b29a      	uxth	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004022:	3b01      	subs	r3, #1
 8004024:	b29a      	uxth	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	695b      	ldr	r3, [r3, #20]
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b04      	cmp	r3, #4
 8004036:	d11b      	bne.n	8004070 <HAL_I2C_Master_Transmit+0x188>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800403c:	2b00      	cmp	r3, #0
 800403e:	d017      	beq.n	8004070 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004044:	781a      	ldrb	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004050:	1c5a      	adds	r2, r3, #1
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800405a:	b29b      	uxth	r3, r3
 800405c:	3b01      	subs	r3, #1
 800405e:	b29a      	uxth	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004068:	3b01      	subs	r3, #1
 800406a:	b29a      	uxth	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	6a39      	ldr	r1, [r7, #32]
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f000 f9ce 	bl	8004416 <I2C_WaitOnBTFFlagUntilTimeout>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00d      	beq.n	800409c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004084:	2b04      	cmp	r3, #4
 8004086:	d107      	bne.n	8004098 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004096:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e01a      	b.n	80040d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d194      	bne.n	8003fce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2220      	movs	r2, #32
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80040cc:	2300      	movs	r3, #0
 80040ce:	e000      	b.n	80040d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80040d0:	2302      	movs	r3, #2
  }
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3718      	adds	r7, #24
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	00100002 	.word	0x00100002
 80040e0:	ffff0000 	.word	0xffff0000

080040e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b088      	sub	sp, #32
 80040e8:	af02      	add	r7, sp, #8
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	607a      	str	r2, [r7, #4]
 80040ee:	603b      	str	r3, [r7, #0]
 80040f0:	460b      	mov	r3, r1
 80040f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	d006      	beq.n	800410e <I2C_MasterRequestWrite+0x2a>
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d003      	beq.n	800410e <I2C_MasterRequestWrite+0x2a>
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800410c:	d108      	bne.n	8004120 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800411c:	601a      	str	r2, [r3, #0]
 800411e:	e00b      	b.n	8004138 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004124:	2b12      	cmp	r3, #18
 8004126:	d107      	bne.n	8004138 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004136:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 f84f 	bl	80041e8 <I2C_WaitOnFlagUntilTimeout>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00d      	beq.n	800416c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800415e:	d103      	bne.n	8004168 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004166:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e035      	b.n	80041d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004174:	d108      	bne.n	8004188 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004176:	897b      	ldrh	r3, [r7, #10]
 8004178:	b2db      	uxtb	r3, r3
 800417a:	461a      	mov	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004184:	611a      	str	r2, [r3, #16]
 8004186:	e01b      	b.n	80041c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004188:	897b      	ldrh	r3, [r7, #10]
 800418a:	11db      	asrs	r3, r3, #7
 800418c:	b2db      	uxtb	r3, r3
 800418e:	f003 0306 	and.w	r3, r3, #6
 8004192:	b2db      	uxtb	r3, r3
 8004194:	f063 030f 	orn	r3, r3, #15
 8004198:	b2da      	uxtb	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	490e      	ldr	r1, [pc, #56]	; (80041e0 <I2C_MasterRequestWrite+0xfc>)
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f000 f875 	bl	8004296 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e010      	b.n	80041d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80041b6:	897b      	ldrh	r3, [r7, #10]
 80041b8:	b2da      	uxtb	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	4907      	ldr	r1, [pc, #28]	; (80041e4 <I2C_MasterRequestWrite+0x100>)
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 f865 	bl	8004296 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e000      	b.n	80041d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3718      	adds	r7, #24
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	00010008 	.word	0x00010008
 80041e4:	00010002 	.word	0x00010002

080041e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	603b      	str	r3, [r7, #0]
 80041f4:	4613      	mov	r3, r2
 80041f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041f8:	e025      	b.n	8004246 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004200:	d021      	beq.n	8004246 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004202:	f7fe fe73 	bl	8002eec <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	429a      	cmp	r2, r3
 8004210:	d302      	bcc.n	8004218 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d116      	bne.n	8004246 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2220      	movs	r2, #32
 8004222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	f043 0220 	orr.w	r2, r3, #32
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e023      	b.n	800428e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	0c1b      	lsrs	r3, r3, #16
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b01      	cmp	r3, #1
 800424e:	d10d      	bne.n	800426c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	43da      	mvns	r2, r3
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	4013      	ands	r3, r2
 800425c:	b29b      	uxth	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	bf0c      	ite	eq
 8004262:	2301      	moveq	r3, #1
 8004264:	2300      	movne	r3, #0
 8004266:	b2db      	uxtb	r3, r3
 8004268:	461a      	mov	r2, r3
 800426a:	e00c      	b.n	8004286 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	43da      	mvns	r2, r3
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	4013      	ands	r3, r2
 8004278:	b29b      	uxth	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	bf0c      	ite	eq
 800427e:	2301      	moveq	r3, #1
 8004280:	2300      	movne	r3, #0
 8004282:	b2db      	uxtb	r3, r3
 8004284:	461a      	mov	r2, r3
 8004286:	79fb      	ldrb	r3, [r7, #7]
 8004288:	429a      	cmp	r2, r3
 800428a:	d0b6      	beq.n	80041fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b084      	sub	sp, #16
 800429a:	af00      	add	r7, sp, #0
 800429c:	60f8      	str	r0, [r7, #12]
 800429e:	60b9      	str	r1, [r7, #8]
 80042a0:	607a      	str	r2, [r7, #4]
 80042a2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042a4:	e051      	b.n	800434a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042b4:	d123      	bne.n	80042fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042c4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042ce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2220      	movs	r2, #32
 80042da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ea:	f043 0204 	orr.w	r2, r3, #4
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e046      	b.n	800438c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004304:	d021      	beq.n	800434a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004306:	f7fe fdf1 	bl	8002eec <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	429a      	cmp	r2, r3
 8004314:	d302      	bcc.n	800431c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d116      	bne.n	800434a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2220      	movs	r2, #32
 8004326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	f043 0220 	orr.w	r2, r3, #32
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e020      	b.n	800438c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	0c1b      	lsrs	r3, r3, #16
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b01      	cmp	r3, #1
 8004352:	d10c      	bne.n	800436e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	43da      	mvns	r2, r3
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	4013      	ands	r3, r2
 8004360:	b29b      	uxth	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	bf14      	ite	ne
 8004366:	2301      	movne	r3, #1
 8004368:	2300      	moveq	r3, #0
 800436a:	b2db      	uxtb	r3, r3
 800436c:	e00b      	b.n	8004386 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	43da      	mvns	r2, r3
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	4013      	ands	r3, r2
 800437a:	b29b      	uxth	r3, r3
 800437c:	2b00      	cmp	r3, #0
 800437e:	bf14      	ite	ne
 8004380:	2301      	movne	r3, #1
 8004382:	2300      	moveq	r3, #0
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d18d      	bne.n	80042a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043a0:	e02d      	b.n	80043fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f000 f878 	bl	8004498 <I2C_IsAcknowledgeFailed>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e02d      	b.n	800440e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b8:	d021      	beq.n	80043fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ba:	f7fe fd97 	bl	8002eec <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	68ba      	ldr	r2, [r7, #8]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d302      	bcc.n	80043d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d116      	bne.n	80043fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2220      	movs	r2, #32
 80043da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ea:	f043 0220 	orr.w	r2, r3, #32
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e007      	b.n	800440e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004408:	2b80      	cmp	r3, #128	; 0x80
 800440a:	d1ca      	bne.n	80043a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b084      	sub	sp, #16
 800441a:	af00      	add	r7, sp, #0
 800441c:	60f8      	str	r0, [r7, #12]
 800441e:	60b9      	str	r1, [r7, #8]
 8004420:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004422:	e02d      	b.n	8004480 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f000 f837 	bl	8004498 <I2C_IsAcknowledgeFailed>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d001      	beq.n	8004434 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e02d      	b.n	8004490 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800443a:	d021      	beq.n	8004480 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800443c:	f7fe fd56 	bl	8002eec <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	68ba      	ldr	r2, [r7, #8]
 8004448:	429a      	cmp	r2, r3
 800444a:	d302      	bcc.n	8004452 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d116      	bne.n	8004480 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2220      	movs	r2, #32
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446c:	f043 0220 	orr.w	r2, r3, #32
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e007      	b.n	8004490 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	f003 0304 	and.w	r3, r3, #4
 800448a:	2b04      	cmp	r3, #4
 800448c:	d1ca      	bne.n	8004424 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044ae:	d11b      	bne.n	80044e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d4:	f043 0204 	orr.w	r2, r3, #4
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e000      	b.n	80044ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
	...

080044f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b086      	sub	sp, #24
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e267      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b00      	cmp	r3, #0
 8004514:	d075      	beq.n	8004602 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004516:	4b88      	ldr	r3, [pc, #544]	; (8004738 <HAL_RCC_OscConfig+0x240>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f003 030c 	and.w	r3, r3, #12
 800451e:	2b04      	cmp	r3, #4
 8004520:	d00c      	beq.n	800453c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004522:	4b85      	ldr	r3, [pc, #532]	; (8004738 <HAL_RCC_OscConfig+0x240>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800452a:	2b08      	cmp	r3, #8
 800452c:	d112      	bne.n	8004554 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800452e:	4b82      	ldr	r3, [pc, #520]	; (8004738 <HAL_RCC_OscConfig+0x240>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004536:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800453a:	d10b      	bne.n	8004554 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800453c:	4b7e      	ldr	r3, [pc, #504]	; (8004738 <HAL_RCC_OscConfig+0x240>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d05b      	beq.n	8004600 <HAL_RCC_OscConfig+0x108>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d157      	bne.n	8004600 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e242      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800455c:	d106      	bne.n	800456c <HAL_RCC_OscConfig+0x74>
 800455e:	4b76      	ldr	r3, [pc, #472]	; (8004738 <HAL_RCC_OscConfig+0x240>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a75      	ldr	r2, [pc, #468]	; (8004738 <HAL_RCC_OscConfig+0x240>)
 8004564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004568:	6013      	str	r3, [r2, #0]
 800456a:	e01d      	b.n	80045a8 <HAL_RCC_OscConfig+0xb0>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004574:	d10c      	bne.n	8004590 <HAL_RCC_OscConfig+0x98>
 8004576:	4b70      	ldr	r3, [pc, #448]	; (8004738 <HAL_RCC_OscConfig+0x240>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a6f      	ldr	r2, [pc, #444]	; (8004738 <HAL_RCC_OscConfig+0x240>)
 800457c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004580:	6013      	str	r3, [r2, #0]
 8004582:	4b6d      	ldr	r3, [pc, #436]	; (8004738 <HAL_RCC_OscConfig+0x240>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a6c      	ldr	r2, [pc, #432]	; (8004738 <HAL_RCC_OscConfig+0x240>)
 8004588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800458c:	6013      	str	r3, [r2, #0]
 800458e:	e00b      	b.n	80045a8 <HAL_RCC_OscConfig+0xb0>
 8004590:	4b69      	ldr	r3, [pc, #420]	; (8004738 <HAL_RCC_OscConfig+0x240>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a68      	ldr	r2, [pc, #416]	; (8004738 <HAL_RCC_OscConfig+0x240>)
 8004596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800459a:	6013      	str	r3, [r2, #0]
 800459c:	4b66      	ldr	r3, [pc, #408]	; (8004738 <HAL_RCC_OscConfig+0x240>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a65      	ldr	r2, [pc, #404]	; (8004738 <HAL_RCC_OscConfig+0x240>)
 80045a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d013      	beq.n	80045d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b0:	f7fe fc9c 	bl	8002eec <HAL_GetTick>
 80045b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045b8:	f7fe fc98 	bl	8002eec <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b64      	cmp	r3, #100	; 0x64
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e207      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ca:	4b5b      	ldr	r3, [pc, #364]	; (8004738 <HAL_RCC_OscConfig+0x240>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d0f0      	beq.n	80045b8 <HAL_RCC_OscConfig+0xc0>
 80045d6:	e014      	b.n	8004602 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d8:	f7fe fc88 	bl	8002eec <HAL_GetTick>
 80045dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045de:	e008      	b.n	80045f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045e0:	f7fe fc84 	bl	8002eec <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b64      	cmp	r3, #100	; 0x64
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e1f3      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045f2:	4b51      	ldr	r3, [pc, #324]	; (8004738 <HAL_RCC_OscConfig+0x240>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1f0      	bne.n	80045e0 <HAL_RCC_OscConfig+0xe8>
 80045fe:	e000      	b.n	8004602 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d063      	beq.n	80046d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800460e:	4b4a      	ldr	r3, [pc, #296]	; (8004738 <HAL_RCC_OscConfig+0x240>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f003 030c 	and.w	r3, r3, #12
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00b      	beq.n	8004632 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800461a:	4b47      	ldr	r3, [pc, #284]	; (8004738 <HAL_RCC_OscConfig+0x240>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004622:	2b08      	cmp	r3, #8
 8004624:	d11c      	bne.n	8004660 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004626:	4b44      	ldr	r3, [pc, #272]	; (8004738 <HAL_RCC_OscConfig+0x240>)
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d116      	bne.n	8004660 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004632:	4b41      	ldr	r3, [pc, #260]	; (8004738 <HAL_RCC_OscConfig+0x240>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d005      	beq.n	800464a <HAL_RCC_OscConfig+0x152>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d001      	beq.n	800464a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e1c7      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800464a:	4b3b      	ldr	r3, [pc, #236]	; (8004738 <HAL_RCC_OscConfig+0x240>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	4937      	ldr	r1, [pc, #220]	; (8004738 <HAL_RCC_OscConfig+0x240>)
 800465a:	4313      	orrs	r3, r2
 800465c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800465e:	e03a      	b.n	80046d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d020      	beq.n	80046aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004668:	4b34      	ldr	r3, [pc, #208]	; (800473c <HAL_RCC_OscConfig+0x244>)
 800466a:	2201      	movs	r2, #1
 800466c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800466e:	f7fe fc3d 	bl	8002eec <HAL_GetTick>
 8004672:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004674:	e008      	b.n	8004688 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004676:	f7fe fc39 	bl	8002eec <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	2b02      	cmp	r3, #2
 8004682:	d901      	bls.n	8004688 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e1a8      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004688:	4b2b      	ldr	r3, [pc, #172]	; (8004738 <HAL_RCC_OscConfig+0x240>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d0f0      	beq.n	8004676 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004694:	4b28      	ldr	r3, [pc, #160]	; (8004738 <HAL_RCC_OscConfig+0x240>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	00db      	lsls	r3, r3, #3
 80046a2:	4925      	ldr	r1, [pc, #148]	; (8004738 <HAL_RCC_OscConfig+0x240>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	600b      	str	r3, [r1, #0]
 80046a8:	e015      	b.n	80046d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046aa:	4b24      	ldr	r3, [pc, #144]	; (800473c <HAL_RCC_OscConfig+0x244>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b0:	f7fe fc1c 	bl	8002eec <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046b6:	e008      	b.n	80046ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046b8:	f7fe fc18 	bl	8002eec <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e187      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ca:	4b1b      	ldr	r3, [pc, #108]	; (8004738 <HAL_RCC_OscConfig+0x240>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1f0      	bne.n	80046b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0308 	and.w	r3, r3, #8
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d036      	beq.n	8004750 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d016      	beq.n	8004718 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046ea:	4b15      	ldr	r3, [pc, #84]	; (8004740 <HAL_RCC_OscConfig+0x248>)
 80046ec:	2201      	movs	r2, #1
 80046ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f0:	f7fe fbfc 	bl	8002eec <HAL_GetTick>
 80046f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046f6:	e008      	b.n	800470a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046f8:	f7fe fbf8 	bl	8002eec <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e167      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800470a:	4b0b      	ldr	r3, [pc, #44]	; (8004738 <HAL_RCC_OscConfig+0x240>)
 800470c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d0f0      	beq.n	80046f8 <HAL_RCC_OscConfig+0x200>
 8004716:	e01b      	b.n	8004750 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004718:	4b09      	ldr	r3, [pc, #36]	; (8004740 <HAL_RCC_OscConfig+0x248>)
 800471a:	2200      	movs	r2, #0
 800471c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800471e:	f7fe fbe5 	bl	8002eec <HAL_GetTick>
 8004722:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004724:	e00e      	b.n	8004744 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004726:	f7fe fbe1 	bl	8002eec <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	2b02      	cmp	r3, #2
 8004732:	d907      	bls.n	8004744 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e150      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
 8004738:	40023800 	.word	0x40023800
 800473c:	42470000 	.word	0x42470000
 8004740:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004744:	4b88      	ldr	r3, [pc, #544]	; (8004968 <HAL_RCC_OscConfig+0x470>)
 8004746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1ea      	bne.n	8004726 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0304 	and.w	r3, r3, #4
 8004758:	2b00      	cmp	r3, #0
 800475a:	f000 8097 	beq.w	800488c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800475e:	2300      	movs	r3, #0
 8004760:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004762:	4b81      	ldr	r3, [pc, #516]	; (8004968 <HAL_RCC_OscConfig+0x470>)
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10f      	bne.n	800478e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800476e:	2300      	movs	r3, #0
 8004770:	60bb      	str	r3, [r7, #8]
 8004772:	4b7d      	ldr	r3, [pc, #500]	; (8004968 <HAL_RCC_OscConfig+0x470>)
 8004774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004776:	4a7c      	ldr	r2, [pc, #496]	; (8004968 <HAL_RCC_OscConfig+0x470>)
 8004778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800477c:	6413      	str	r3, [r2, #64]	; 0x40
 800477e:	4b7a      	ldr	r3, [pc, #488]	; (8004968 <HAL_RCC_OscConfig+0x470>)
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004786:	60bb      	str	r3, [r7, #8]
 8004788:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800478a:	2301      	movs	r3, #1
 800478c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800478e:	4b77      	ldr	r3, [pc, #476]	; (800496c <HAL_RCC_OscConfig+0x474>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004796:	2b00      	cmp	r3, #0
 8004798:	d118      	bne.n	80047cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800479a:	4b74      	ldr	r3, [pc, #464]	; (800496c <HAL_RCC_OscConfig+0x474>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a73      	ldr	r2, [pc, #460]	; (800496c <HAL_RCC_OscConfig+0x474>)
 80047a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047a6:	f7fe fba1 	bl	8002eec <HAL_GetTick>
 80047aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ac:	e008      	b.n	80047c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ae:	f7fe fb9d 	bl	8002eec <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d901      	bls.n	80047c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e10c      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047c0:	4b6a      	ldr	r3, [pc, #424]	; (800496c <HAL_RCC_OscConfig+0x474>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d0f0      	beq.n	80047ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d106      	bne.n	80047e2 <HAL_RCC_OscConfig+0x2ea>
 80047d4:	4b64      	ldr	r3, [pc, #400]	; (8004968 <HAL_RCC_OscConfig+0x470>)
 80047d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d8:	4a63      	ldr	r2, [pc, #396]	; (8004968 <HAL_RCC_OscConfig+0x470>)
 80047da:	f043 0301 	orr.w	r3, r3, #1
 80047de:	6713      	str	r3, [r2, #112]	; 0x70
 80047e0:	e01c      	b.n	800481c <HAL_RCC_OscConfig+0x324>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	2b05      	cmp	r3, #5
 80047e8:	d10c      	bne.n	8004804 <HAL_RCC_OscConfig+0x30c>
 80047ea:	4b5f      	ldr	r3, [pc, #380]	; (8004968 <HAL_RCC_OscConfig+0x470>)
 80047ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ee:	4a5e      	ldr	r2, [pc, #376]	; (8004968 <HAL_RCC_OscConfig+0x470>)
 80047f0:	f043 0304 	orr.w	r3, r3, #4
 80047f4:	6713      	str	r3, [r2, #112]	; 0x70
 80047f6:	4b5c      	ldr	r3, [pc, #368]	; (8004968 <HAL_RCC_OscConfig+0x470>)
 80047f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fa:	4a5b      	ldr	r2, [pc, #364]	; (8004968 <HAL_RCC_OscConfig+0x470>)
 80047fc:	f043 0301 	orr.w	r3, r3, #1
 8004800:	6713      	str	r3, [r2, #112]	; 0x70
 8004802:	e00b      	b.n	800481c <HAL_RCC_OscConfig+0x324>
 8004804:	4b58      	ldr	r3, [pc, #352]	; (8004968 <HAL_RCC_OscConfig+0x470>)
 8004806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004808:	4a57      	ldr	r2, [pc, #348]	; (8004968 <HAL_RCC_OscConfig+0x470>)
 800480a:	f023 0301 	bic.w	r3, r3, #1
 800480e:	6713      	str	r3, [r2, #112]	; 0x70
 8004810:	4b55      	ldr	r3, [pc, #340]	; (8004968 <HAL_RCC_OscConfig+0x470>)
 8004812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004814:	4a54      	ldr	r2, [pc, #336]	; (8004968 <HAL_RCC_OscConfig+0x470>)
 8004816:	f023 0304 	bic.w	r3, r3, #4
 800481a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d015      	beq.n	8004850 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004824:	f7fe fb62 	bl	8002eec <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800482a:	e00a      	b.n	8004842 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800482c:	f7fe fb5e 	bl	8002eec <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	f241 3288 	movw	r2, #5000	; 0x1388
 800483a:	4293      	cmp	r3, r2
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e0cb      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004842:	4b49      	ldr	r3, [pc, #292]	; (8004968 <HAL_RCC_OscConfig+0x470>)
 8004844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d0ee      	beq.n	800482c <HAL_RCC_OscConfig+0x334>
 800484e:	e014      	b.n	800487a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004850:	f7fe fb4c 	bl	8002eec <HAL_GetTick>
 8004854:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004856:	e00a      	b.n	800486e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004858:	f7fe fb48 	bl	8002eec <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	f241 3288 	movw	r2, #5000	; 0x1388
 8004866:	4293      	cmp	r3, r2
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e0b5      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800486e:	4b3e      	ldr	r3, [pc, #248]	; (8004968 <HAL_RCC_OscConfig+0x470>)
 8004870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1ee      	bne.n	8004858 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800487a:	7dfb      	ldrb	r3, [r7, #23]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d105      	bne.n	800488c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004880:	4b39      	ldr	r3, [pc, #228]	; (8004968 <HAL_RCC_OscConfig+0x470>)
 8004882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004884:	4a38      	ldr	r2, [pc, #224]	; (8004968 <HAL_RCC_OscConfig+0x470>)
 8004886:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800488a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 80a1 	beq.w	80049d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004896:	4b34      	ldr	r3, [pc, #208]	; (8004968 <HAL_RCC_OscConfig+0x470>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f003 030c 	and.w	r3, r3, #12
 800489e:	2b08      	cmp	r3, #8
 80048a0:	d05c      	beq.n	800495c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d141      	bne.n	800492e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048aa:	4b31      	ldr	r3, [pc, #196]	; (8004970 <HAL_RCC_OscConfig+0x478>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b0:	f7fe fb1c 	bl	8002eec <HAL_GetTick>
 80048b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048b6:	e008      	b.n	80048ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048b8:	f7fe fb18 	bl	8002eec <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e087      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ca:	4b27      	ldr	r3, [pc, #156]	; (8004968 <HAL_RCC_OscConfig+0x470>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1f0      	bne.n	80048b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	69da      	ldr	r2, [r3, #28]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	431a      	orrs	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e4:	019b      	lsls	r3, r3, #6
 80048e6:	431a      	orrs	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ec:	085b      	lsrs	r3, r3, #1
 80048ee:	3b01      	subs	r3, #1
 80048f0:	041b      	lsls	r3, r3, #16
 80048f2:	431a      	orrs	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f8:	061b      	lsls	r3, r3, #24
 80048fa:	491b      	ldr	r1, [pc, #108]	; (8004968 <HAL_RCC_OscConfig+0x470>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004900:	4b1b      	ldr	r3, [pc, #108]	; (8004970 <HAL_RCC_OscConfig+0x478>)
 8004902:	2201      	movs	r2, #1
 8004904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004906:	f7fe faf1 	bl	8002eec <HAL_GetTick>
 800490a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800490c:	e008      	b.n	8004920 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800490e:	f7fe faed 	bl	8002eec <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d901      	bls.n	8004920 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e05c      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004920:	4b11      	ldr	r3, [pc, #68]	; (8004968 <HAL_RCC_OscConfig+0x470>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d0f0      	beq.n	800490e <HAL_RCC_OscConfig+0x416>
 800492c:	e054      	b.n	80049d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800492e:	4b10      	ldr	r3, [pc, #64]	; (8004970 <HAL_RCC_OscConfig+0x478>)
 8004930:	2200      	movs	r2, #0
 8004932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004934:	f7fe fada 	bl	8002eec <HAL_GetTick>
 8004938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800493a:	e008      	b.n	800494e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800493c:	f7fe fad6 	bl	8002eec <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b02      	cmp	r3, #2
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e045      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800494e:	4b06      	ldr	r3, [pc, #24]	; (8004968 <HAL_RCC_OscConfig+0x470>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1f0      	bne.n	800493c <HAL_RCC_OscConfig+0x444>
 800495a:	e03d      	b.n	80049d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d107      	bne.n	8004974 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e038      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
 8004968:	40023800 	.word	0x40023800
 800496c:	40007000 	.word	0x40007000
 8004970:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004974:	4b1b      	ldr	r3, [pc, #108]	; (80049e4 <HAL_RCC_OscConfig+0x4ec>)
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d028      	beq.n	80049d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800498c:	429a      	cmp	r2, r3
 800498e:	d121      	bne.n	80049d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800499a:	429a      	cmp	r2, r3
 800499c:	d11a      	bne.n	80049d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049a4:	4013      	ands	r3, r2
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d111      	bne.n	80049d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ba:	085b      	lsrs	r3, r3, #1
 80049bc:	3b01      	subs	r3, #1
 80049be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d107      	bne.n	80049d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d001      	beq.n	80049d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e000      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3718      	adds	r7, #24
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	40023800 	.word	0x40023800

080049e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d101      	bne.n	80049fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e0cc      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049fc:	4b68      	ldr	r3, [pc, #416]	; (8004ba0 <HAL_RCC_ClockConfig+0x1b8>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0307 	and.w	r3, r3, #7
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d90c      	bls.n	8004a24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a0a:	4b65      	ldr	r3, [pc, #404]	; (8004ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	b2d2      	uxtb	r2, r2
 8004a10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a12:	4b63      	ldr	r3, [pc, #396]	; (8004ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0307 	and.w	r3, r3, #7
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d001      	beq.n	8004a24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e0b8      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d020      	beq.n	8004a72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0304 	and.w	r3, r3, #4
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d005      	beq.n	8004a48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a3c:	4b59      	ldr	r3, [pc, #356]	; (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	4a58      	ldr	r2, [pc, #352]	; (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0308 	and.w	r3, r3, #8
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d005      	beq.n	8004a60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a54:	4b53      	ldr	r3, [pc, #332]	; (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	4a52      	ldr	r2, [pc, #328]	; (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a60:	4b50      	ldr	r3, [pc, #320]	; (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	494d      	ldr	r1, [pc, #308]	; (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d044      	beq.n	8004b08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d107      	bne.n	8004a96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a86:	4b47      	ldr	r3, [pc, #284]	; (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d119      	bne.n	8004ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e07f      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d003      	beq.n	8004aa6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004aa2:	2b03      	cmp	r3, #3
 8004aa4:	d107      	bne.n	8004ab6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aa6:	4b3f      	ldr	r3, [pc, #252]	; (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d109      	bne.n	8004ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e06f      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ab6:	4b3b      	ldr	r3, [pc, #236]	; (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0302 	and.w	r3, r3, #2
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e067      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ac6:	4b37      	ldr	r3, [pc, #220]	; (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f023 0203 	bic.w	r2, r3, #3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	4934      	ldr	r1, [pc, #208]	; (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ad8:	f7fe fa08 	bl	8002eec <HAL_GetTick>
 8004adc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ade:	e00a      	b.n	8004af6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ae0:	f7fe fa04 	bl	8002eec <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e04f      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004af6:	4b2b      	ldr	r3, [pc, #172]	; (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 020c 	and.w	r2, r3, #12
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d1eb      	bne.n	8004ae0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b08:	4b25      	ldr	r3, [pc, #148]	; (8004ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0307 	and.w	r3, r3, #7
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d20c      	bcs.n	8004b30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b16:	4b22      	ldr	r3, [pc, #136]	; (8004ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	b2d2      	uxtb	r2, r2
 8004b1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b1e:	4b20      	ldr	r3, [pc, #128]	; (8004ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0307 	and.w	r3, r3, #7
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d001      	beq.n	8004b30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e032      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0304 	and.w	r3, r3, #4
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d008      	beq.n	8004b4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b3c:	4b19      	ldr	r3, [pc, #100]	; (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	4916      	ldr	r1, [pc, #88]	; (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0308 	and.w	r3, r3, #8
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d009      	beq.n	8004b6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b5a:	4b12      	ldr	r3, [pc, #72]	; (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	490e      	ldr	r1, [pc, #56]	; (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b6e:	f000 f821 	bl	8004bb4 <HAL_RCC_GetSysClockFreq>
 8004b72:	4602      	mov	r2, r0
 8004b74:	4b0b      	ldr	r3, [pc, #44]	; (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	091b      	lsrs	r3, r3, #4
 8004b7a:	f003 030f 	and.w	r3, r3, #15
 8004b7e:	490a      	ldr	r1, [pc, #40]	; (8004ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8004b80:	5ccb      	ldrb	r3, [r1, r3]
 8004b82:	fa22 f303 	lsr.w	r3, r2, r3
 8004b86:	4a09      	ldr	r2, [pc, #36]	; (8004bac <HAL_RCC_ClockConfig+0x1c4>)
 8004b88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b8a:	4b09      	ldr	r3, [pc, #36]	; (8004bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7fd ffd8 	bl	8002b44 <HAL_InitTick>

  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	40023c00 	.word	0x40023c00
 8004ba4:	40023800 	.word	0x40023800
 8004ba8:	0800d434 	.word	0x0800d434
 8004bac:	20000010 	.word	0x20000010
 8004bb0:	20000014 	.word	0x20000014

08004bb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bb8:	b090      	sub	sp, #64	; 0x40
 8004bba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	637b      	str	r3, [r7, #52]	; 0x34
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bcc:	4b59      	ldr	r3, [pc, #356]	; (8004d34 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f003 030c 	and.w	r3, r3, #12
 8004bd4:	2b08      	cmp	r3, #8
 8004bd6:	d00d      	beq.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x40>
 8004bd8:	2b08      	cmp	r3, #8
 8004bda:	f200 80a1 	bhi.w	8004d20 <HAL_RCC_GetSysClockFreq+0x16c>
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d002      	beq.n	8004be8 <HAL_RCC_GetSysClockFreq+0x34>
 8004be2:	2b04      	cmp	r3, #4
 8004be4:	d003      	beq.n	8004bee <HAL_RCC_GetSysClockFreq+0x3a>
 8004be6:	e09b      	b.n	8004d20 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004be8:	4b53      	ldr	r3, [pc, #332]	; (8004d38 <HAL_RCC_GetSysClockFreq+0x184>)
 8004bea:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004bec:	e09b      	b.n	8004d26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bee:	4b53      	ldr	r3, [pc, #332]	; (8004d3c <HAL_RCC_GetSysClockFreq+0x188>)
 8004bf0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004bf2:	e098      	b.n	8004d26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bf4:	4b4f      	ldr	r3, [pc, #316]	; (8004d34 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bfc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bfe:	4b4d      	ldr	r3, [pc, #308]	; (8004d34 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d028      	beq.n	8004c5c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c0a:	4b4a      	ldr	r3, [pc, #296]	; (8004d34 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	099b      	lsrs	r3, r3, #6
 8004c10:	2200      	movs	r2, #0
 8004c12:	623b      	str	r3, [r7, #32]
 8004c14:	627a      	str	r2, [r7, #36]	; 0x24
 8004c16:	6a3b      	ldr	r3, [r7, #32]
 8004c18:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	4b47      	ldr	r3, [pc, #284]	; (8004d3c <HAL_RCC_GetSysClockFreq+0x188>)
 8004c20:	fb03 f201 	mul.w	r2, r3, r1
 8004c24:	2300      	movs	r3, #0
 8004c26:	fb00 f303 	mul.w	r3, r0, r3
 8004c2a:	4413      	add	r3, r2
 8004c2c:	4a43      	ldr	r2, [pc, #268]	; (8004d3c <HAL_RCC_GetSysClockFreq+0x188>)
 8004c2e:	fba0 1202 	umull	r1, r2, r0, r2
 8004c32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c34:	460a      	mov	r2, r1
 8004c36:	62ba      	str	r2, [r7, #40]	; 0x28
 8004c38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c3a:	4413      	add	r3, r2
 8004c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c40:	2200      	movs	r2, #0
 8004c42:	61bb      	str	r3, [r7, #24]
 8004c44:	61fa      	str	r2, [r7, #28]
 8004c46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c4a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004c4e:	f7fc f823 	bl	8000c98 <__aeabi_uldivmod>
 8004c52:	4602      	mov	r2, r0
 8004c54:	460b      	mov	r3, r1
 8004c56:	4613      	mov	r3, r2
 8004c58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c5a:	e053      	b.n	8004d04 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c5c:	4b35      	ldr	r3, [pc, #212]	; (8004d34 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	099b      	lsrs	r3, r3, #6
 8004c62:	2200      	movs	r2, #0
 8004c64:	613b      	str	r3, [r7, #16]
 8004c66:	617a      	str	r2, [r7, #20]
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004c6e:	f04f 0b00 	mov.w	fp, #0
 8004c72:	4652      	mov	r2, sl
 8004c74:	465b      	mov	r3, fp
 8004c76:	f04f 0000 	mov.w	r0, #0
 8004c7a:	f04f 0100 	mov.w	r1, #0
 8004c7e:	0159      	lsls	r1, r3, #5
 8004c80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c84:	0150      	lsls	r0, r2, #5
 8004c86:	4602      	mov	r2, r0
 8004c88:	460b      	mov	r3, r1
 8004c8a:	ebb2 080a 	subs.w	r8, r2, sl
 8004c8e:	eb63 090b 	sbc.w	r9, r3, fp
 8004c92:	f04f 0200 	mov.w	r2, #0
 8004c96:	f04f 0300 	mov.w	r3, #0
 8004c9a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004c9e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004ca2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004ca6:	ebb2 0408 	subs.w	r4, r2, r8
 8004caa:	eb63 0509 	sbc.w	r5, r3, r9
 8004cae:	f04f 0200 	mov.w	r2, #0
 8004cb2:	f04f 0300 	mov.w	r3, #0
 8004cb6:	00eb      	lsls	r3, r5, #3
 8004cb8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cbc:	00e2      	lsls	r2, r4, #3
 8004cbe:	4614      	mov	r4, r2
 8004cc0:	461d      	mov	r5, r3
 8004cc2:	eb14 030a 	adds.w	r3, r4, sl
 8004cc6:	603b      	str	r3, [r7, #0]
 8004cc8:	eb45 030b 	adc.w	r3, r5, fp
 8004ccc:	607b      	str	r3, [r7, #4]
 8004cce:	f04f 0200 	mov.w	r2, #0
 8004cd2:	f04f 0300 	mov.w	r3, #0
 8004cd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004cda:	4629      	mov	r1, r5
 8004cdc:	028b      	lsls	r3, r1, #10
 8004cde:	4621      	mov	r1, r4
 8004ce0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ce4:	4621      	mov	r1, r4
 8004ce6:	028a      	lsls	r2, r1, #10
 8004ce8:	4610      	mov	r0, r2
 8004cea:	4619      	mov	r1, r3
 8004cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cee:	2200      	movs	r2, #0
 8004cf0:	60bb      	str	r3, [r7, #8]
 8004cf2:	60fa      	str	r2, [r7, #12]
 8004cf4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cf8:	f7fb ffce 	bl	8000c98 <__aeabi_uldivmod>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	460b      	mov	r3, r1
 8004d00:	4613      	mov	r3, r2
 8004d02:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d04:	4b0b      	ldr	r3, [pc, #44]	; (8004d34 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	0c1b      	lsrs	r3, r3, #16
 8004d0a:	f003 0303 	and.w	r3, r3, #3
 8004d0e:	3301      	adds	r3, #1
 8004d10:	005b      	lsls	r3, r3, #1
 8004d12:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004d14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d1c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d1e:	e002      	b.n	8004d26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d20:	4b05      	ldr	r3, [pc, #20]	; (8004d38 <HAL_RCC_GetSysClockFreq+0x184>)
 8004d22:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3740      	adds	r7, #64	; 0x40
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d32:	bf00      	nop
 8004d34:	40023800 	.word	0x40023800
 8004d38:	00f42400 	.word	0x00f42400
 8004d3c:	017d7840 	.word	0x017d7840

08004d40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d40:	b480      	push	{r7}
 8004d42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d44:	4b03      	ldr	r3, [pc, #12]	; (8004d54 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d46:	681b      	ldr	r3, [r3, #0]
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	20000010 	.word	0x20000010

08004d58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d5c:	f7ff fff0 	bl	8004d40 <HAL_RCC_GetHCLKFreq>
 8004d60:	4602      	mov	r2, r0
 8004d62:	4b05      	ldr	r3, [pc, #20]	; (8004d78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	0a9b      	lsrs	r3, r3, #10
 8004d68:	f003 0307 	and.w	r3, r3, #7
 8004d6c:	4903      	ldr	r1, [pc, #12]	; (8004d7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d6e:	5ccb      	ldrb	r3, [r1, r3]
 8004d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	40023800 	.word	0x40023800
 8004d7c:	0800d444 	.word	0x0800d444

08004d80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d84:	f7ff ffdc 	bl	8004d40 <HAL_RCC_GetHCLKFreq>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	4b05      	ldr	r3, [pc, #20]	; (8004da0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	0b5b      	lsrs	r3, r3, #13
 8004d90:	f003 0307 	and.w	r3, r3, #7
 8004d94:	4903      	ldr	r1, [pc, #12]	; (8004da4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d96:	5ccb      	ldrb	r3, [r1, r3]
 8004d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	40023800 	.word	0x40023800
 8004da4:	0800d444 	.word	0x0800d444

08004da8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	220f      	movs	r2, #15
 8004db6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004db8:	4b12      	ldr	r3, [pc, #72]	; (8004e04 <HAL_RCC_GetClockConfig+0x5c>)
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f003 0203 	and.w	r2, r3, #3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004dc4:	4b0f      	ldr	r3, [pc, #60]	; (8004e04 <HAL_RCC_GetClockConfig+0x5c>)
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004dd0:	4b0c      	ldr	r3, [pc, #48]	; (8004e04 <HAL_RCC_GetClockConfig+0x5c>)
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004ddc:	4b09      	ldr	r3, [pc, #36]	; (8004e04 <HAL_RCC_GetClockConfig+0x5c>)
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	08db      	lsrs	r3, r3, #3
 8004de2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004dea:	4b07      	ldr	r3, [pc, #28]	; (8004e08 <HAL_RCC_GetClockConfig+0x60>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0207 	and.w	r2, r3, #7
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	601a      	str	r2, [r3, #0]
}
 8004df6:	bf00      	nop
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	40023800 	.word	0x40023800
 8004e08:	40023c00 	.word	0x40023c00

08004e0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d101      	bne.n	8004e1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e07b      	b.n	8004f16 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d108      	bne.n	8004e38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e2e:	d009      	beq.n	8004e44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	61da      	str	r2, [r3, #28]
 8004e36:	e005      	b.n	8004e44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d106      	bne.n	8004e64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f7fd fdbe 	bl	80029e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2202      	movs	r2, #2
 8004e68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e7a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e96:	431a      	orrs	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	f003 0302 	and.w	r3, r3, #2
 8004ea0:	431a      	orrs	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	69db      	ldr	r3, [r3, #28]
 8004eba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ebe:	431a      	orrs	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a1b      	ldr	r3, [r3, #32]
 8004ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec8:	ea42 0103 	orr.w	r1, r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	0c1b      	lsrs	r3, r3, #16
 8004ee2:	f003 0104 	and.w	r1, r3, #4
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eea:	f003 0210 	and.w	r2, r3, #16
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	69da      	ldr	r2, [r3, #28]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}

08004f1e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b088      	sub	sp, #32
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	60f8      	str	r0, [r7, #12]
 8004f26:	60b9      	str	r1, [r7, #8]
 8004f28:	603b      	str	r3, [r7, #0]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d101      	bne.n	8004f40 <HAL_SPI_Transmit+0x22>
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	e126      	b.n	800518e <HAL_SPI_Transmit+0x270>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f48:	f7fd ffd0 	bl	8002eec <HAL_GetTick>
 8004f4c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004f4e:	88fb      	ldrh	r3, [r7, #6]
 8004f50:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d002      	beq.n	8004f64 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004f5e:	2302      	movs	r3, #2
 8004f60:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f62:	e10b      	b.n	800517c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d002      	beq.n	8004f70 <HAL_SPI_Transmit+0x52>
 8004f6a:	88fb      	ldrh	r3, [r7, #6]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d102      	bne.n	8004f76 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f74:	e102      	b.n	800517c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2203      	movs	r2, #3
 8004f7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	88fa      	ldrh	r2, [r7, #6]
 8004f8e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	88fa      	ldrh	r2, [r7, #6]
 8004f94:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fbc:	d10f      	bne.n	8004fde <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fcc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fdc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe8:	2b40      	cmp	r3, #64	; 0x40
 8004fea:	d007      	beq.n	8004ffc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ffa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005004:	d14b      	bne.n	800509e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d002      	beq.n	8005014 <HAL_SPI_Transmit+0xf6>
 800500e:	8afb      	ldrh	r3, [r7, #22]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d13e      	bne.n	8005092 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005018:	881a      	ldrh	r2, [r3, #0]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005024:	1c9a      	adds	r2, r3, #2
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800502e:	b29b      	uxth	r3, r3
 8005030:	3b01      	subs	r3, #1
 8005032:	b29a      	uxth	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005038:	e02b      	b.n	8005092 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f003 0302 	and.w	r3, r3, #2
 8005044:	2b02      	cmp	r3, #2
 8005046:	d112      	bne.n	800506e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504c:	881a      	ldrh	r2, [r3, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005058:	1c9a      	adds	r2, r3, #2
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005062:	b29b      	uxth	r3, r3
 8005064:	3b01      	subs	r3, #1
 8005066:	b29a      	uxth	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	86da      	strh	r2, [r3, #54]	; 0x36
 800506c:	e011      	b.n	8005092 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800506e:	f7fd ff3d 	bl	8002eec <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	683a      	ldr	r2, [r7, #0]
 800507a:	429a      	cmp	r2, r3
 800507c:	d803      	bhi.n	8005086 <HAL_SPI_Transmit+0x168>
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005084:	d102      	bne.n	800508c <HAL_SPI_Transmit+0x16e>
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d102      	bne.n	8005092 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005090:	e074      	b.n	800517c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005096:	b29b      	uxth	r3, r3
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1ce      	bne.n	800503a <HAL_SPI_Transmit+0x11c>
 800509c:	e04c      	b.n	8005138 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d002      	beq.n	80050ac <HAL_SPI_Transmit+0x18e>
 80050a6:	8afb      	ldrh	r3, [r7, #22]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d140      	bne.n	800512e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	330c      	adds	r3, #12
 80050b6:	7812      	ldrb	r2, [r2, #0]
 80050b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050be:	1c5a      	adds	r2, r3, #1
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	3b01      	subs	r3, #1
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80050d2:	e02c      	b.n	800512e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d113      	bne.n	800510a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	330c      	adds	r3, #12
 80050ec:	7812      	ldrb	r2, [r2, #0]
 80050ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f4:	1c5a      	adds	r2, r3, #1
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050fe:	b29b      	uxth	r3, r3
 8005100:	3b01      	subs	r3, #1
 8005102:	b29a      	uxth	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	86da      	strh	r2, [r3, #54]	; 0x36
 8005108:	e011      	b.n	800512e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800510a:	f7fd feef 	bl	8002eec <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	683a      	ldr	r2, [r7, #0]
 8005116:	429a      	cmp	r2, r3
 8005118:	d803      	bhi.n	8005122 <HAL_SPI_Transmit+0x204>
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005120:	d102      	bne.n	8005128 <HAL_SPI_Transmit+0x20a>
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d102      	bne.n	800512e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800512c:	e026      	b.n	800517c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005132:	b29b      	uxth	r3, r3
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1cd      	bne.n	80050d4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	6839      	ldr	r1, [r7, #0]
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f000 fbd9 	bl	80058f4 <SPI_EndRxTxTransaction>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d002      	beq.n	800514e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2220      	movs	r2, #32
 800514c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10a      	bne.n	800516c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005156:	2300      	movs	r3, #0
 8005158:	613b      	str	r3, [r7, #16]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	613b      	str	r3, [r7, #16]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	613b      	str	r3, [r7, #16]
 800516a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005170:	2b00      	cmp	r3, #0
 8005172:	d002      	beq.n	800517a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	77fb      	strb	r3, [r7, #31]
 8005178:	e000      	b.n	800517c <HAL_SPI_Transmit+0x25e>
  }

error:
 800517a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800518c:	7ffb      	ldrb	r3, [r7, #31]
}
 800518e:	4618      	mov	r0, r3
 8005190:	3720      	adds	r7, #32
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005196:	b580      	push	{r7, lr}
 8005198:	b088      	sub	sp, #32
 800519a:	af02      	add	r7, sp, #8
 800519c:	60f8      	str	r0, [r7, #12]
 800519e:	60b9      	str	r1, [r7, #8]
 80051a0:	603b      	str	r3, [r7, #0]
 80051a2:	4613      	mov	r3, r2
 80051a4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80051a6:	2300      	movs	r3, #0
 80051a8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051b2:	d112      	bne.n	80051da <HAL_SPI_Receive+0x44>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d10e      	bne.n	80051da <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2204      	movs	r2, #4
 80051c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80051c4:	88fa      	ldrh	r2, [r7, #6]
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	4613      	mov	r3, r2
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	68b9      	ldr	r1, [r7, #8]
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f000 f8f1 	bl	80053b8 <HAL_SPI_TransmitReceive>
 80051d6:	4603      	mov	r3, r0
 80051d8:	e0ea      	b.n	80053b0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d101      	bne.n	80051e8 <HAL_SPI_Receive+0x52>
 80051e4:	2302      	movs	r3, #2
 80051e6:	e0e3      	b.n	80053b0 <HAL_SPI_Receive+0x21a>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051f0:	f7fd fe7c 	bl	8002eec <HAL_GetTick>
 80051f4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d002      	beq.n	8005208 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005202:	2302      	movs	r3, #2
 8005204:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005206:	e0ca      	b.n	800539e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d002      	beq.n	8005214 <HAL_SPI_Receive+0x7e>
 800520e:	88fb      	ldrh	r3, [r7, #6]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d102      	bne.n	800521a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005218:	e0c1      	b.n	800539e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2204      	movs	r2, #4
 800521e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	68ba      	ldr	r2, [r7, #8]
 800522c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	88fa      	ldrh	r2, [r7, #6]
 8005232:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	88fa      	ldrh	r2, [r7, #6]
 8005238:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005260:	d10f      	bne.n	8005282 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005270:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005280:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800528c:	2b40      	cmp	r3, #64	; 0x40
 800528e:	d007      	beq.n	80052a0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800529e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d162      	bne.n	800536e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80052a8:	e02e      	b.n	8005308 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f003 0301 	and.w	r3, r3, #1
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d115      	bne.n	80052e4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f103 020c 	add.w	r2, r3, #12
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c4:	7812      	ldrb	r2, [r2, #0]
 80052c6:	b2d2      	uxtb	r2, r2
 80052c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ce:	1c5a      	adds	r2, r3, #1
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052d8:	b29b      	uxth	r3, r3
 80052da:	3b01      	subs	r3, #1
 80052dc:	b29a      	uxth	r2, r3
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052e2:	e011      	b.n	8005308 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052e4:	f7fd fe02 	bl	8002eec <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d803      	bhi.n	80052fc <HAL_SPI_Receive+0x166>
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052fa:	d102      	bne.n	8005302 <HAL_SPI_Receive+0x16c>
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d102      	bne.n	8005308 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005306:	e04a      	b.n	800539e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800530c:	b29b      	uxth	r3, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1cb      	bne.n	80052aa <HAL_SPI_Receive+0x114>
 8005312:	e031      	b.n	8005378 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f003 0301 	and.w	r3, r3, #1
 800531e:	2b01      	cmp	r3, #1
 8005320:	d113      	bne.n	800534a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68da      	ldr	r2, [r3, #12]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532c:	b292      	uxth	r2, r2
 800532e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005334:	1c9a      	adds	r2, r3, #2
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800533e:	b29b      	uxth	r3, r3
 8005340:	3b01      	subs	r3, #1
 8005342:	b29a      	uxth	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005348:	e011      	b.n	800536e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800534a:	f7fd fdcf 	bl	8002eec <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	429a      	cmp	r2, r3
 8005358:	d803      	bhi.n	8005362 <HAL_SPI_Receive+0x1cc>
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005360:	d102      	bne.n	8005368 <HAL_SPI_Receive+0x1d2>
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d102      	bne.n	800536e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800536c:	e017      	b.n	800539e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005372:	b29b      	uxth	r3, r3
 8005374:	2b00      	cmp	r3, #0
 8005376:	d1cd      	bne.n	8005314 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	6839      	ldr	r1, [r7, #0]
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f000 fa53 	bl	8005828 <SPI_EndRxTransaction>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d002      	beq.n	800538e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2220      	movs	r2, #32
 800538c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005392:	2b00      	cmp	r3, #0
 8005394:	d002      	beq.n	800539c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	75fb      	strb	r3, [r7, #23]
 800539a:	e000      	b.n	800539e <HAL_SPI_Receive+0x208>
  }

error :
 800539c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80053ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3718      	adds	r7, #24
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b08c      	sub	sp, #48	; 0x30
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
 80053c4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80053c6:	2301      	movs	r3, #1
 80053c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80053ca:	2300      	movs	r3, #0
 80053cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d101      	bne.n	80053de <HAL_SPI_TransmitReceive+0x26>
 80053da:	2302      	movs	r3, #2
 80053dc:	e18a      	b.n	80056f4 <HAL_SPI_TransmitReceive+0x33c>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053e6:	f7fd fd81 	bl	8002eec <HAL_GetTick>
 80053ea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80053fc:	887b      	ldrh	r3, [r7, #2]
 80053fe:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005400:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005404:	2b01      	cmp	r3, #1
 8005406:	d00f      	beq.n	8005428 <HAL_SPI_TransmitReceive+0x70>
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800540e:	d107      	bne.n	8005420 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d103      	bne.n	8005420 <HAL_SPI_TransmitReceive+0x68>
 8005418:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800541c:	2b04      	cmp	r3, #4
 800541e:	d003      	beq.n	8005428 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005420:	2302      	movs	r3, #2
 8005422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005426:	e15b      	b.n	80056e0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d005      	beq.n	800543a <HAL_SPI_TransmitReceive+0x82>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d002      	beq.n	800543a <HAL_SPI_TransmitReceive+0x82>
 8005434:	887b      	ldrh	r3, [r7, #2]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d103      	bne.n	8005442 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005440:	e14e      	b.n	80056e0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b04      	cmp	r3, #4
 800544c:	d003      	beq.n	8005456 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2205      	movs	r2, #5
 8005452:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	887a      	ldrh	r2, [r7, #2]
 8005466:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	887a      	ldrh	r2, [r7, #2]
 800546c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	68ba      	ldr	r2, [r7, #8]
 8005472:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	887a      	ldrh	r2, [r7, #2]
 8005478:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	887a      	ldrh	r2, [r7, #2]
 800547e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005496:	2b40      	cmp	r3, #64	; 0x40
 8005498:	d007      	beq.n	80054aa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054b2:	d178      	bne.n	80055a6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d002      	beq.n	80054c2 <HAL_SPI_TransmitReceive+0x10a>
 80054bc:	8b7b      	ldrh	r3, [r7, #26]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d166      	bne.n	8005590 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c6:	881a      	ldrh	r2, [r3, #0]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d2:	1c9a      	adds	r2, r3, #2
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054dc:	b29b      	uxth	r3, r3
 80054de:	3b01      	subs	r3, #1
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054e6:	e053      	b.n	8005590 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f003 0302 	and.w	r3, r3, #2
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d11b      	bne.n	800552e <HAL_SPI_TransmitReceive+0x176>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d016      	beq.n	800552e <HAL_SPI_TransmitReceive+0x176>
 8005500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005502:	2b01      	cmp	r3, #1
 8005504:	d113      	bne.n	800552e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550a:	881a      	ldrh	r2, [r3, #0]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005516:	1c9a      	adds	r2, r3, #2
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005520:	b29b      	uxth	r3, r3
 8005522:	3b01      	subs	r3, #1
 8005524:	b29a      	uxth	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800552a:	2300      	movs	r3, #0
 800552c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f003 0301 	and.w	r3, r3, #1
 8005538:	2b01      	cmp	r3, #1
 800553a:	d119      	bne.n	8005570 <HAL_SPI_TransmitReceive+0x1b8>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005540:	b29b      	uxth	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d014      	beq.n	8005570 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68da      	ldr	r2, [r3, #12]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005550:	b292      	uxth	r2, r2
 8005552:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005558:	1c9a      	adds	r2, r3, #2
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005562:	b29b      	uxth	r3, r3
 8005564:	3b01      	subs	r3, #1
 8005566:	b29a      	uxth	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800556c:	2301      	movs	r3, #1
 800556e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005570:	f7fd fcbc 	bl	8002eec <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800557c:	429a      	cmp	r2, r3
 800557e:	d807      	bhi.n	8005590 <HAL_SPI_TransmitReceive+0x1d8>
 8005580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005586:	d003      	beq.n	8005590 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005588:	2303      	movs	r3, #3
 800558a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800558e:	e0a7      	b.n	80056e0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005594:	b29b      	uxth	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1a6      	bne.n	80054e8 <HAL_SPI_TransmitReceive+0x130>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800559e:	b29b      	uxth	r3, r3
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d1a1      	bne.n	80054e8 <HAL_SPI_TransmitReceive+0x130>
 80055a4:	e07c      	b.n	80056a0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d002      	beq.n	80055b4 <HAL_SPI_TransmitReceive+0x1fc>
 80055ae:	8b7b      	ldrh	r3, [r7, #26]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d16b      	bne.n	800568c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	330c      	adds	r3, #12
 80055be:	7812      	ldrb	r2, [r2, #0]
 80055c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c6:	1c5a      	adds	r2, r3, #1
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	3b01      	subs	r3, #1
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055da:	e057      	b.n	800568c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f003 0302 	and.w	r3, r3, #2
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d11c      	bne.n	8005624 <HAL_SPI_TransmitReceive+0x26c>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d017      	beq.n	8005624 <HAL_SPI_TransmitReceive+0x26c>
 80055f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d114      	bne.n	8005624 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	330c      	adds	r3, #12
 8005604:	7812      	ldrb	r2, [r2, #0]
 8005606:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560c:	1c5a      	adds	r2, r3, #1
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005616:	b29b      	uxth	r3, r3
 8005618:	3b01      	subs	r3, #1
 800561a:	b29a      	uxth	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005620:	2300      	movs	r3, #0
 8005622:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	2b01      	cmp	r3, #1
 8005630:	d119      	bne.n	8005666 <HAL_SPI_TransmitReceive+0x2ae>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005636:	b29b      	uxth	r3, r3
 8005638:	2b00      	cmp	r3, #0
 800563a:	d014      	beq.n	8005666 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68da      	ldr	r2, [r3, #12]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005646:	b2d2      	uxtb	r2, r2
 8005648:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564e:	1c5a      	adds	r2, r3, #1
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005658:	b29b      	uxth	r3, r3
 800565a:	3b01      	subs	r3, #1
 800565c:	b29a      	uxth	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005662:	2301      	movs	r3, #1
 8005664:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005666:	f7fd fc41 	bl	8002eec <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005672:	429a      	cmp	r2, r3
 8005674:	d803      	bhi.n	800567e <HAL_SPI_TransmitReceive+0x2c6>
 8005676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567c:	d102      	bne.n	8005684 <HAL_SPI_TransmitReceive+0x2cc>
 800567e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005680:	2b00      	cmp	r3, #0
 8005682:	d103      	bne.n	800568c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800568a:	e029      	b.n	80056e0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005690:	b29b      	uxth	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1a2      	bne.n	80055dc <HAL_SPI_TransmitReceive+0x224>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800569a:	b29b      	uxth	r3, r3
 800569c:	2b00      	cmp	r3, #0
 800569e:	d19d      	bne.n	80055dc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	f000 f925 	bl	80058f4 <SPI_EndRxTxTransaction>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d006      	beq.n	80056be <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2220      	movs	r2, #32
 80056ba:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80056bc:	e010      	b.n	80056e0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d10b      	bne.n	80056de <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056c6:	2300      	movs	r3, #0
 80056c8:	617b      	str	r3, [r7, #20]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	617b      	str	r3, [r7, #20]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	617b      	str	r3, [r7, #20]
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	e000      	b.n	80056e0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80056de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80056f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3730      	adds	r7, #48	; 0x30
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800570a:	b2db      	uxtb	r3, r3
}
 800570c:	4618      	mov	r0, r3
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b088      	sub	sp, #32
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	603b      	str	r3, [r7, #0]
 8005724:	4613      	mov	r3, r2
 8005726:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005728:	f7fd fbe0 	bl	8002eec <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005730:	1a9b      	subs	r3, r3, r2
 8005732:	683a      	ldr	r2, [r7, #0]
 8005734:	4413      	add	r3, r2
 8005736:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005738:	f7fd fbd8 	bl	8002eec <HAL_GetTick>
 800573c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800573e:	4b39      	ldr	r3, [pc, #228]	; (8005824 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	015b      	lsls	r3, r3, #5
 8005744:	0d1b      	lsrs	r3, r3, #20
 8005746:	69fa      	ldr	r2, [r7, #28]
 8005748:	fb02 f303 	mul.w	r3, r2, r3
 800574c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800574e:	e054      	b.n	80057fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005756:	d050      	beq.n	80057fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005758:	f7fd fbc8 	bl	8002eec <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	69fa      	ldr	r2, [r7, #28]
 8005764:	429a      	cmp	r2, r3
 8005766:	d902      	bls.n	800576e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d13d      	bne.n	80057ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800577c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005786:	d111      	bne.n	80057ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005790:	d004      	beq.n	800579c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800579a:	d107      	bne.n	80057ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057b4:	d10f      	bne.n	80057d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057c4:	601a      	str	r2, [r3, #0]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e017      	b.n	800581a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d101      	bne.n	80057f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80057f0:	2300      	movs	r3, #0
 80057f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	3b01      	subs	r3, #1
 80057f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	689a      	ldr	r2, [r3, #8]
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	4013      	ands	r3, r2
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	429a      	cmp	r2, r3
 8005808:	bf0c      	ite	eq
 800580a:	2301      	moveq	r3, #1
 800580c:	2300      	movne	r3, #0
 800580e:	b2db      	uxtb	r3, r3
 8005810:	461a      	mov	r2, r3
 8005812:	79fb      	ldrb	r3, [r7, #7]
 8005814:	429a      	cmp	r2, r3
 8005816:	d19b      	bne.n	8005750 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3720      	adds	r7, #32
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	20000010 	.word	0x20000010

08005828 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b086      	sub	sp, #24
 800582c:	af02      	add	r7, sp, #8
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800583c:	d111      	bne.n	8005862 <SPI_EndRxTransaction+0x3a>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005846:	d004      	beq.n	8005852 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005850:	d107      	bne.n	8005862 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005860:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800586a:	d12a      	bne.n	80058c2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005874:	d012      	beq.n	800589c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	9300      	str	r3, [sp, #0]
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	2200      	movs	r2, #0
 800587e:	2180      	movs	r1, #128	; 0x80
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f7ff ff49 	bl	8005718 <SPI_WaitFlagStateUntilTimeout>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d02d      	beq.n	80058e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005890:	f043 0220 	orr.w	r2, r3, #32
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e026      	b.n	80058ea <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	9300      	str	r3, [sp, #0]
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	2200      	movs	r2, #0
 80058a4:	2101      	movs	r1, #1
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f7ff ff36 	bl	8005718 <SPI_WaitFlagStateUntilTimeout>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d01a      	beq.n	80058e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b6:	f043 0220 	orr.w	r2, r3, #32
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e013      	b.n	80058ea <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	9300      	str	r3, [sp, #0]
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	2200      	movs	r2, #0
 80058ca:	2101      	movs	r1, #1
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f7ff ff23 	bl	8005718 <SPI_WaitFlagStateUntilTimeout>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d007      	beq.n	80058e8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058dc:	f043 0220 	orr.w	r2, r3, #32
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e000      	b.n	80058ea <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
	...

080058f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b088      	sub	sp, #32
 80058f8:	af02      	add	r7, sp, #8
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005900:	4b1b      	ldr	r3, [pc, #108]	; (8005970 <SPI_EndRxTxTransaction+0x7c>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a1b      	ldr	r2, [pc, #108]	; (8005974 <SPI_EndRxTxTransaction+0x80>)
 8005906:	fba2 2303 	umull	r2, r3, r2, r3
 800590a:	0d5b      	lsrs	r3, r3, #21
 800590c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005910:	fb02 f303 	mul.w	r3, r2, r3
 8005914:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800591e:	d112      	bne.n	8005946 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	9300      	str	r3, [sp, #0]
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	2200      	movs	r2, #0
 8005928:	2180      	movs	r1, #128	; 0x80
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f7ff fef4 	bl	8005718 <SPI_WaitFlagStateUntilTimeout>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d016      	beq.n	8005964 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800593a:	f043 0220 	orr.w	r2, r3, #32
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e00f      	b.n	8005966 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00a      	beq.n	8005962 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	3b01      	subs	r3, #1
 8005950:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800595c:	2b80      	cmp	r3, #128	; 0x80
 800595e:	d0f2      	beq.n	8005946 <SPI_EndRxTxTransaction+0x52>
 8005960:	e000      	b.n	8005964 <SPI_EndRxTxTransaction+0x70>
        break;
 8005962:	bf00      	nop
  }

  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3718      	adds	r7, #24
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	20000010 	.word	0x20000010
 8005974:	165e9f81 	.word	0x165e9f81

08005978 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e041      	b.n	8005a0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005990:	b2db      	uxtb	r3, r3
 8005992:	2b00      	cmp	r3, #0
 8005994:	d106      	bne.n	80059a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f7fd f866 	bl	8002a70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2202      	movs	r2, #2
 80059a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	3304      	adds	r3, #4
 80059b4:	4619      	mov	r1, r3
 80059b6:	4610      	mov	r0, r2
 80059b8:	f000 fa88 	bl	8005ecc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3708      	adds	r7, #8
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
	...

08005a18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d001      	beq.n	8005a30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e044      	b.n	8005aba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2202      	movs	r2, #2
 8005a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68da      	ldr	r2, [r3, #12]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f042 0201 	orr.w	r2, r2, #1
 8005a46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a1e      	ldr	r2, [pc, #120]	; (8005ac8 <HAL_TIM_Base_Start_IT+0xb0>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d018      	beq.n	8005a84 <HAL_TIM_Base_Start_IT+0x6c>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a5a:	d013      	beq.n	8005a84 <HAL_TIM_Base_Start_IT+0x6c>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a1a      	ldr	r2, [pc, #104]	; (8005acc <HAL_TIM_Base_Start_IT+0xb4>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d00e      	beq.n	8005a84 <HAL_TIM_Base_Start_IT+0x6c>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a19      	ldr	r2, [pc, #100]	; (8005ad0 <HAL_TIM_Base_Start_IT+0xb8>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d009      	beq.n	8005a84 <HAL_TIM_Base_Start_IT+0x6c>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a17      	ldr	r2, [pc, #92]	; (8005ad4 <HAL_TIM_Base_Start_IT+0xbc>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d004      	beq.n	8005a84 <HAL_TIM_Base_Start_IT+0x6c>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a16      	ldr	r2, [pc, #88]	; (8005ad8 <HAL_TIM_Base_Start_IT+0xc0>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d111      	bne.n	8005aa8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f003 0307 	and.w	r3, r3, #7
 8005a8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2b06      	cmp	r3, #6
 8005a94:	d010      	beq.n	8005ab8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f042 0201 	orr.w	r2, r2, #1
 8005aa4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aa6:	e007      	b.n	8005ab8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f042 0201 	orr.w	r2, r2, #1
 8005ab6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3714      	adds	r7, #20
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	40010000 	.word	0x40010000
 8005acc:	40000400 	.word	0x40000400
 8005ad0:	40000800 	.word	0x40000800
 8005ad4:	40000c00 	.word	0x40000c00
 8005ad8:	40014000 	.word	0x40014000

08005adc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	f003 0302 	and.w	r3, r3, #2
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d122      	bne.n	8005b38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	f003 0302 	and.w	r3, r3, #2
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d11b      	bne.n	8005b38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f06f 0202 	mvn.w	r2, #2
 8005b08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	f003 0303 	and.w	r3, r3, #3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d003      	beq.n	8005b26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f9b5 	bl	8005e8e <HAL_TIM_IC_CaptureCallback>
 8005b24:	e005      	b.n	8005b32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 f9a7 	bl	8005e7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 f9b8 	bl	8005ea2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	f003 0304 	and.w	r3, r3, #4
 8005b42:	2b04      	cmp	r3, #4
 8005b44:	d122      	bne.n	8005b8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	f003 0304 	and.w	r3, r3, #4
 8005b50:	2b04      	cmp	r3, #4
 8005b52:	d11b      	bne.n	8005b8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f06f 0204 	mvn.w	r2, #4
 8005b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2202      	movs	r2, #2
 8005b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d003      	beq.n	8005b7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 f98b 	bl	8005e8e <HAL_TIM_IC_CaptureCallback>
 8005b78:	e005      	b.n	8005b86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f97d 	bl	8005e7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 f98e 	bl	8005ea2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	f003 0308 	and.w	r3, r3, #8
 8005b96:	2b08      	cmp	r3, #8
 8005b98:	d122      	bne.n	8005be0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	f003 0308 	and.w	r3, r3, #8
 8005ba4:	2b08      	cmp	r3, #8
 8005ba6:	d11b      	bne.n	8005be0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f06f 0208 	mvn.w	r2, #8
 8005bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2204      	movs	r2, #4
 8005bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	69db      	ldr	r3, [r3, #28]
 8005bbe:	f003 0303 	and.w	r3, r3, #3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d003      	beq.n	8005bce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f961 	bl	8005e8e <HAL_TIM_IC_CaptureCallback>
 8005bcc:	e005      	b.n	8005bda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 f953 	bl	8005e7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 f964 	bl	8005ea2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	f003 0310 	and.w	r3, r3, #16
 8005bea:	2b10      	cmp	r3, #16
 8005bec:	d122      	bne.n	8005c34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	f003 0310 	and.w	r3, r3, #16
 8005bf8:	2b10      	cmp	r3, #16
 8005bfa:	d11b      	bne.n	8005c34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f06f 0210 	mvn.w	r2, #16
 8005c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2208      	movs	r2, #8
 8005c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	69db      	ldr	r3, [r3, #28]
 8005c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d003      	beq.n	8005c22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f937 	bl	8005e8e <HAL_TIM_IC_CaptureCallback>
 8005c20:	e005      	b.n	8005c2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f929 	bl	8005e7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 f93a 	bl	8005ea2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	f003 0301 	and.w	r3, r3, #1
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d10e      	bne.n	8005c60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	f003 0301 	and.w	r3, r3, #1
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d107      	bne.n	8005c60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f06f 0201 	mvn.w	r2, #1
 8005c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f7fc fc76 	bl	800254c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c6a:	2b80      	cmp	r3, #128	; 0x80
 8005c6c:	d10e      	bne.n	8005c8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c78:	2b80      	cmp	r3, #128	; 0x80
 8005c7a:	d107      	bne.n	8005c8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 fab2 	bl	80061f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c96:	2b40      	cmp	r3, #64	; 0x40
 8005c98:	d10e      	bne.n	8005cb8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca4:	2b40      	cmp	r3, #64	; 0x40
 8005ca6:	d107      	bne.n	8005cb8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f8ff 	bl	8005eb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	f003 0320 	and.w	r3, r3, #32
 8005cc2:	2b20      	cmp	r3, #32
 8005cc4:	d10e      	bne.n	8005ce4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	f003 0320 	and.w	r3, r3, #32
 8005cd0:	2b20      	cmp	r3, #32
 8005cd2:	d107      	bne.n	8005ce4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f06f 0220 	mvn.w	r2, #32
 8005cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 fa7c 	bl	80061dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ce4:	bf00      	nop
 8005ce6:	3708      	adds	r7, #8
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d101      	bne.n	8005d08 <HAL_TIM_ConfigClockSource+0x1c>
 8005d04:	2302      	movs	r3, #2
 8005d06:	e0b4      	b.n	8005e72 <HAL_TIM_ConfigClockSource+0x186>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2202      	movs	r2, #2
 8005d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68ba      	ldr	r2, [r7, #8]
 8005d36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d40:	d03e      	beq.n	8005dc0 <HAL_TIM_ConfigClockSource+0xd4>
 8005d42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d46:	f200 8087 	bhi.w	8005e58 <HAL_TIM_ConfigClockSource+0x16c>
 8005d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d4e:	f000 8086 	beq.w	8005e5e <HAL_TIM_ConfigClockSource+0x172>
 8005d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d56:	d87f      	bhi.n	8005e58 <HAL_TIM_ConfigClockSource+0x16c>
 8005d58:	2b70      	cmp	r3, #112	; 0x70
 8005d5a:	d01a      	beq.n	8005d92 <HAL_TIM_ConfigClockSource+0xa6>
 8005d5c:	2b70      	cmp	r3, #112	; 0x70
 8005d5e:	d87b      	bhi.n	8005e58 <HAL_TIM_ConfigClockSource+0x16c>
 8005d60:	2b60      	cmp	r3, #96	; 0x60
 8005d62:	d050      	beq.n	8005e06 <HAL_TIM_ConfigClockSource+0x11a>
 8005d64:	2b60      	cmp	r3, #96	; 0x60
 8005d66:	d877      	bhi.n	8005e58 <HAL_TIM_ConfigClockSource+0x16c>
 8005d68:	2b50      	cmp	r3, #80	; 0x50
 8005d6a:	d03c      	beq.n	8005de6 <HAL_TIM_ConfigClockSource+0xfa>
 8005d6c:	2b50      	cmp	r3, #80	; 0x50
 8005d6e:	d873      	bhi.n	8005e58 <HAL_TIM_ConfigClockSource+0x16c>
 8005d70:	2b40      	cmp	r3, #64	; 0x40
 8005d72:	d058      	beq.n	8005e26 <HAL_TIM_ConfigClockSource+0x13a>
 8005d74:	2b40      	cmp	r3, #64	; 0x40
 8005d76:	d86f      	bhi.n	8005e58 <HAL_TIM_ConfigClockSource+0x16c>
 8005d78:	2b30      	cmp	r3, #48	; 0x30
 8005d7a:	d064      	beq.n	8005e46 <HAL_TIM_ConfigClockSource+0x15a>
 8005d7c:	2b30      	cmp	r3, #48	; 0x30
 8005d7e:	d86b      	bhi.n	8005e58 <HAL_TIM_ConfigClockSource+0x16c>
 8005d80:	2b20      	cmp	r3, #32
 8005d82:	d060      	beq.n	8005e46 <HAL_TIM_ConfigClockSource+0x15a>
 8005d84:	2b20      	cmp	r3, #32
 8005d86:	d867      	bhi.n	8005e58 <HAL_TIM_ConfigClockSource+0x16c>
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d05c      	beq.n	8005e46 <HAL_TIM_ConfigClockSource+0x15a>
 8005d8c:	2b10      	cmp	r3, #16
 8005d8e:	d05a      	beq.n	8005e46 <HAL_TIM_ConfigClockSource+0x15a>
 8005d90:	e062      	b.n	8005e58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6818      	ldr	r0, [r3, #0]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	6899      	ldr	r1, [r3, #8]
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	685a      	ldr	r2, [r3, #4]
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	f000 f98d 	bl	80060c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005db4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	609a      	str	r2, [r3, #8]
      break;
 8005dbe:	e04f      	b.n	8005e60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6818      	ldr	r0, [r3, #0]
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	6899      	ldr	r1, [r3, #8]
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	685a      	ldr	r2, [r3, #4]
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	f000 f976 	bl	80060c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	689a      	ldr	r2, [r3, #8]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005de2:	609a      	str	r2, [r3, #8]
      break;
 8005de4:	e03c      	b.n	8005e60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6818      	ldr	r0, [r3, #0]
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	6859      	ldr	r1, [r3, #4]
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	461a      	mov	r2, r3
 8005df4:	f000 f8ea 	bl	8005fcc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2150      	movs	r1, #80	; 0x50
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f000 f943 	bl	800608a <TIM_ITRx_SetConfig>
      break;
 8005e04:	e02c      	b.n	8005e60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6818      	ldr	r0, [r3, #0]
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	6859      	ldr	r1, [r3, #4]
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	461a      	mov	r2, r3
 8005e14:	f000 f909 	bl	800602a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2160      	movs	r1, #96	; 0x60
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f000 f933 	bl	800608a <TIM_ITRx_SetConfig>
      break;
 8005e24:	e01c      	b.n	8005e60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6818      	ldr	r0, [r3, #0]
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	6859      	ldr	r1, [r3, #4]
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	461a      	mov	r2, r3
 8005e34:	f000 f8ca 	bl	8005fcc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2140      	movs	r1, #64	; 0x40
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f000 f923 	bl	800608a <TIM_ITRx_SetConfig>
      break;
 8005e44:	e00c      	b.n	8005e60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4619      	mov	r1, r3
 8005e50:	4610      	mov	r0, r2
 8005e52:	f000 f91a 	bl	800608a <TIM_ITRx_SetConfig>
      break;
 8005e56:	e003      	b.n	8005e60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e5c:	e000      	b.n	8005e60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3710      	adds	r7, #16
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e7a:	b480      	push	{r7}
 8005e7c:	b083      	sub	sp, #12
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e82:	bf00      	nop
 8005e84:	370c      	adds	r7, #12
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr

08005e8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e8e:	b480      	push	{r7}
 8005e90:	b083      	sub	sp, #12
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e96:	bf00      	nop
 8005e98:	370c      	adds	r7, #12
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr

08005ea2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ea2:	b480      	push	{r7}
 8005ea4:	b083      	sub	sp, #12
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005eaa:	bf00      	nop
 8005eac:	370c      	adds	r7, #12
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr

08005eb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b083      	sub	sp, #12
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ebe:	bf00      	nop
 8005ec0:	370c      	adds	r7, #12
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
	...

08005ecc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a34      	ldr	r2, [pc, #208]	; (8005fb0 <TIM_Base_SetConfig+0xe4>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d00f      	beq.n	8005f04 <TIM_Base_SetConfig+0x38>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eea:	d00b      	beq.n	8005f04 <TIM_Base_SetConfig+0x38>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a31      	ldr	r2, [pc, #196]	; (8005fb4 <TIM_Base_SetConfig+0xe8>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d007      	beq.n	8005f04 <TIM_Base_SetConfig+0x38>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a30      	ldr	r2, [pc, #192]	; (8005fb8 <TIM_Base_SetConfig+0xec>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d003      	beq.n	8005f04 <TIM_Base_SetConfig+0x38>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a2f      	ldr	r2, [pc, #188]	; (8005fbc <TIM_Base_SetConfig+0xf0>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d108      	bne.n	8005f16 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a25      	ldr	r2, [pc, #148]	; (8005fb0 <TIM_Base_SetConfig+0xe4>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d01b      	beq.n	8005f56 <TIM_Base_SetConfig+0x8a>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f24:	d017      	beq.n	8005f56 <TIM_Base_SetConfig+0x8a>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a22      	ldr	r2, [pc, #136]	; (8005fb4 <TIM_Base_SetConfig+0xe8>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d013      	beq.n	8005f56 <TIM_Base_SetConfig+0x8a>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a21      	ldr	r2, [pc, #132]	; (8005fb8 <TIM_Base_SetConfig+0xec>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d00f      	beq.n	8005f56 <TIM_Base_SetConfig+0x8a>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a20      	ldr	r2, [pc, #128]	; (8005fbc <TIM_Base_SetConfig+0xf0>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d00b      	beq.n	8005f56 <TIM_Base_SetConfig+0x8a>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a1f      	ldr	r2, [pc, #124]	; (8005fc0 <TIM_Base_SetConfig+0xf4>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d007      	beq.n	8005f56 <TIM_Base_SetConfig+0x8a>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a1e      	ldr	r2, [pc, #120]	; (8005fc4 <TIM_Base_SetConfig+0xf8>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d003      	beq.n	8005f56 <TIM_Base_SetConfig+0x8a>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a1d      	ldr	r2, [pc, #116]	; (8005fc8 <TIM_Base_SetConfig+0xfc>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d108      	bne.n	8005f68 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	68fa      	ldr	r2, [r7, #12]
 8005f7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	689a      	ldr	r2, [r3, #8]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a08      	ldr	r2, [pc, #32]	; (8005fb0 <TIM_Base_SetConfig+0xe4>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d103      	bne.n	8005f9c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	691a      	ldr	r2, [r3, #16]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	615a      	str	r2, [r3, #20]
}
 8005fa2:	bf00      	nop
 8005fa4:	3714      	adds	r7, #20
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	40010000 	.word	0x40010000
 8005fb4:	40000400 	.word	0x40000400
 8005fb8:	40000800 	.word	0x40000800
 8005fbc:	40000c00 	.word	0x40000c00
 8005fc0:	40014000 	.word	0x40014000
 8005fc4:	40014400 	.word	0x40014400
 8005fc8:	40014800 	.word	0x40014800

08005fcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b087      	sub	sp, #28
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6a1b      	ldr	r3, [r3, #32]
 8005fdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6a1b      	ldr	r3, [r3, #32]
 8005fe2:	f023 0201 	bic.w	r2, r3, #1
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ff6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	011b      	lsls	r3, r3, #4
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f023 030a 	bic.w	r3, r3, #10
 8006008:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	4313      	orrs	r3, r2
 8006010:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	621a      	str	r2, [r3, #32]
}
 800601e:	bf00      	nop
 8006020:	371c      	adds	r7, #28
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr

0800602a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800602a:	b480      	push	{r7}
 800602c:	b087      	sub	sp, #28
 800602e:	af00      	add	r7, sp, #0
 8006030:	60f8      	str	r0, [r7, #12]
 8006032:	60b9      	str	r1, [r7, #8]
 8006034:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	f023 0210 	bic.w	r2, r3, #16
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6a1b      	ldr	r3, [r3, #32]
 800604c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006054:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	031b      	lsls	r3, r3, #12
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	4313      	orrs	r3, r2
 800605e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006066:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	011b      	lsls	r3, r3, #4
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	4313      	orrs	r3, r2
 8006070:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	697a      	ldr	r2, [r7, #20]
 8006076:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	693a      	ldr	r2, [r7, #16]
 800607c:	621a      	str	r2, [r3, #32]
}
 800607e:	bf00      	nop
 8006080:	371c      	adds	r7, #28
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr

0800608a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800608a:	b480      	push	{r7}
 800608c:	b085      	sub	sp, #20
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
 8006092:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060a2:	683a      	ldr	r2, [r7, #0]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	f043 0307 	orr.w	r3, r3, #7
 80060ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	609a      	str	r2, [r3, #8]
}
 80060b4:	bf00      	nop
 80060b6:	3714      	adds	r7, #20
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b087      	sub	sp, #28
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
 80060cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	021a      	lsls	r2, r3, #8
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	431a      	orrs	r2, r3
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	697a      	ldr	r2, [r7, #20]
 80060f2:	609a      	str	r2, [r3, #8]
}
 80060f4:	bf00      	nop
 80060f6:	371c      	adds	r7, #28
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006110:	2b01      	cmp	r3, #1
 8006112:	d101      	bne.n	8006118 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006114:	2302      	movs	r3, #2
 8006116:	e050      	b.n	80061ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2202      	movs	r2, #2
 8006124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800613e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	4313      	orrs	r3, r2
 8006148:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a1c      	ldr	r2, [pc, #112]	; (80061c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d018      	beq.n	800618e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006164:	d013      	beq.n	800618e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a18      	ldr	r2, [pc, #96]	; (80061cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d00e      	beq.n	800618e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a16      	ldr	r2, [pc, #88]	; (80061d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d009      	beq.n	800618e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a15      	ldr	r2, [pc, #84]	; (80061d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d004      	beq.n	800618e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a13      	ldr	r2, [pc, #76]	; (80061d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d10c      	bne.n	80061a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006194:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	68ba      	ldr	r2, [r7, #8]
 800619c:	4313      	orrs	r3, r2
 800619e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68ba      	ldr	r2, [r7, #8]
 80061a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3714      	adds	r7, #20
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	40010000 	.word	0x40010000
 80061cc:	40000400 	.word	0x40000400
 80061d0:	40000800 	.word	0x40000800
 80061d4:	40000c00 	.word	0x40000c00
 80061d8:	40014000 	.word	0x40014000

080061dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061e4:	bf00      	nop
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061f8:	bf00      	nop
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d101      	bne.n	8006216 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e03f      	b.n	8006296 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800621c:	b2db      	uxtb	r3, r3
 800621e:	2b00      	cmp	r3, #0
 8006220:	d106      	bne.n	8006230 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f7fc fc42 	bl	8002ab4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2224      	movs	r2, #36	; 0x24
 8006234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68da      	ldr	r2, [r3, #12]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006246:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 f829 	bl	80062a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	691a      	ldr	r2, [r3, #16]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800625c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	695a      	ldr	r2, [r3, #20]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800626c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68da      	ldr	r2, [r3, #12]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800627c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2220      	movs	r2, #32
 8006288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2220      	movs	r2, #32
 8006290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3708      	adds	r7, #8
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
	...

080062a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062a4:	b0c0      	sub	sp, #256	; 0x100
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80062b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062bc:	68d9      	ldr	r1, [r3, #12]
 80062be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	ea40 0301 	orr.w	r3, r0, r1
 80062c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ce:	689a      	ldr	r2, [r3, #8]
 80062d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	431a      	orrs	r2, r3
 80062d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062dc:	695b      	ldr	r3, [r3, #20]
 80062de:	431a      	orrs	r2, r3
 80062e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062e4:	69db      	ldr	r3, [r3, #28]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80062ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80062f8:	f021 010c 	bic.w	r1, r1, #12
 80062fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006306:	430b      	orrs	r3, r1
 8006308:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800630a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800631a:	6999      	ldr	r1, [r3, #24]
 800631c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	ea40 0301 	orr.w	r3, r0, r1
 8006326:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	4b8f      	ldr	r3, [pc, #572]	; (800656c <UART_SetConfig+0x2cc>)
 8006330:	429a      	cmp	r2, r3
 8006332:	d005      	beq.n	8006340 <UART_SetConfig+0xa0>
 8006334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	4b8d      	ldr	r3, [pc, #564]	; (8006570 <UART_SetConfig+0x2d0>)
 800633c:	429a      	cmp	r2, r3
 800633e:	d104      	bne.n	800634a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006340:	f7fe fd1e 	bl	8004d80 <HAL_RCC_GetPCLK2Freq>
 8006344:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006348:	e003      	b.n	8006352 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800634a:	f7fe fd05 	bl	8004d58 <HAL_RCC_GetPCLK1Freq>
 800634e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006356:	69db      	ldr	r3, [r3, #28]
 8006358:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800635c:	f040 810c 	bne.w	8006578 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006360:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006364:	2200      	movs	r2, #0
 8006366:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800636a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800636e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006372:	4622      	mov	r2, r4
 8006374:	462b      	mov	r3, r5
 8006376:	1891      	adds	r1, r2, r2
 8006378:	65b9      	str	r1, [r7, #88]	; 0x58
 800637a:	415b      	adcs	r3, r3
 800637c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800637e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006382:	4621      	mov	r1, r4
 8006384:	eb12 0801 	adds.w	r8, r2, r1
 8006388:	4629      	mov	r1, r5
 800638a:	eb43 0901 	adc.w	r9, r3, r1
 800638e:	f04f 0200 	mov.w	r2, #0
 8006392:	f04f 0300 	mov.w	r3, #0
 8006396:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800639a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800639e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063a2:	4690      	mov	r8, r2
 80063a4:	4699      	mov	r9, r3
 80063a6:	4623      	mov	r3, r4
 80063a8:	eb18 0303 	adds.w	r3, r8, r3
 80063ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80063b0:	462b      	mov	r3, r5
 80063b2:	eb49 0303 	adc.w	r3, r9, r3
 80063b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80063c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80063ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80063ce:	460b      	mov	r3, r1
 80063d0:	18db      	adds	r3, r3, r3
 80063d2:	653b      	str	r3, [r7, #80]	; 0x50
 80063d4:	4613      	mov	r3, r2
 80063d6:	eb42 0303 	adc.w	r3, r2, r3
 80063da:	657b      	str	r3, [r7, #84]	; 0x54
 80063dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80063e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80063e4:	f7fa fc58 	bl	8000c98 <__aeabi_uldivmod>
 80063e8:	4602      	mov	r2, r0
 80063ea:	460b      	mov	r3, r1
 80063ec:	4b61      	ldr	r3, [pc, #388]	; (8006574 <UART_SetConfig+0x2d4>)
 80063ee:	fba3 2302 	umull	r2, r3, r3, r2
 80063f2:	095b      	lsrs	r3, r3, #5
 80063f4:	011c      	lsls	r4, r3, #4
 80063f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063fa:	2200      	movs	r2, #0
 80063fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006400:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006404:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006408:	4642      	mov	r2, r8
 800640a:	464b      	mov	r3, r9
 800640c:	1891      	adds	r1, r2, r2
 800640e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006410:	415b      	adcs	r3, r3
 8006412:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006414:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006418:	4641      	mov	r1, r8
 800641a:	eb12 0a01 	adds.w	sl, r2, r1
 800641e:	4649      	mov	r1, r9
 8006420:	eb43 0b01 	adc.w	fp, r3, r1
 8006424:	f04f 0200 	mov.w	r2, #0
 8006428:	f04f 0300 	mov.w	r3, #0
 800642c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006430:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006434:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006438:	4692      	mov	sl, r2
 800643a:	469b      	mov	fp, r3
 800643c:	4643      	mov	r3, r8
 800643e:	eb1a 0303 	adds.w	r3, sl, r3
 8006442:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006446:	464b      	mov	r3, r9
 8006448:	eb4b 0303 	adc.w	r3, fp, r3
 800644c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800645c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006460:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006464:	460b      	mov	r3, r1
 8006466:	18db      	adds	r3, r3, r3
 8006468:	643b      	str	r3, [r7, #64]	; 0x40
 800646a:	4613      	mov	r3, r2
 800646c:	eb42 0303 	adc.w	r3, r2, r3
 8006470:	647b      	str	r3, [r7, #68]	; 0x44
 8006472:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006476:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800647a:	f7fa fc0d 	bl	8000c98 <__aeabi_uldivmod>
 800647e:	4602      	mov	r2, r0
 8006480:	460b      	mov	r3, r1
 8006482:	4611      	mov	r1, r2
 8006484:	4b3b      	ldr	r3, [pc, #236]	; (8006574 <UART_SetConfig+0x2d4>)
 8006486:	fba3 2301 	umull	r2, r3, r3, r1
 800648a:	095b      	lsrs	r3, r3, #5
 800648c:	2264      	movs	r2, #100	; 0x64
 800648e:	fb02 f303 	mul.w	r3, r2, r3
 8006492:	1acb      	subs	r3, r1, r3
 8006494:	00db      	lsls	r3, r3, #3
 8006496:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800649a:	4b36      	ldr	r3, [pc, #216]	; (8006574 <UART_SetConfig+0x2d4>)
 800649c:	fba3 2302 	umull	r2, r3, r3, r2
 80064a0:	095b      	lsrs	r3, r3, #5
 80064a2:	005b      	lsls	r3, r3, #1
 80064a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064a8:	441c      	add	r4, r3
 80064aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064ae:	2200      	movs	r2, #0
 80064b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80064b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80064bc:	4642      	mov	r2, r8
 80064be:	464b      	mov	r3, r9
 80064c0:	1891      	adds	r1, r2, r2
 80064c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80064c4:	415b      	adcs	r3, r3
 80064c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80064cc:	4641      	mov	r1, r8
 80064ce:	1851      	adds	r1, r2, r1
 80064d0:	6339      	str	r1, [r7, #48]	; 0x30
 80064d2:	4649      	mov	r1, r9
 80064d4:	414b      	adcs	r3, r1
 80064d6:	637b      	str	r3, [r7, #52]	; 0x34
 80064d8:	f04f 0200 	mov.w	r2, #0
 80064dc:	f04f 0300 	mov.w	r3, #0
 80064e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80064e4:	4659      	mov	r1, fp
 80064e6:	00cb      	lsls	r3, r1, #3
 80064e8:	4651      	mov	r1, sl
 80064ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064ee:	4651      	mov	r1, sl
 80064f0:	00ca      	lsls	r2, r1, #3
 80064f2:	4610      	mov	r0, r2
 80064f4:	4619      	mov	r1, r3
 80064f6:	4603      	mov	r3, r0
 80064f8:	4642      	mov	r2, r8
 80064fa:	189b      	adds	r3, r3, r2
 80064fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006500:	464b      	mov	r3, r9
 8006502:	460a      	mov	r2, r1
 8006504:	eb42 0303 	adc.w	r3, r2, r3
 8006508:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800650c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006518:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800651c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006520:	460b      	mov	r3, r1
 8006522:	18db      	adds	r3, r3, r3
 8006524:	62bb      	str	r3, [r7, #40]	; 0x28
 8006526:	4613      	mov	r3, r2
 8006528:	eb42 0303 	adc.w	r3, r2, r3
 800652c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800652e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006532:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006536:	f7fa fbaf 	bl	8000c98 <__aeabi_uldivmod>
 800653a:	4602      	mov	r2, r0
 800653c:	460b      	mov	r3, r1
 800653e:	4b0d      	ldr	r3, [pc, #52]	; (8006574 <UART_SetConfig+0x2d4>)
 8006540:	fba3 1302 	umull	r1, r3, r3, r2
 8006544:	095b      	lsrs	r3, r3, #5
 8006546:	2164      	movs	r1, #100	; 0x64
 8006548:	fb01 f303 	mul.w	r3, r1, r3
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	00db      	lsls	r3, r3, #3
 8006550:	3332      	adds	r3, #50	; 0x32
 8006552:	4a08      	ldr	r2, [pc, #32]	; (8006574 <UART_SetConfig+0x2d4>)
 8006554:	fba2 2303 	umull	r2, r3, r2, r3
 8006558:	095b      	lsrs	r3, r3, #5
 800655a:	f003 0207 	and.w	r2, r3, #7
 800655e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4422      	add	r2, r4
 8006566:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006568:	e105      	b.n	8006776 <UART_SetConfig+0x4d6>
 800656a:	bf00      	nop
 800656c:	40011000 	.word	0x40011000
 8006570:	40011400 	.word	0x40011400
 8006574:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006578:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800657c:	2200      	movs	r2, #0
 800657e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006582:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006586:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800658a:	4642      	mov	r2, r8
 800658c:	464b      	mov	r3, r9
 800658e:	1891      	adds	r1, r2, r2
 8006590:	6239      	str	r1, [r7, #32]
 8006592:	415b      	adcs	r3, r3
 8006594:	627b      	str	r3, [r7, #36]	; 0x24
 8006596:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800659a:	4641      	mov	r1, r8
 800659c:	1854      	adds	r4, r2, r1
 800659e:	4649      	mov	r1, r9
 80065a0:	eb43 0501 	adc.w	r5, r3, r1
 80065a4:	f04f 0200 	mov.w	r2, #0
 80065a8:	f04f 0300 	mov.w	r3, #0
 80065ac:	00eb      	lsls	r3, r5, #3
 80065ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065b2:	00e2      	lsls	r2, r4, #3
 80065b4:	4614      	mov	r4, r2
 80065b6:	461d      	mov	r5, r3
 80065b8:	4643      	mov	r3, r8
 80065ba:	18e3      	adds	r3, r4, r3
 80065bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80065c0:	464b      	mov	r3, r9
 80065c2:	eb45 0303 	adc.w	r3, r5, r3
 80065c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80065ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80065d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80065da:	f04f 0200 	mov.w	r2, #0
 80065de:	f04f 0300 	mov.w	r3, #0
 80065e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80065e6:	4629      	mov	r1, r5
 80065e8:	008b      	lsls	r3, r1, #2
 80065ea:	4621      	mov	r1, r4
 80065ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065f0:	4621      	mov	r1, r4
 80065f2:	008a      	lsls	r2, r1, #2
 80065f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80065f8:	f7fa fb4e 	bl	8000c98 <__aeabi_uldivmod>
 80065fc:	4602      	mov	r2, r0
 80065fe:	460b      	mov	r3, r1
 8006600:	4b60      	ldr	r3, [pc, #384]	; (8006784 <UART_SetConfig+0x4e4>)
 8006602:	fba3 2302 	umull	r2, r3, r3, r2
 8006606:	095b      	lsrs	r3, r3, #5
 8006608:	011c      	lsls	r4, r3, #4
 800660a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800660e:	2200      	movs	r2, #0
 8006610:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006614:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006618:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800661c:	4642      	mov	r2, r8
 800661e:	464b      	mov	r3, r9
 8006620:	1891      	adds	r1, r2, r2
 8006622:	61b9      	str	r1, [r7, #24]
 8006624:	415b      	adcs	r3, r3
 8006626:	61fb      	str	r3, [r7, #28]
 8006628:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800662c:	4641      	mov	r1, r8
 800662e:	1851      	adds	r1, r2, r1
 8006630:	6139      	str	r1, [r7, #16]
 8006632:	4649      	mov	r1, r9
 8006634:	414b      	adcs	r3, r1
 8006636:	617b      	str	r3, [r7, #20]
 8006638:	f04f 0200 	mov.w	r2, #0
 800663c:	f04f 0300 	mov.w	r3, #0
 8006640:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006644:	4659      	mov	r1, fp
 8006646:	00cb      	lsls	r3, r1, #3
 8006648:	4651      	mov	r1, sl
 800664a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800664e:	4651      	mov	r1, sl
 8006650:	00ca      	lsls	r2, r1, #3
 8006652:	4610      	mov	r0, r2
 8006654:	4619      	mov	r1, r3
 8006656:	4603      	mov	r3, r0
 8006658:	4642      	mov	r2, r8
 800665a:	189b      	adds	r3, r3, r2
 800665c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006660:	464b      	mov	r3, r9
 8006662:	460a      	mov	r2, r1
 8006664:	eb42 0303 	adc.w	r3, r2, r3
 8006668:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800666c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	67bb      	str	r3, [r7, #120]	; 0x78
 8006676:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006678:	f04f 0200 	mov.w	r2, #0
 800667c:	f04f 0300 	mov.w	r3, #0
 8006680:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006684:	4649      	mov	r1, r9
 8006686:	008b      	lsls	r3, r1, #2
 8006688:	4641      	mov	r1, r8
 800668a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800668e:	4641      	mov	r1, r8
 8006690:	008a      	lsls	r2, r1, #2
 8006692:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006696:	f7fa faff 	bl	8000c98 <__aeabi_uldivmod>
 800669a:	4602      	mov	r2, r0
 800669c:	460b      	mov	r3, r1
 800669e:	4b39      	ldr	r3, [pc, #228]	; (8006784 <UART_SetConfig+0x4e4>)
 80066a0:	fba3 1302 	umull	r1, r3, r3, r2
 80066a4:	095b      	lsrs	r3, r3, #5
 80066a6:	2164      	movs	r1, #100	; 0x64
 80066a8:	fb01 f303 	mul.w	r3, r1, r3
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	011b      	lsls	r3, r3, #4
 80066b0:	3332      	adds	r3, #50	; 0x32
 80066b2:	4a34      	ldr	r2, [pc, #208]	; (8006784 <UART_SetConfig+0x4e4>)
 80066b4:	fba2 2303 	umull	r2, r3, r2, r3
 80066b8:	095b      	lsrs	r3, r3, #5
 80066ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066be:	441c      	add	r4, r3
 80066c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066c4:	2200      	movs	r2, #0
 80066c6:	673b      	str	r3, [r7, #112]	; 0x70
 80066c8:	677a      	str	r2, [r7, #116]	; 0x74
 80066ca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80066ce:	4642      	mov	r2, r8
 80066d0:	464b      	mov	r3, r9
 80066d2:	1891      	adds	r1, r2, r2
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	415b      	adcs	r3, r3
 80066d8:	60fb      	str	r3, [r7, #12]
 80066da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80066de:	4641      	mov	r1, r8
 80066e0:	1851      	adds	r1, r2, r1
 80066e2:	6039      	str	r1, [r7, #0]
 80066e4:	4649      	mov	r1, r9
 80066e6:	414b      	adcs	r3, r1
 80066e8:	607b      	str	r3, [r7, #4]
 80066ea:	f04f 0200 	mov.w	r2, #0
 80066ee:	f04f 0300 	mov.w	r3, #0
 80066f2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80066f6:	4659      	mov	r1, fp
 80066f8:	00cb      	lsls	r3, r1, #3
 80066fa:	4651      	mov	r1, sl
 80066fc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006700:	4651      	mov	r1, sl
 8006702:	00ca      	lsls	r2, r1, #3
 8006704:	4610      	mov	r0, r2
 8006706:	4619      	mov	r1, r3
 8006708:	4603      	mov	r3, r0
 800670a:	4642      	mov	r2, r8
 800670c:	189b      	adds	r3, r3, r2
 800670e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006710:	464b      	mov	r3, r9
 8006712:	460a      	mov	r2, r1
 8006714:	eb42 0303 	adc.w	r3, r2, r3
 8006718:	66fb      	str	r3, [r7, #108]	; 0x6c
 800671a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	663b      	str	r3, [r7, #96]	; 0x60
 8006724:	667a      	str	r2, [r7, #100]	; 0x64
 8006726:	f04f 0200 	mov.w	r2, #0
 800672a:	f04f 0300 	mov.w	r3, #0
 800672e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006732:	4649      	mov	r1, r9
 8006734:	008b      	lsls	r3, r1, #2
 8006736:	4641      	mov	r1, r8
 8006738:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800673c:	4641      	mov	r1, r8
 800673e:	008a      	lsls	r2, r1, #2
 8006740:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006744:	f7fa faa8 	bl	8000c98 <__aeabi_uldivmod>
 8006748:	4602      	mov	r2, r0
 800674a:	460b      	mov	r3, r1
 800674c:	4b0d      	ldr	r3, [pc, #52]	; (8006784 <UART_SetConfig+0x4e4>)
 800674e:	fba3 1302 	umull	r1, r3, r3, r2
 8006752:	095b      	lsrs	r3, r3, #5
 8006754:	2164      	movs	r1, #100	; 0x64
 8006756:	fb01 f303 	mul.w	r3, r1, r3
 800675a:	1ad3      	subs	r3, r2, r3
 800675c:	011b      	lsls	r3, r3, #4
 800675e:	3332      	adds	r3, #50	; 0x32
 8006760:	4a08      	ldr	r2, [pc, #32]	; (8006784 <UART_SetConfig+0x4e4>)
 8006762:	fba2 2303 	umull	r2, r3, r2, r3
 8006766:	095b      	lsrs	r3, r3, #5
 8006768:	f003 020f 	and.w	r2, r3, #15
 800676c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4422      	add	r2, r4
 8006774:	609a      	str	r2, [r3, #8]
}
 8006776:	bf00      	nop
 8006778:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800677c:	46bd      	mov	sp, r7
 800677e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006782:	bf00      	nop
 8006784:	51eb851f 	.word	0x51eb851f

08006788 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f103 0208 	add.w	r2, r3, #8
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f04f 32ff 	mov.w	r2, #4294967295
 80067a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f103 0208 	add.w	r2, r3, #8
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f103 0208 	add.w	r2, r3, #8
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80067d6:	bf00      	nop
 80067d8:	370c      	adds	r7, #12
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067e2:	b480      	push	{r7}
 80067e4:	b085      	sub	sp, #20
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
 80067ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	689a      	ldr	r2, [r3, #8]
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	683a      	ldr	r2, [r7, #0]
 8006806:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	683a      	ldr	r2, [r7, #0]
 800680c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	1c5a      	adds	r2, r3, #1
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	601a      	str	r2, [r3, #0]
}
 800681e:	bf00      	nop
 8006820:	3714      	adds	r7, #20
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr

0800682a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800682a:	b480      	push	{r7}
 800682c:	b085      	sub	sp, #20
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
 8006832:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006840:	d103      	bne.n	800684a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	60fb      	str	r3, [r7, #12]
 8006848:	e00c      	b.n	8006864 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	3308      	adds	r3, #8
 800684e:	60fb      	str	r3, [r7, #12]
 8006850:	e002      	b.n	8006858 <vListInsert+0x2e>
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	60fb      	str	r3, [r7, #12]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68ba      	ldr	r2, [r7, #8]
 8006860:	429a      	cmp	r2, r3
 8006862:	d2f6      	bcs.n	8006852 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	685a      	ldr	r2, [r3, #4]
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	683a      	ldr	r2, [r7, #0]
 8006872:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	683a      	ldr	r2, [r7, #0]
 800687e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	1c5a      	adds	r2, r3, #1
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	601a      	str	r2, [r3, #0]
}
 8006890:	bf00      	nop
 8006892:	3714      	adds	r7, #20
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800689c:	b480      	push	{r7}
 800689e:	b085      	sub	sp, #20
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	6892      	ldr	r2, [r2, #8]
 80068b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	6852      	ldr	r2, [r2, #4]
 80068bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d103      	bne.n	80068d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	689a      	ldr	r2, [r3, #8]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	1e5a      	subs	r2, r3, #1
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3714      	adds	r7, #20
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d10a      	bne.n	800691a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006908:	f383 8811 	msr	BASEPRI, r3
 800690c:	f3bf 8f6f 	isb	sy
 8006910:	f3bf 8f4f 	dsb	sy
 8006914:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006916:	bf00      	nop
 8006918:	e7fe      	b.n	8006918 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800691a:	f001 fd33 	bl	8008384 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006926:	68f9      	ldr	r1, [r7, #12]
 8006928:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800692a:	fb01 f303 	mul.w	r3, r1, r3
 800692e:	441a      	add	r2, r3
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2200      	movs	r2, #0
 8006938:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800694a:	3b01      	subs	r3, #1
 800694c:	68f9      	ldr	r1, [r7, #12]
 800694e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006950:	fb01 f303 	mul.w	r3, r1, r3
 8006954:	441a      	add	r2, r3
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	22ff      	movs	r2, #255	; 0xff
 800695e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	22ff      	movs	r2, #255	; 0xff
 8006966:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d114      	bne.n	800699a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d01a      	beq.n	80069ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	3310      	adds	r3, #16
 800697c:	4618      	mov	r0, r3
 800697e:	f001 f909 	bl	8007b94 <xTaskRemoveFromEventList>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d012      	beq.n	80069ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006988:	4b0c      	ldr	r3, [pc, #48]	; (80069bc <xQueueGenericReset+0xcc>)
 800698a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800698e:	601a      	str	r2, [r3, #0]
 8006990:	f3bf 8f4f 	dsb	sy
 8006994:	f3bf 8f6f 	isb	sy
 8006998:	e009      	b.n	80069ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	3310      	adds	r3, #16
 800699e:	4618      	mov	r0, r3
 80069a0:	f7ff fef2 	bl	8006788 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	3324      	adds	r3, #36	; 0x24
 80069a8:	4618      	mov	r0, r3
 80069aa:	f7ff feed 	bl	8006788 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80069ae:	f001 fd19 	bl	80083e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80069b2:	2301      	movs	r3, #1
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3710      	adds	r7, #16
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	e000ed04 	.word	0xe000ed04

080069c0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b08a      	sub	sp, #40	; 0x28
 80069c4:	af02      	add	r7, sp, #8
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	4613      	mov	r3, r2
 80069cc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d10a      	bne.n	80069ea <xQueueGenericCreate+0x2a>
	__asm volatile
 80069d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d8:	f383 8811 	msr	BASEPRI, r3
 80069dc:	f3bf 8f6f 	isb	sy
 80069e0:	f3bf 8f4f 	dsb	sy
 80069e4:	613b      	str	r3, [r7, #16]
}
 80069e6:	bf00      	nop
 80069e8:	e7fe      	b.n	80069e8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	68ba      	ldr	r2, [r7, #8]
 80069ee:	fb02 f303 	mul.w	r3, r2, r3
 80069f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	3348      	adds	r3, #72	; 0x48
 80069f8:	4618      	mov	r0, r3
 80069fa:	f001 fda5 	bl	8008548 <pvPortMalloc>
 80069fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d011      	beq.n	8006a2a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	3348      	adds	r3, #72	; 0x48
 8006a0e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a18:	79fa      	ldrb	r2, [r7, #7]
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	697a      	ldr	r2, [r7, #20]
 8006a22:	68b9      	ldr	r1, [r7, #8]
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f000 f805 	bl	8006a34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006a2a:	69bb      	ldr	r3, [r7, #24]
	}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3720      	adds	r7, #32
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	607a      	str	r2, [r7, #4]
 8006a40:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d103      	bne.n	8006a50 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	69ba      	ldr	r2, [r7, #24]
 8006a4c:	601a      	str	r2, [r3, #0]
 8006a4e:	e002      	b.n	8006a56 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	68ba      	ldr	r2, [r7, #8]
 8006a60:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006a62:	2101      	movs	r1, #1
 8006a64:	69b8      	ldr	r0, [r7, #24]
 8006a66:	f7ff ff43 	bl	80068f0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006a6a:	bf00      	nop
 8006a6c:	3710      	adds	r7, #16
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
	...

08006a74 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b08e      	sub	sp, #56	; 0x38
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	607a      	str	r2, [r7, #4]
 8006a80:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006a82:	2300      	movs	r3, #0
 8006a84:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d10a      	bne.n	8006aa6 <xQueueGenericSend+0x32>
	__asm volatile
 8006a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a94:	f383 8811 	msr	BASEPRI, r3
 8006a98:	f3bf 8f6f 	isb	sy
 8006a9c:	f3bf 8f4f 	dsb	sy
 8006aa0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006aa2:	bf00      	nop
 8006aa4:	e7fe      	b.n	8006aa4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d103      	bne.n	8006ab4 <xQueueGenericSend+0x40>
 8006aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d101      	bne.n	8006ab8 <xQueueGenericSend+0x44>
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e000      	b.n	8006aba <xQueueGenericSend+0x46>
 8006ab8:	2300      	movs	r3, #0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d10a      	bne.n	8006ad4 <xQueueGenericSend+0x60>
	__asm volatile
 8006abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac2:	f383 8811 	msr	BASEPRI, r3
 8006ac6:	f3bf 8f6f 	isb	sy
 8006aca:	f3bf 8f4f 	dsb	sy
 8006ace:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006ad0:	bf00      	nop
 8006ad2:	e7fe      	b.n	8006ad2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d103      	bne.n	8006ae2 <xQueueGenericSend+0x6e>
 8006ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d101      	bne.n	8006ae6 <xQueueGenericSend+0x72>
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e000      	b.n	8006ae8 <xQueueGenericSend+0x74>
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d10a      	bne.n	8006b02 <xQueueGenericSend+0x8e>
	__asm volatile
 8006aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af0:	f383 8811 	msr	BASEPRI, r3
 8006af4:	f3bf 8f6f 	isb	sy
 8006af8:	f3bf 8f4f 	dsb	sy
 8006afc:	623b      	str	r3, [r7, #32]
}
 8006afe:	bf00      	nop
 8006b00:	e7fe      	b.n	8006b00 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b02:	f001 fa07 	bl	8007f14 <xTaskGetSchedulerState>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d102      	bne.n	8006b12 <xQueueGenericSend+0x9e>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d101      	bne.n	8006b16 <xQueueGenericSend+0xa2>
 8006b12:	2301      	movs	r3, #1
 8006b14:	e000      	b.n	8006b18 <xQueueGenericSend+0xa4>
 8006b16:	2300      	movs	r3, #0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d10a      	bne.n	8006b32 <xQueueGenericSend+0xbe>
	__asm volatile
 8006b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b20:	f383 8811 	msr	BASEPRI, r3
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	f3bf 8f4f 	dsb	sy
 8006b2c:	61fb      	str	r3, [r7, #28]
}
 8006b2e:	bf00      	nop
 8006b30:	e7fe      	b.n	8006b30 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b32:	f001 fc27 	bl	8008384 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d302      	bcc.n	8006b48 <xQueueGenericSend+0xd4>
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d129      	bne.n	8006b9c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b48:	683a      	ldr	r2, [r7, #0]
 8006b4a:	68b9      	ldr	r1, [r7, #8]
 8006b4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b4e:	f000 fa51 	bl	8006ff4 <prvCopyDataToQueue>
 8006b52:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d010      	beq.n	8006b7e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5e:	3324      	adds	r3, #36	; 0x24
 8006b60:	4618      	mov	r0, r3
 8006b62:	f001 f817 	bl	8007b94 <xTaskRemoveFromEventList>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d013      	beq.n	8006b94 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006b6c:	4b3f      	ldr	r3, [pc, #252]	; (8006c6c <xQueueGenericSend+0x1f8>)
 8006b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b72:	601a      	str	r2, [r3, #0]
 8006b74:	f3bf 8f4f 	dsb	sy
 8006b78:	f3bf 8f6f 	isb	sy
 8006b7c:	e00a      	b.n	8006b94 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d007      	beq.n	8006b94 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006b84:	4b39      	ldr	r3, [pc, #228]	; (8006c6c <xQueueGenericSend+0x1f8>)
 8006b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b8a:	601a      	str	r2, [r3, #0]
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006b94:	f001 fc26 	bl	80083e4 <vPortExitCritical>
				return pdPASS;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e063      	b.n	8006c64 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d103      	bne.n	8006baa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ba2:	f001 fc1f 	bl	80083e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	e05c      	b.n	8006c64 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d106      	bne.n	8006bbe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006bb0:	f107 0314 	add.w	r3, r7, #20
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f001 f84f 	bl	8007c58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006bbe:	f001 fc11 	bl	80083e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006bc2:	f000 fdff 	bl	80077c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006bc6:	f001 fbdd 	bl	8008384 <vPortEnterCritical>
 8006bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006bd0:	b25b      	sxtb	r3, r3
 8006bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd6:	d103      	bne.n	8006be0 <xQueueGenericSend+0x16c>
 8006bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006be6:	b25b      	sxtb	r3, r3
 8006be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bec:	d103      	bne.n	8006bf6 <xQueueGenericSend+0x182>
 8006bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bf6:	f001 fbf5 	bl	80083e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006bfa:	1d3a      	adds	r2, r7, #4
 8006bfc:	f107 0314 	add.w	r3, r7, #20
 8006c00:	4611      	mov	r1, r2
 8006c02:	4618      	mov	r0, r3
 8006c04:	f001 f83e 	bl	8007c84 <xTaskCheckForTimeOut>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d124      	bne.n	8006c58 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006c0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c10:	f000 fae8 	bl	80071e4 <prvIsQueueFull>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d018      	beq.n	8006c4c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1c:	3310      	adds	r3, #16
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	4611      	mov	r1, r2
 8006c22:	4618      	mov	r0, r3
 8006c24:	f000 ff92 	bl	8007b4c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006c28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c2a:	f000 fa73 	bl	8007114 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006c2e:	f000 fdd7 	bl	80077e0 <xTaskResumeAll>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f47f af7c 	bne.w	8006b32 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006c3a:	4b0c      	ldr	r3, [pc, #48]	; (8006c6c <xQueueGenericSend+0x1f8>)
 8006c3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c40:	601a      	str	r2, [r3, #0]
 8006c42:	f3bf 8f4f 	dsb	sy
 8006c46:	f3bf 8f6f 	isb	sy
 8006c4a:	e772      	b.n	8006b32 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006c4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c4e:	f000 fa61 	bl	8007114 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c52:	f000 fdc5 	bl	80077e0 <xTaskResumeAll>
 8006c56:	e76c      	b.n	8006b32 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006c58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c5a:	f000 fa5b 	bl	8007114 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c5e:	f000 fdbf 	bl	80077e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006c62:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3738      	adds	r7, #56	; 0x38
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	e000ed04 	.word	0xe000ed04

08006c70 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b08c      	sub	sp, #48	; 0x30
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	60b9      	str	r1, [r7, #8]
 8006c7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d10a      	bne.n	8006ca0 <xQueueReceive+0x30>
	__asm volatile
 8006c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8e:	f383 8811 	msr	BASEPRI, r3
 8006c92:	f3bf 8f6f 	isb	sy
 8006c96:	f3bf 8f4f 	dsb	sy
 8006c9a:	623b      	str	r3, [r7, #32]
}
 8006c9c:	bf00      	nop
 8006c9e:	e7fe      	b.n	8006c9e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d103      	bne.n	8006cae <xQueueReceive+0x3e>
 8006ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d101      	bne.n	8006cb2 <xQueueReceive+0x42>
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e000      	b.n	8006cb4 <xQueueReceive+0x44>
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d10a      	bne.n	8006cce <xQueueReceive+0x5e>
	__asm volatile
 8006cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cbc:	f383 8811 	msr	BASEPRI, r3
 8006cc0:	f3bf 8f6f 	isb	sy
 8006cc4:	f3bf 8f4f 	dsb	sy
 8006cc8:	61fb      	str	r3, [r7, #28]
}
 8006cca:	bf00      	nop
 8006ccc:	e7fe      	b.n	8006ccc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006cce:	f001 f921 	bl	8007f14 <xTaskGetSchedulerState>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d102      	bne.n	8006cde <xQueueReceive+0x6e>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d101      	bne.n	8006ce2 <xQueueReceive+0x72>
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e000      	b.n	8006ce4 <xQueueReceive+0x74>
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d10a      	bne.n	8006cfe <xQueueReceive+0x8e>
	__asm volatile
 8006ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cec:	f383 8811 	msr	BASEPRI, r3
 8006cf0:	f3bf 8f6f 	isb	sy
 8006cf4:	f3bf 8f4f 	dsb	sy
 8006cf8:	61bb      	str	r3, [r7, #24]
}
 8006cfa:	bf00      	nop
 8006cfc:	e7fe      	b.n	8006cfc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006cfe:	f001 fb41 	bl	8008384 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d06:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d01f      	beq.n	8006d4e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006d0e:	68b9      	ldr	r1, [r7, #8]
 8006d10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d12:	f000 f9d9 	bl	80070c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d18:	1e5a      	subs	r2, r3, #1
 8006d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00f      	beq.n	8006d46 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d28:	3310      	adds	r3, #16
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f000 ff32 	bl	8007b94 <xTaskRemoveFromEventList>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d007      	beq.n	8006d46 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006d36:	4b3d      	ldr	r3, [pc, #244]	; (8006e2c <xQueueReceive+0x1bc>)
 8006d38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d3c:	601a      	str	r2, [r3, #0]
 8006d3e:	f3bf 8f4f 	dsb	sy
 8006d42:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006d46:	f001 fb4d 	bl	80083e4 <vPortExitCritical>
				return pdPASS;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e069      	b.n	8006e22 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d103      	bne.n	8006d5c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d54:	f001 fb46 	bl	80083e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	e062      	b.n	8006e22 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d106      	bne.n	8006d70 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d62:	f107 0310 	add.w	r3, r7, #16
 8006d66:	4618      	mov	r0, r3
 8006d68:	f000 ff76 	bl	8007c58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d70:	f001 fb38 	bl	80083e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d74:	f000 fd26 	bl	80077c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d78:	f001 fb04 	bl	8008384 <vPortEnterCritical>
 8006d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d82:	b25b      	sxtb	r3, r3
 8006d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d88:	d103      	bne.n	8006d92 <xQueueReceive+0x122>
 8006d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d98:	b25b      	sxtb	r3, r3
 8006d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d9e:	d103      	bne.n	8006da8 <xQueueReceive+0x138>
 8006da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da2:	2200      	movs	r2, #0
 8006da4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006da8:	f001 fb1c 	bl	80083e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006dac:	1d3a      	adds	r2, r7, #4
 8006dae:	f107 0310 	add.w	r3, r7, #16
 8006db2:	4611      	mov	r1, r2
 8006db4:	4618      	mov	r0, r3
 8006db6:	f000 ff65 	bl	8007c84 <xTaskCheckForTimeOut>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d123      	bne.n	8006e08 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006dc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dc2:	f000 f9f9 	bl	80071b8 <prvIsQueueEmpty>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d017      	beq.n	8006dfc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dce:	3324      	adds	r3, #36	; 0x24
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	4611      	mov	r1, r2
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f000 feb9 	bl	8007b4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006dda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ddc:	f000 f99a 	bl	8007114 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006de0:	f000 fcfe 	bl	80077e0 <xTaskResumeAll>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d189      	bne.n	8006cfe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006dea:	4b10      	ldr	r3, [pc, #64]	; (8006e2c <xQueueReceive+0x1bc>)
 8006dec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006df0:	601a      	str	r2, [r3, #0]
 8006df2:	f3bf 8f4f 	dsb	sy
 8006df6:	f3bf 8f6f 	isb	sy
 8006dfa:	e780      	b.n	8006cfe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006dfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dfe:	f000 f989 	bl	8007114 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e02:	f000 fced 	bl	80077e0 <xTaskResumeAll>
 8006e06:	e77a      	b.n	8006cfe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006e08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e0a:	f000 f983 	bl	8007114 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e0e:	f000 fce7 	bl	80077e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e14:	f000 f9d0 	bl	80071b8 <prvIsQueueEmpty>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f43f af6f 	beq.w	8006cfe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006e20:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3730      	adds	r7, #48	; 0x30
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	e000ed04 	.word	0xe000ed04

08006e30 <xQueuePeek>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b08e      	sub	sp, #56	; 0x38
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d10a      	bne.n	8006e60 <xQueuePeek+0x30>
	__asm volatile
 8006e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e4e:	f383 8811 	msr	BASEPRI, r3
 8006e52:	f3bf 8f6f 	isb	sy
 8006e56:	f3bf 8f4f 	dsb	sy
 8006e5a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006e5c:	bf00      	nop
 8006e5e:	e7fe      	b.n	8006e5e <xQueuePeek+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d103      	bne.n	8006e6e <xQueuePeek+0x3e>
 8006e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d101      	bne.n	8006e72 <xQueuePeek+0x42>
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e000      	b.n	8006e74 <xQueuePeek+0x44>
 8006e72:	2300      	movs	r3, #0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d10a      	bne.n	8006e8e <xQueuePeek+0x5e>
	__asm volatile
 8006e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7c:	f383 8811 	msr	BASEPRI, r3
 8006e80:	f3bf 8f6f 	isb	sy
 8006e84:	f3bf 8f4f 	dsb	sy
 8006e88:	623b      	str	r3, [r7, #32]
}
 8006e8a:	bf00      	nop
 8006e8c:	e7fe      	b.n	8006e8c <xQueuePeek+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e8e:	f001 f841 	bl	8007f14 <xTaskGetSchedulerState>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d102      	bne.n	8006e9e <xQueuePeek+0x6e>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d101      	bne.n	8006ea2 <xQueuePeek+0x72>
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e000      	b.n	8006ea4 <xQueuePeek+0x74>
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d10a      	bne.n	8006ebe <xQueuePeek+0x8e>
	__asm volatile
 8006ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eac:	f383 8811 	msr	BASEPRI, r3
 8006eb0:	f3bf 8f6f 	isb	sy
 8006eb4:	f3bf 8f4f 	dsb	sy
 8006eb8:	61fb      	str	r3, [r7, #28]
}
 8006eba:	bf00      	nop
 8006ebc:	e7fe      	b.n	8006ebc <xQueuePeek+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ebe:	f001 fa61 	bl	8008384 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec6:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d021      	beq.n	8006f12 <xQueuePeek+0xe2>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8006ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006ed4:	68b9      	ldr	r1, [r7, #8]
 8006ed6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ed8:	f000 f8f6 	bl	80070c8 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8006edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ede:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ee0:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00f      	beq.n	8006f0a <xQueuePeek+0xda>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eec:	3324      	adds	r3, #36	; 0x24
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f000 fe50 	bl	8007b94 <xTaskRemoveFromEventList>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d007      	beq.n	8006f0a <xQueuePeek+0xda>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 8006efa:	4b3d      	ldr	r3, [pc, #244]	; (8006ff0 <xQueuePeek+0x1c0>)
 8006efc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f00:	601a      	str	r2, [r3, #0]
 8006f02:	f3bf 8f4f 	dsb	sy
 8006f06:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006f0a:	f001 fa6b 	bl	80083e4 <vPortExitCritical>
				return pdPASS;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e069      	b.n	8006fe6 <xQueuePeek+0x1b6>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d103      	bne.n	8006f20 <xQueuePeek+0xf0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f18:	f001 fa64 	bl	80083e4 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	e062      	b.n	8006fe6 <xQueuePeek+0x1b6>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d106      	bne.n	8006f34 <xQueuePeek+0x104>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f26:	f107 0314 	add.w	r3, r7, #20
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f000 fe94 	bl	8007c58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f30:	2301      	movs	r3, #1
 8006f32:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f34:	f001 fa56 	bl	80083e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f38:	f000 fc44 	bl	80077c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f3c:	f001 fa22 	bl	8008384 <vPortEnterCritical>
 8006f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f46:	b25b      	sxtb	r3, r3
 8006f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f4c:	d103      	bne.n	8006f56 <xQueuePeek+0x126>
 8006f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f50:	2200      	movs	r2, #0
 8006f52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f5c:	b25b      	sxtb	r3, r3
 8006f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f62:	d103      	bne.n	8006f6c <xQueuePeek+0x13c>
 8006f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f66:	2200      	movs	r2, #0
 8006f68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f6c:	f001 fa3a 	bl	80083e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f70:	1d3a      	adds	r2, r7, #4
 8006f72:	f107 0314 	add.w	r3, r7, #20
 8006f76:	4611      	mov	r1, r2
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f000 fe83 	bl	8007c84 <xTaskCheckForTimeOut>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d123      	bne.n	8006fcc <xQueuePeek+0x19c>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f86:	f000 f917 	bl	80071b8 <prvIsQueueEmpty>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d017      	beq.n	8006fc0 <xQueuePeek+0x190>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f92:	3324      	adds	r3, #36	; 0x24
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	4611      	mov	r1, r2
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f000 fdd7 	bl	8007b4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fa0:	f000 f8b8 	bl	8007114 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006fa4:	f000 fc1c 	bl	80077e0 <xTaskResumeAll>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d187      	bne.n	8006ebe <xQueuePeek+0x8e>
				{
					portYIELD_WITHIN_API();
 8006fae:	4b10      	ldr	r3, [pc, #64]	; (8006ff0 <xQueuePeek+0x1c0>)
 8006fb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fb4:	601a      	str	r2, [r3, #0]
 8006fb6:	f3bf 8f4f 	dsb	sy
 8006fba:	f3bf 8f6f 	isb	sy
 8006fbe:	e77e      	b.n	8006ebe <xQueuePeek+0x8e>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 8006fc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fc2:	f000 f8a7 	bl	8007114 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006fc6:	f000 fc0b 	bl	80077e0 <xTaskResumeAll>
 8006fca:	e778      	b.n	8006ebe <xQueuePeek+0x8e>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 8006fcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fce:	f000 f8a1 	bl	8007114 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006fd2:	f000 fc05 	bl	80077e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fd8:	f000 f8ee 	bl	80071b8 <prvIsQueueEmpty>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	f43f af6d 	beq.w	8006ebe <xQueuePeek+0x8e>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006fe4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3738      	adds	r7, #56	; 0x38
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	e000ed04 	.word	0xe000ed04

08006ff4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b086      	sub	sp, #24
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007000:	2300      	movs	r3, #0
 8007002:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007008:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700e:	2b00      	cmp	r3, #0
 8007010:	d10d      	bne.n	800702e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d14d      	bne.n	80070b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	4618      	mov	r0, r3
 8007020:	f000 ff96 	bl	8007f50 <xTaskPriorityDisinherit>
 8007024:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2200      	movs	r2, #0
 800702a:	609a      	str	r2, [r3, #8]
 800702c:	e043      	b.n	80070b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d119      	bne.n	8007068 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6858      	ldr	r0, [r3, #4]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703c:	461a      	mov	r2, r3
 800703e:	68b9      	ldr	r1, [r7, #8]
 8007040:	f001 fd8f 	bl	8008b62 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	685a      	ldr	r2, [r3, #4]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704c:	441a      	add	r2, r3
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	685a      	ldr	r2, [r3, #4]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	429a      	cmp	r2, r3
 800705c:	d32b      	bcc.n	80070b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	605a      	str	r2, [r3, #4]
 8007066:	e026      	b.n	80070b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	68d8      	ldr	r0, [r3, #12]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007070:	461a      	mov	r2, r3
 8007072:	68b9      	ldr	r1, [r7, #8]
 8007074:	f001 fd75 	bl	8008b62 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	68da      	ldr	r2, [r3, #12]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007080:	425b      	negs	r3, r3
 8007082:	441a      	add	r2, r3
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	68da      	ldr	r2, [r3, #12]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	429a      	cmp	r2, r3
 8007092:	d207      	bcs.n	80070a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	689a      	ldr	r2, [r3, #8]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709c:	425b      	negs	r3, r3
 800709e:	441a      	add	r2, r3
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d105      	bne.n	80070b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d002      	beq.n	80070b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	3b01      	subs	r3, #1
 80070b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	1c5a      	adds	r2, r3, #1
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80070be:	697b      	ldr	r3, [r7, #20]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3718      	adds	r7, #24
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d018      	beq.n	800710c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	68da      	ldr	r2, [r3, #12]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e2:	441a      	add	r2, r3
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	68da      	ldr	r2, [r3, #12]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d303      	bcc.n	80070fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	68d9      	ldr	r1, [r3, #12]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007104:	461a      	mov	r2, r3
 8007106:	6838      	ldr	r0, [r7, #0]
 8007108:	f001 fd2b 	bl	8008b62 <memcpy>
	}
}
 800710c:	bf00      	nop
 800710e:	3708      	adds	r7, #8
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800711c:	f001 f932 	bl	8008384 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007126:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007128:	e011      	b.n	800714e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712e:	2b00      	cmp	r3, #0
 8007130:	d012      	beq.n	8007158 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	3324      	adds	r3, #36	; 0x24
 8007136:	4618      	mov	r0, r3
 8007138:	f000 fd2c 	bl	8007b94 <xTaskRemoveFromEventList>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d001      	beq.n	8007146 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007142:	f000 fe01 	bl	8007d48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007146:	7bfb      	ldrb	r3, [r7, #15]
 8007148:	3b01      	subs	r3, #1
 800714a:	b2db      	uxtb	r3, r3
 800714c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800714e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007152:	2b00      	cmp	r3, #0
 8007154:	dce9      	bgt.n	800712a <prvUnlockQueue+0x16>
 8007156:	e000      	b.n	800715a <prvUnlockQueue+0x46>
					break;
 8007158:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	22ff      	movs	r2, #255	; 0xff
 800715e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007162:	f001 f93f 	bl	80083e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007166:	f001 f90d 	bl	8008384 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007170:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007172:	e011      	b.n	8007198 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d012      	beq.n	80071a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	3310      	adds	r3, #16
 8007180:	4618      	mov	r0, r3
 8007182:	f000 fd07 	bl	8007b94 <xTaskRemoveFromEventList>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d001      	beq.n	8007190 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800718c:	f000 fddc 	bl	8007d48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007190:	7bbb      	ldrb	r3, [r7, #14]
 8007192:	3b01      	subs	r3, #1
 8007194:	b2db      	uxtb	r3, r3
 8007196:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007198:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800719c:	2b00      	cmp	r3, #0
 800719e:	dce9      	bgt.n	8007174 <prvUnlockQueue+0x60>
 80071a0:	e000      	b.n	80071a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80071a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	22ff      	movs	r2, #255	; 0xff
 80071a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80071ac:	f001 f91a 	bl	80083e4 <vPortExitCritical>
}
 80071b0:	bf00      	nop
 80071b2:	3710      	adds	r7, #16
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80071c0:	f001 f8e0 	bl	8008384 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d102      	bne.n	80071d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80071cc:	2301      	movs	r3, #1
 80071ce:	60fb      	str	r3, [r7, #12]
 80071d0:	e001      	b.n	80071d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80071d2:	2300      	movs	r3, #0
 80071d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80071d6:	f001 f905 	bl	80083e4 <vPortExitCritical>

	return xReturn;
 80071da:	68fb      	ldr	r3, [r7, #12]
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3710      	adds	r7, #16
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80071ec:	f001 f8ca 	bl	8008384 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d102      	bne.n	8007202 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80071fc:	2301      	movs	r3, #1
 80071fe:	60fb      	str	r3, [r7, #12]
 8007200:	e001      	b.n	8007206 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007202:	2300      	movs	r3, #0
 8007204:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007206:	f001 f8ed 	bl	80083e4 <vPortExitCritical>

	return xReturn;
 800720a:	68fb      	ldr	r3, [r7, #12]
}
 800720c:	4618      	mov	r0, r3
 800720e:	3710      	adds	r7, #16
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007214:	b580      	push	{r7, lr}
 8007216:	b08e      	sub	sp, #56	; 0x38
 8007218:	af04      	add	r7, sp, #16
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	607a      	str	r2, [r7, #4]
 8007220:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10a      	bne.n	800723e <xTaskCreateStatic+0x2a>
	__asm volatile
 8007228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800722c:	f383 8811 	msr	BASEPRI, r3
 8007230:	f3bf 8f6f 	isb	sy
 8007234:	f3bf 8f4f 	dsb	sy
 8007238:	623b      	str	r3, [r7, #32]
}
 800723a:	bf00      	nop
 800723c:	e7fe      	b.n	800723c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800723e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007240:	2b00      	cmp	r3, #0
 8007242:	d10a      	bne.n	800725a <xTaskCreateStatic+0x46>
	__asm volatile
 8007244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007248:	f383 8811 	msr	BASEPRI, r3
 800724c:	f3bf 8f6f 	isb	sy
 8007250:	f3bf 8f4f 	dsb	sy
 8007254:	61fb      	str	r3, [r7, #28]
}
 8007256:	bf00      	nop
 8007258:	e7fe      	b.n	8007258 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800725a:	23b4      	movs	r3, #180	; 0xb4
 800725c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	2bb4      	cmp	r3, #180	; 0xb4
 8007262:	d00a      	beq.n	800727a <xTaskCreateStatic+0x66>
	__asm volatile
 8007264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007268:	f383 8811 	msr	BASEPRI, r3
 800726c:	f3bf 8f6f 	isb	sy
 8007270:	f3bf 8f4f 	dsb	sy
 8007274:	61bb      	str	r3, [r7, #24]
}
 8007276:	bf00      	nop
 8007278:	e7fe      	b.n	8007278 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800727a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800727c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800727e:	2b00      	cmp	r3, #0
 8007280:	d01e      	beq.n	80072c0 <xTaskCreateStatic+0xac>
 8007282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007284:	2b00      	cmp	r3, #0
 8007286:	d01b      	beq.n	80072c0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800728a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800728c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007290:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007294:	2202      	movs	r2, #2
 8007296:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800729a:	2300      	movs	r3, #0
 800729c:	9303      	str	r3, [sp, #12]
 800729e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a0:	9302      	str	r3, [sp, #8]
 80072a2:	f107 0314 	add.w	r3, r7, #20
 80072a6:	9301      	str	r3, [sp, #4]
 80072a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072aa:	9300      	str	r3, [sp, #0]
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	68b9      	ldr	r1, [r7, #8]
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f000 f850 	bl	8007358 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80072ba:	f000 f8eb 	bl	8007494 <prvAddNewTaskToReadyList>
 80072be:	e001      	b.n	80072c4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80072c0:	2300      	movs	r3, #0
 80072c2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80072c4:	697b      	ldr	r3, [r7, #20]
	}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3728      	adds	r7, #40	; 0x28
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b08c      	sub	sp, #48	; 0x30
 80072d2:	af04      	add	r7, sp, #16
 80072d4:	60f8      	str	r0, [r7, #12]
 80072d6:	60b9      	str	r1, [r7, #8]
 80072d8:	603b      	str	r3, [r7, #0]
 80072da:	4613      	mov	r3, r2
 80072dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80072de:	88fb      	ldrh	r3, [r7, #6]
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	4618      	mov	r0, r3
 80072e4:	f001 f930 	bl	8008548 <pvPortMalloc>
 80072e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00e      	beq.n	800730e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80072f0:	20b4      	movs	r0, #180	; 0xb4
 80072f2:	f001 f929 	bl	8008548 <pvPortMalloc>
 80072f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d003      	beq.n	8007306 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	697a      	ldr	r2, [r7, #20]
 8007302:	631a      	str	r2, [r3, #48]	; 0x30
 8007304:	e005      	b.n	8007312 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007306:	6978      	ldr	r0, [r7, #20]
 8007308:	f001 f9ea 	bl	80086e0 <vPortFree>
 800730c:	e001      	b.n	8007312 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800730e:	2300      	movs	r3, #0
 8007310:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d017      	beq.n	8007348 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	2200      	movs	r2, #0
 800731c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007320:	88fa      	ldrh	r2, [r7, #6]
 8007322:	2300      	movs	r3, #0
 8007324:	9303      	str	r3, [sp, #12]
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	9302      	str	r3, [sp, #8]
 800732a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800732c:	9301      	str	r3, [sp, #4]
 800732e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007330:	9300      	str	r3, [sp, #0]
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	68b9      	ldr	r1, [r7, #8]
 8007336:	68f8      	ldr	r0, [r7, #12]
 8007338:	f000 f80e 	bl	8007358 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800733c:	69f8      	ldr	r0, [r7, #28]
 800733e:	f000 f8a9 	bl	8007494 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007342:	2301      	movs	r3, #1
 8007344:	61bb      	str	r3, [r7, #24]
 8007346:	e002      	b.n	800734e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007348:	f04f 33ff 	mov.w	r3, #4294967295
 800734c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800734e:	69bb      	ldr	r3, [r7, #24]
	}
 8007350:	4618      	mov	r0, r3
 8007352:	3720      	adds	r7, #32
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b088      	sub	sp, #32
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	607a      	str	r2, [r7, #4]
 8007364:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007368:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007370:	3b01      	subs	r3, #1
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	4413      	add	r3, r2
 8007376:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007378:	69bb      	ldr	r3, [r7, #24]
 800737a:	f023 0307 	bic.w	r3, r3, #7
 800737e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	f003 0307 	and.w	r3, r3, #7
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00a      	beq.n	80073a0 <prvInitialiseNewTask+0x48>
	__asm volatile
 800738a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800738e:	f383 8811 	msr	BASEPRI, r3
 8007392:	f3bf 8f6f 	isb	sy
 8007396:	f3bf 8f4f 	dsb	sy
 800739a:	617b      	str	r3, [r7, #20]
}
 800739c:	bf00      	nop
 800739e:	e7fe      	b.n	800739e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d01f      	beq.n	80073e6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073a6:	2300      	movs	r3, #0
 80073a8:	61fb      	str	r3, [r7, #28]
 80073aa:	e012      	b.n	80073d2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80073ac:	68ba      	ldr	r2, [r7, #8]
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	4413      	add	r3, r2
 80073b2:	7819      	ldrb	r1, [r3, #0]
 80073b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	4413      	add	r3, r2
 80073ba:	3334      	adds	r3, #52	; 0x34
 80073bc:	460a      	mov	r2, r1
 80073be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80073c0:	68ba      	ldr	r2, [r7, #8]
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	4413      	add	r3, r2
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d006      	beq.n	80073da <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	3301      	adds	r3, #1
 80073d0:	61fb      	str	r3, [r7, #28]
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	2b0f      	cmp	r3, #15
 80073d6:	d9e9      	bls.n	80073ac <prvInitialiseNewTask+0x54>
 80073d8:	e000      	b.n	80073dc <prvInitialiseNewTask+0x84>
			{
				break;
 80073da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80073dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073de:	2200      	movs	r2, #0
 80073e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80073e4:	e003      	b.n	80073ee <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80073e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e8:	2200      	movs	r2, #0
 80073ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80073ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f0:	2b06      	cmp	r3, #6
 80073f2:	d901      	bls.n	80073f8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80073f4:	2306      	movs	r3, #6
 80073f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80073f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80073fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007400:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007402:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007406:	2200      	movs	r2, #0
 8007408:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800740a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740c:	3304      	adds	r3, #4
 800740e:	4618      	mov	r0, r3
 8007410:	f7ff f9da 	bl	80067c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007416:	3318      	adds	r3, #24
 8007418:	4618      	mov	r0, r3
 800741a:	f7ff f9d5 	bl	80067c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800741e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007422:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007426:	f1c3 0207 	rsb	r2, r3, #7
 800742a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800742e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007432:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007436:	2200      	movs	r2, #0
 8007438:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800743c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743e:	2200      	movs	r2, #0
 8007440:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007446:	334c      	adds	r3, #76	; 0x4c
 8007448:	2260      	movs	r2, #96	; 0x60
 800744a:	2100      	movs	r1, #0
 800744c:	4618      	mov	r0, r3
 800744e:	f001 fb96 	bl	8008b7e <memset>
 8007452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007454:	4a0c      	ldr	r2, [pc, #48]	; (8007488 <prvInitialiseNewTask+0x130>)
 8007456:	651a      	str	r2, [r3, #80]	; 0x50
 8007458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745a:	4a0c      	ldr	r2, [pc, #48]	; (800748c <prvInitialiseNewTask+0x134>)
 800745c:	655a      	str	r2, [r3, #84]	; 0x54
 800745e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007460:	4a0b      	ldr	r2, [pc, #44]	; (8007490 <prvInitialiseNewTask+0x138>)
 8007462:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007464:	683a      	ldr	r2, [r7, #0]
 8007466:	68f9      	ldr	r1, [r7, #12]
 8007468:	69b8      	ldr	r0, [r7, #24]
 800746a:	f000 fe5d 	bl	8008128 <pxPortInitialiseStack>
 800746e:	4602      	mov	r2, r0
 8007470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007472:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007476:	2b00      	cmp	r3, #0
 8007478:	d002      	beq.n	8007480 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800747a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800747c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800747e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007480:	bf00      	nop
 8007482:	3720      	adds	r7, #32
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}
 8007488:	0800d46c 	.word	0x0800d46c
 800748c:	0800d48c 	.word	0x0800d48c
 8007490:	0800d44c 	.word	0x0800d44c

08007494 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800749c:	f000 ff72 	bl	8008384 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80074a0:	4b2a      	ldr	r3, [pc, #168]	; (800754c <prvAddNewTaskToReadyList+0xb8>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	3301      	adds	r3, #1
 80074a6:	4a29      	ldr	r2, [pc, #164]	; (800754c <prvAddNewTaskToReadyList+0xb8>)
 80074a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80074aa:	4b29      	ldr	r3, [pc, #164]	; (8007550 <prvAddNewTaskToReadyList+0xbc>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d109      	bne.n	80074c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80074b2:	4a27      	ldr	r2, [pc, #156]	; (8007550 <prvAddNewTaskToReadyList+0xbc>)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80074b8:	4b24      	ldr	r3, [pc, #144]	; (800754c <prvAddNewTaskToReadyList+0xb8>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d110      	bne.n	80074e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80074c0:	f000 fc66 	bl	8007d90 <prvInitialiseTaskLists>
 80074c4:	e00d      	b.n	80074e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80074c6:	4b23      	ldr	r3, [pc, #140]	; (8007554 <prvAddNewTaskToReadyList+0xc0>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d109      	bne.n	80074e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80074ce:	4b20      	ldr	r3, [pc, #128]	; (8007550 <prvAddNewTaskToReadyList+0xbc>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d8:	429a      	cmp	r2, r3
 80074da:	d802      	bhi.n	80074e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80074dc:	4a1c      	ldr	r2, [pc, #112]	; (8007550 <prvAddNewTaskToReadyList+0xbc>)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80074e2:	4b1d      	ldr	r3, [pc, #116]	; (8007558 <prvAddNewTaskToReadyList+0xc4>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	3301      	adds	r3, #1
 80074e8:	4a1b      	ldr	r2, [pc, #108]	; (8007558 <prvAddNewTaskToReadyList+0xc4>)
 80074ea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f0:	2201      	movs	r2, #1
 80074f2:	409a      	lsls	r2, r3
 80074f4:	4b19      	ldr	r3, [pc, #100]	; (800755c <prvAddNewTaskToReadyList+0xc8>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4313      	orrs	r3, r2
 80074fa:	4a18      	ldr	r2, [pc, #96]	; (800755c <prvAddNewTaskToReadyList+0xc8>)
 80074fc:	6013      	str	r3, [r2, #0]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007502:	4613      	mov	r3, r2
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	4413      	add	r3, r2
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4a15      	ldr	r2, [pc, #84]	; (8007560 <prvAddNewTaskToReadyList+0xcc>)
 800750c:	441a      	add	r2, r3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	3304      	adds	r3, #4
 8007512:	4619      	mov	r1, r3
 8007514:	4610      	mov	r0, r2
 8007516:	f7ff f964 	bl	80067e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800751a:	f000 ff63 	bl	80083e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800751e:	4b0d      	ldr	r3, [pc, #52]	; (8007554 <prvAddNewTaskToReadyList+0xc0>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00e      	beq.n	8007544 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007526:	4b0a      	ldr	r3, [pc, #40]	; (8007550 <prvAddNewTaskToReadyList+0xbc>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007530:	429a      	cmp	r2, r3
 8007532:	d207      	bcs.n	8007544 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007534:	4b0b      	ldr	r3, [pc, #44]	; (8007564 <prvAddNewTaskToReadyList+0xd0>)
 8007536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800753a:	601a      	str	r2, [r3, #0]
 800753c:	f3bf 8f4f 	dsb	sy
 8007540:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007544:	bf00      	nop
 8007546:	3708      	adds	r7, #8
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}
 800754c:	200008c8 	.word	0x200008c8
 8007550:	200007c8 	.word	0x200007c8
 8007554:	200008d4 	.word	0x200008d4
 8007558:	200008e4 	.word	0x200008e4
 800755c:	200008d0 	.word	0x200008d0
 8007560:	200007cc 	.word	0x200007cc
 8007564:	e000ed04 	.word	0xe000ed04

08007568 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8007568:	b580      	push	{r7, lr}
 800756a:	b084      	sub	sp, #16
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007570:	f000 ff08 	bl	8008384 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d102      	bne.n	8007580 <vTaskDelete+0x18>
 800757a:	4b39      	ldr	r3, [pc, #228]	; (8007660 <vTaskDelete+0xf8>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	e000      	b.n	8007582 <vTaskDelete+0x1a>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	3304      	adds	r3, #4
 8007588:	4618      	mov	r0, r3
 800758a:	f7ff f987 	bl	800689c <uxListRemove>
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d115      	bne.n	80075c0 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007598:	4932      	ldr	r1, [pc, #200]	; (8007664 <vTaskDelete+0xfc>)
 800759a:	4613      	mov	r3, r2
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	4413      	add	r3, r2
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	440b      	add	r3, r1
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d10a      	bne.n	80075c0 <vTaskDelete+0x58>
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ae:	2201      	movs	r2, #1
 80075b0:	fa02 f303 	lsl.w	r3, r2, r3
 80075b4:	43da      	mvns	r2, r3
 80075b6:	4b2c      	ldr	r3, [pc, #176]	; (8007668 <vTaskDelete+0x100>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4013      	ands	r3, r2
 80075bc:	4a2a      	ldr	r2, [pc, #168]	; (8007668 <vTaskDelete+0x100>)
 80075be:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d004      	beq.n	80075d2 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	3318      	adds	r3, #24
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7ff f965 	bl	800689c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80075d2:	4b26      	ldr	r3, [pc, #152]	; (800766c <vTaskDelete+0x104>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	3301      	adds	r3, #1
 80075d8:	4a24      	ldr	r2, [pc, #144]	; (800766c <vTaskDelete+0x104>)
 80075da:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80075dc:	4b20      	ldr	r3, [pc, #128]	; (8007660 <vTaskDelete+0xf8>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	68fa      	ldr	r2, [r7, #12]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d10b      	bne.n	80075fe <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	3304      	adds	r3, #4
 80075ea:	4619      	mov	r1, r3
 80075ec:	4820      	ldr	r0, [pc, #128]	; (8007670 <vTaskDelete+0x108>)
 80075ee:	f7ff f8f8 	bl	80067e2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80075f2:	4b20      	ldr	r3, [pc, #128]	; (8007674 <vTaskDelete+0x10c>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	3301      	adds	r3, #1
 80075f8:	4a1e      	ldr	r2, [pc, #120]	; (8007674 <vTaskDelete+0x10c>)
 80075fa:	6013      	str	r3, [r2, #0]
 80075fc:	e009      	b.n	8007612 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80075fe:	4b1e      	ldr	r3, [pc, #120]	; (8007678 <vTaskDelete+0x110>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	3b01      	subs	r3, #1
 8007604:	4a1c      	ldr	r2, [pc, #112]	; (8007678 <vTaskDelete+0x110>)
 8007606:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8007608:	68f8      	ldr	r0, [r7, #12]
 800760a:	f000 fc2f 	bl	8007e6c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800760e:	f000 fc61 	bl	8007ed4 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8007612:	f000 fee7 	bl	80083e4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8007616:	4b19      	ldr	r3, [pc, #100]	; (800767c <vTaskDelete+0x114>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d01b      	beq.n	8007656 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800761e:	4b10      	ldr	r3, [pc, #64]	; (8007660 <vTaskDelete+0xf8>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	68fa      	ldr	r2, [r7, #12]
 8007624:	429a      	cmp	r2, r3
 8007626:	d116      	bne.n	8007656 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8007628:	4b15      	ldr	r3, [pc, #84]	; (8007680 <vTaskDelete+0x118>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d00a      	beq.n	8007646 <vTaskDelete+0xde>
	__asm volatile
 8007630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007634:	f383 8811 	msr	BASEPRI, r3
 8007638:	f3bf 8f6f 	isb	sy
 800763c:	f3bf 8f4f 	dsb	sy
 8007640:	60bb      	str	r3, [r7, #8]
}
 8007642:	bf00      	nop
 8007644:	e7fe      	b.n	8007644 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8007646:	4b0f      	ldr	r3, [pc, #60]	; (8007684 <vTaskDelete+0x11c>)
 8007648:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800764c:	601a      	str	r2, [r3, #0]
 800764e:	f3bf 8f4f 	dsb	sy
 8007652:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007656:	bf00      	nop
 8007658:	3710      	adds	r7, #16
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	200007c8 	.word	0x200007c8
 8007664:	200007cc 	.word	0x200007cc
 8007668:	200008d0 	.word	0x200008d0
 800766c:	200008e4 	.word	0x200008e4
 8007670:	2000089c 	.word	0x2000089c
 8007674:	200008b0 	.word	0x200008b0
 8007678:	200008c8 	.word	0x200008c8
 800767c:	200008d4 	.word	0x200008d4
 8007680:	200008f0 	.word	0x200008f0
 8007684:	e000ed04 	.word	0xe000ed04

08007688 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007690:	2300      	movs	r3, #0
 8007692:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d017      	beq.n	80076ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800769a:	4b13      	ldr	r3, [pc, #76]	; (80076e8 <vTaskDelay+0x60>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00a      	beq.n	80076b8 <vTaskDelay+0x30>
	__asm volatile
 80076a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a6:	f383 8811 	msr	BASEPRI, r3
 80076aa:	f3bf 8f6f 	isb	sy
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	60bb      	str	r3, [r7, #8]
}
 80076b4:	bf00      	nop
 80076b6:	e7fe      	b.n	80076b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80076b8:	f000 f884 	bl	80077c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80076bc:	2100      	movs	r1, #0
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 fccc 	bl	800805c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80076c4:	f000 f88c 	bl	80077e0 <xTaskResumeAll>
 80076c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d107      	bne.n	80076e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80076d0:	4b06      	ldr	r3, [pc, #24]	; (80076ec <vTaskDelay+0x64>)
 80076d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076d6:	601a      	str	r2, [r3, #0]
 80076d8:	f3bf 8f4f 	dsb	sy
 80076dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80076e0:	bf00      	nop
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	200008f0 	.word	0x200008f0
 80076ec:	e000ed04 	.word	0xe000ed04

080076f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b08a      	sub	sp, #40	; 0x28
 80076f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80076f6:	2300      	movs	r3, #0
 80076f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80076fa:	2300      	movs	r3, #0
 80076fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80076fe:	463a      	mov	r2, r7
 8007700:	1d39      	adds	r1, r7, #4
 8007702:	f107 0308 	add.w	r3, r7, #8
 8007706:	4618      	mov	r0, r3
 8007708:	f7fa f8fa 	bl	8001900 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800770c:	6839      	ldr	r1, [r7, #0]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	68ba      	ldr	r2, [r7, #8]
 8007712:	9202      	str	r2, [sp, #8]
 8007714:	9301      	str	r3, [sp, #4]
 8007716:	2300      	movs	r3, #0
 8007718:	9300      	str	r3, [sp, #0]
 800771a:	2300      	movs	r3, #0
 800771c:	460a      	mov	r2, r1
 800771e:	4921      	ldr	r1, [pc, #132]	; (80077a4 <vTaskStartScheduler+0xb4>)
 8007720:	4821      	ldr	r0, [pc, #132]	; (80077a8 <vTaskStartScheduler+0xb8>)
 8007722:	f7ff fd77 	bl	8007214 <xTaskCreateStatic>
 8007726:	4603      	mov	r3, r0
 8007728:	4a20      	ldr	r2, [pc, #128]	; (80077ac <vTaskStartScheduler+0xbc>)
 800772a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800772c:	4b1f      	ldr	r3, [pc, #124]	; (80077ac <vTaskStartScheduler+0xbc>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d002      	beq.n	800773a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007734:	2301      	movs	r3, #1
 8007736:	617b      	str	r3, [r7, #20]
 8007738:	e001      	b.n	800773e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800773a:	2300      	movs	r3, #0
 800773c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	2b01      	cmp	r3, #1
 8007742:	d11b      	bne.n	800777c <vTaskStartScheduler+0x8c>
	__asm volatile
 8007744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007748:	f383 8811 	msr	BASEPRI, r3
 800774c:	f3bf 8f6f 	isb	sy
 8007750:	f3bf 8f4f 	dsb	sy
 8007754:	613b      	str	r3, [r7, #16]
}
 8007756:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007758:	4b15      	ldr	r3, [pc, #84]	; (80077b0 <vTaskStartScheduler+0xc0>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	334c      	adds	r3, #76	; 0x4c
 800775e:	4a15      	ldr	r2, [pc, #84]	; (80077b4 <vTaskStartScheduler+0xc4>)
 8007760:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007762:	4b15      	ldr	r3, [pc, #84]	; (80077b8 <vTaskStartScheduler+0xc8>)
 8007764:	f04f 32ff 	mov.w	r2, #4294967295
 8007768:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800776a:	4b14      	ldr	r3, [pc, #80]	; (80077bc <vTaskStartScheduler+0xcc>)
 800776c:	2201      	movs	r2, #1
 800776e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007770:	4b13      	ldr	r3, [pc, #76]	; (80077c0 <vTaskStartScheduler+0xd0>)
 8007772:	2200      	movs	r2, #0
 8007774:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007776:	f000 fd63 	bl	8008240 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800777a:	e00e      	b.n	800779a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007782:	d10a      	bne.n	800779a <vTaskStartScheduler+0xaa>
	__asm volatile
 8007784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007788:	f383 8811 	msr	BASEPRI, r3
 800778c:	f3bf 8f6f 	isb	sy
 8007790:	f3bf 8f4f 	dsb	sy
 8007794:	60fb      	str	r3, [r7, #12]
}
 8007796:	bf00      	nop
 8007798:	e7fe      	b.n	8007798 <vTaskStartScheduler+0xa8>
}
 800779a:	bf00      	nop
 800779c:	3718      	adds	r7, #24
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	0800d42c 	.word	0x0800d42c
 80077a8:	08007d61 	.word	0x08007d61
 80077ac:	200008ec 	.word	0x200008ec
 80077b0:	200007c8 	.word	0x200007c8
 80077b4:	20000020 	.word	0x20000020
 80077b8:	200008e8 	.word	0x200008e8
 80077bc:	200008d4 	.word	0x200008d4
 80077c0:	200008cc 	.word	0x200008cc

080077c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80077c4:	b480      	push	{r7}
 80077c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80077c8:	4b04      	ldr	r3, [pc, #16]	; (80077dc <vTaskSuspendAll+0x18>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	3301      	adds	r3, #1
 80077ce:	4a03      	ldr	r2, [pc, #12]	; (80077dc <vTaskSuspendAll+0x18>)
 80077d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80077d2:	bf00      	nop
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr
 80077dc:	200008f0 	.word	0x200008f0

080077e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80077e6:	2300      	movs	r3, #0
 80077e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80077ea:	2300      	movs	r3, #0
 80077ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80077ee:	4b41      	ldr	r3, [pc, #260]	; (80078f4 <xTaskResumeAll+0x114>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d10a      	bne.n	800780c <xTaskResumeAll+0x2c>
	__asm volatile
 80077f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fa:	f383 8811 	msr	BASEPRI, r3
 80077fe:	f3bf 8f6f 	isb	sy
 8007802:	f3bf 8f4f 	dsb	sy
 8007806:	603b      	str	r3, [r7, #0]
}
 8007808:	bf00      	nop
 800780a:	e7fe      	b.n	800780a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800780c:	f000 fdba 	bl	8008384 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007810:	4b38      	ldr	r3, [pc, #224]	; (80078f4 <xTaskResumeAll+0x114>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	3b01      	subs	r3, #1
 8007816:	4a37      	ldr	r2, [pc, #220]	; (80078f4 <xTaskResumeAll+0x114>)
 8007818:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800781a:	4b36      	ldr	r3, [pc, #216]	; (80078f4 <xTaskResumeAll+0x114>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d161      	bne.n	80078e6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007822:	4b35      	ldr	r3, [pc, #212]	; (80078f8 <xTaskResumeAll+0x118>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d05d      	beq.n	80078e6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800782a:	e02e      	b.n	800788a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800782c:	4b33      	ldr	r3, [pc, #204]	; (80078fc <xTaskResumeAll+0x11c>)
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	68db      	ldr	r3, [r3, #12]
 8007832:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	3318      	adds	r3, #24
 8007838:	4618      	mov	r0, r3
 800783a:	f7ff f82f 	bl	800689c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	3304      	adds	r3, #4
 8007842:	4618      	mov	r0, r3
 8007844:	f7ff f82a 	bl	800689c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800784c:	2201      	movs	r2, #1
 800784e:	409a      	lsls	r2, r3
 8007850:	4b2b      	ldr	r3, [pc, #172]	; (8007900 <xTaskResumeAll+0x120>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4313      	orrs	r3, r2
 8007856:	4a2a      	ldr	r2, [pc, #168]	; (8007900 <xTaskResumeAll+0x120>)
 8007858:	6013      	str	r3, [r2, #0]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800785e:	4613      	mov	r3, r2
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	4413      	add	r3, r2
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	4a27      	ldr	r2, [pc, #156]	; (8007904 <xTaskResumeAll+0x124>)
 8007868:	441a      	add	r2, r3
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	3304      	adds	r3, #4
 800786e:	4619      	mov	r1, r3
 8007870:	4610      	mov	r0, r2
 8007872:	f7fe ffb6 	bl	80067e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800787a:	4b23      	ldr	r3, [pc, #140]	; (8007908 <xTaskResumeAll+0x128>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007880:	429a      	cmp	r2, r3
 8007882:	d302      	bcc.n	800788a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007884:	4b21      	ldr	r3, [pc, #132]	; (800790c <xTaskResumeAll+0x12c>)
 8007886:	2201      	movs	r2, #1
 8007888:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800788a:	4b1c      	ldr	r3, [pc, #112]	; (80078fc <xTaskResumeAll+0x11c>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d1cc      	bne.n	800782c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d001      	beq.n	800789c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007898:	f000 fb1c 	bl	8007ed4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800789c:	4b1c      	ldr	r3, [pc, #112]	; (8007910 <xTaskResumeAll+0x130>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d010      	beq.n	80078ca <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80078a8:	f000 f836 	bl	8007918 <xTaskIncrementTick>
 80078ac:	4603      	mov	r3, r0
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d002      	beq.n	80078b8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80078b2:	4b16      	ldr	r3, [pc, #88]	; (800790c <xTaskResumeAll+0x12c>)
 80078b4:	2201      	movs	r2, #1
 80078b6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	3b01      	subs	r3, #1
 80078bc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d1f1      	bne.n	80078a8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80078c4:	4b12      	ldr	r3, [pc, #72]	; (8007910 <xTaskResumeAll+0x130>)
 80078c6:	2200      	movs	r2, #0
 80078c8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80078ca:	4b10      	ldr	r3, [pc, #64]	; (800790c <xTaskResumeAll+0x12c>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d009      	beq.n	80078e6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80078d2:	2301      	movs	r3, #1
 80078d4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80078d6:	4b0f      	ldr	r3, [pc, #60]	; (8007914 <xTaskResumeAll+0x134>)
 80078d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078dc:	601a      	str	r2, [r3, #0]
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80078e6:	f000 fd7d 	bl	80083e4 <vPortExitCritical>

	return xAlreadyYielded;
 80078ea:	68bb      	ldr	r3, [r7, #8]
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3710      	adds	r7, #16
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	200008f0 	.word	0x200008f0
 80078f8:	200008c8 	.word	0x200008c8
 80078fc:	20000888 	.word	0x20000888
 8007900:	200008d0 	.word	0x200008d0
 8007904:	200007cc 	.word	0x200007cc
 8007908:	200007c8 	.word	0x200007c8
 800790c:	200008dc 	.word	0x200008dc
 8007910:	200008d8 	.word	0x200008d8
 8007914:	e000ed04 	.word	0xe000ed04

08007918 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b086      	sub	sp, #24
 800791c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800791e:	2300      	movs	r3, #0
 8007920:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007922:	4b4e      	ldr	r3, [pc, #312]	; (8007a5c <xTaskIncrementTick+0x144>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2b00      	cmp	r3, #0
 8007928:	f040 808e 	bne.w	8007a48 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800792c:	4b4c      	ldr	r3, [pc, #304]	; (8007a60 <xTaskIncrementTick+0x148>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	3301      	adds	r3, #1
 8007932:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007934:	4a4a      	ldr	r2, [pc, #296]	; (8007a60 <xTaskIncrementTick+0x148>)
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d120      	bne.n	8007982 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007940:	4b48      	ldr	r3, [pc, #288]	; (8007a64 <xTaskIncrementTick+0x14c>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00a      	beq.n	8007960 <xTaskIncrementTick+0x48>
	__asm volatile
 800794a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794e:	f383 8811 	msr	BASEPRI, r3
 8007952:	f3bf 8f6f 	isb	sy
 8007956:	f3bf 8f4f 	dsb	sy
 800795a:	603b      	str	r3, [r7, #0]
}
 800795c:	bf00      	nop
 800795e:	e7fe      	b.n	800795e <xTaskIncrementTick+0x46>
 8007960:	4b40      	ldr	r3, [pc, #256]	; (8007a64 <xTaskIncrementTick+0x14c>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	60fb      	str	r3, [r7, #12]
 8007966:	4b40      	ldr	r3, [pc, #256]	; (8007a68 <xTaskIncrementTick+0x150>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a3e      	ldr	r2, [pc, #248]	; (8007a64 <xTaskIncrementTick+0x14c>)
 800796c:	6013      	str	r3, [r2, #0]
 800796e:	4a3e      	ldr	r2, [pc, #248]	; (8007a68 <xTaskIncrementTick+0x150>)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6013      	str	r3, [r2, #0]
 8007974:	4b3d      	ldr	r3, [pc, #244]	; (8007a6c <xTaskIncrementTick+0x154>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	3301      	adds	r3, #1
 800797a:	4a3c      	ldr	r2, [pc, #240]	; (8007a6c <xTaskIncrementTick+0x154>)
 800797c:	6013      	str	r3, [r2, #0]
 800797e:	f000 faa9 	bl	8007ed4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007982:	4b3b      	ldr	r3, [pc, #236]	; (8007a70 <xTaskIncrementTick+0x158>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	693a      	ldr	r2, [r7, #16]
 8007988:	429a      	cmp	r2, r3
 800798a:	d348      	bcc.n	8007a1e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800798c:	4b35      	ldr	r3, [pc, #212]	; (8007a64 <xTaskIncrementTick+0x14c>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d104      	bne.n	80079a0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007996:	4b36      	ldr	r3, [pc, #216]	; (8007a70 <xTaskIncrementTick+0x158>)
 8007998:	f04f 32ff 	mov.w	r2, #4294967295
 800799c:	601a      	str	r2, [r3, #0]
					break;
 800799e:	e03e      	b.n	8007a1e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079a0:	4b30      	ldr	r3, [pc, #192]	; (8007a64 <xTaskIncrementTick+0x14c>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80079b0:	693a      	ldr	r2, [r7, #16]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d203      	bcs.n	80079c0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80079b8:	4a2d      	ldr	r2, [pc, #180]	; (8007a70 <xTaskIncrementTick+0x158>)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80079be:	e02e      	b.n	8007a1e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	3304      	adds	r3, #4
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7fe ff69 	bl	800689c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d004      	beq.n	80079dc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	3318      	adds	r3, #24
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7fe ff60 	bl	800689c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e0:	2201      	movs	r2, #1
 80079e2:	409a      	lsls	r2, r3
 80079e4:	4b23      	ldr	r3, [pc, #140]	; (8007a74 <xTaskIncrementTick+0x15c>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4313      	orrs	r3, r2
 80079ea:	4a22      	ldr	r2, [pc, #136]	; (8007a74 <xTaskIncrementTick+0x15c>)
 80079ec:	6013      	str	r3, [r2, #0]
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079f2:	4613      	mov	r3, r2
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	4413      	add	r3, r2
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	4a1f      	ldr	r2, [pc, #124]	; (8007a78 <xTaskIncrementTick+0x160>)
 80079fc:	441a      	add	r2, r3
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	3304      	adds	r3, #4
 8007a02:	4619      	mov	r1, r3
 8007a04:	4610      	mov	r0, r2
 8007a06:	f7fe feec 	bl	80067e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a0e:	4b1b      	ldr	r3, [pc, #108]	; (8007a7c <xTaskIncrementTick+0x164>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d3b9      	bcc.n	800798c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a1c:	e7b6      	b.n	800798c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007a1e:	4b17      	ldr	r3, [pc, #92]	; (8007a7c <xTaskIncrementTick+0x164>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a24:	4914      	ldr	r1, [pc, #80]	; (8007a78 <xTaskIncrementTick+0x160>)
 8007a26:	4613      	mov	r3, r2
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	4413      	add	r3, r2
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	440b      	add	r3, r1
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d901      	bls.n	8007a3a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007a36:	2301      	movs	r3, #1
 8007a38:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007a3a:	4b11      	ldr	r3, [pc, #68]	; (8007a80 <xTaskIncrementTick+0x168>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d007      	beq.n	8007a52 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007a42:	2301      	movs	r3, #1
 8007a44:	617b      	str	r3, [r7, #20]
 8007a46:	e004      	b.n	8007a52 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007a48:	4b0e      	ldr	r3, [pc, #56]	; (8007a84 <xTaskIncrementTick+0x16c>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	4a0d      	ldr	r2, [pc, #52]	; (8007a84 <xTaskIncrementTick+0x16c>)
 8007a50:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007a52:	697b      	ldr	r3, [r7, #20]
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3718      	adds	r7, #24
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}
 8007a5c:	200008f0 	.word	0x200008f0
 8007a60:	200008cc 	.word	0x200008cc
 8007a64:	20000880 	.word	0x20000880
 8007a68:	20000884 	.word	0x20000884
 8007a6c:	200008e0 	.word	0x200008e0
 8007a70:	200008e8 	.word	0x200008e8
 8007a74:	200008d0 	.word	0x200008d0
 8007a78:	200007cc 	.word	0x200007cc
 8007a7c:	200007c8 	.word	0x200007c8
 8007a80:	200008dc 	.word	0x200008dc
 8007a84:	200008d8 	.word	0x200008d8

08007a88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b087      	sub	sp, #28
 8007a8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a8e:	4b29      	ldr	r3, [pc, #164]	; (8007b34 <vTaskSwitchContext+0xac>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d003      	beq.n	8007a9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a96:	4b28      	ldr	r3, [pc, #160]	; (8007b38 <vTaskSwitchContext+0xb0>)
 8007a98:	2201      	movs	r2, #1
 8007a9a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a9c:	e044      	b.n	8007b28 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007a9e:	4b26      	ldr	r3, [pc, #152]	; (8007b38 <vTaskSwitchContext+0xb0>)
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007aa4:	4b25      	ldr	r3, [pc, #148]	; (8007b3c <vTaskSwitchContext+0xb4>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	fab3 f383 	clz	r3, r3
 8007ab0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007ab2:	7afb      	ldrb	r3, [r7, #11]
 8007ab4:	f1c3 031f 	rsb	r3, r3, #31
 8007ab8:	617b      	str	r3, [r7, #20]
 8007aba:	4921      	ldr	r1, [pc, #132]	; (8007b40 <vTaskSwitchContext+0xb8>)
 8007abc:	697a      	ldr	r2, [r7, #20]
 8007abe:	4613      	mov	r3, r2
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	4413      	add	r3, r2
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	440b      	add	r3, r1
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d10a      	bne.n	8007ae4 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad2:	f383 8811 	msr	BASEPRI, r3
 8007ad6:	f3bf 8f6f 	isb	sy
 8007ada:	f3bf 8f4f 	dsb	sy
 8007ade:	607b      	str	r3, [r7, #4]
}
 8007ae0:	bf00      	nop
 8007ae2:	e7fe      	b.n	8007ae2 <vTaskSwitchContext+0x5a>
 8007ae4:	697a      	ldr	r2, [r7, #20]
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	4413      	add	r3, r2
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	4a14      	ldr	r2, [pc, #80]	; (8007b40 <vTaskSwitchContext+0xb8>)
 8007af0:	4413      	add	r3, r2
 8007af2:	613b      	str	r3, [r7, #16]
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	685a      	ldr	r2, [r3, #4]
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	605a      	str	r2, [r3, #4]
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	685a      	ldr	r2, [r3, #4]
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	3308      	adds	r3, #8
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d104      	bne.n	8007b14 <vTaskSwitchContext+0x8c>
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	685a      	ldr	r2, [r3, #4]
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	605a      	str	r2, [r3, #4]
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	4a0a      	ldr	r2, [pc, #40]	; (8007b44 <vTaskSwitchContext+0xbc>)
 8007b1c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007b1e:	4b09      	ldr	r3, [pc, #36]	; (8007b44 <vTaskSwitchContext+0xbc>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	334c      	adds	r3, #76	; 0x4c
 8007b24:	4a08      	ldr	r2, [pc, #32]	; (8007b48 <vTaskSwitchContext+0xc0>)
 8007b26:	6013      	str	r3, [r2, #0]
}
 8007b28:	bf00      	nop
 8007b2a:	371c      	adds	r7, #28
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr
 8007b34:	200008f0 	.word	0x200008f0
 8007b38:	200008dc 	.word	0x200008dc
 8007b3c:	200008d0 	.word	0x200008d0
 8007b40:	200007cc 	.word	0x200007cc
 8007b44:	200007c8 	.word	0x200007c8
 8007b48:	20000020 	.word	0x20000020

08007b4c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d10a      	bne.n	8007b72 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b60:	f383 8811 	msr	BASEPRI, r3
 8007b64:	f3bf 8f6f 	isb	sy
 8007b68:	f3bf 8f4f 	dsb	sy
 8007b6c:	60fb      	str	r3, [r7, #12]
}
 8007b6e:	bf00      	nop
 8007b70:	e7fe      	b.n	8007b70 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b72:	4b07      	ldr	r3, [pc, #28]	; (8007b90 <vTaskPlaceOnEventList+0x44>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	3318      	adds	r3, #24
 8007b78:	4619      	mov	r1, r3
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f7fe fe55 	bl	800682a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b80:	2101      	movs	r1, #1
 8007b82:	6838      	ldr	r0, [r7, #0]
 8007b84:	f000 fa6a 	bl	800805c <prvAddCurrentTaskToDelayedList>
}
 8007b88:	bf00      	nop
 8007b8a:	3710      	adds	r7, #16
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	200007c8 	.word	0x200007c8

08007b94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b086      	sub	sp, #24
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d10a      	bne.n	8007bc0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bae:	f383 8811 	msr	BASEPRI, r3
 8007bb2:	f3bf 8f6f 	isb	sy
 8007bb6:	f3bf 8f4f 	dsb	sy
 8007bba:	60fb      	str	r3, [r7, #12]
}
 8007bbc:	bf00      	nop
 8007bbe:	e7fe      	b.n	8007bbe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	3318      	adds	r3, #24
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f7fe fe69 	bl	800689c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bca:	4b1d      	ldr	r3, [pc, #116]	; (8007c40 <xTaskRemoveFromEventList+0xac>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d11c      	bne.n	8007c0c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	3304      	adds	r3, #4
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7fe fe60 	bl	800689c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be0:	2201      	movs	r2, #1
 8007be2:	409a      	lsls	r2, r3
 8007be4:	4b17      	ldr	r3, [pc, #92]	; (8007c44 <xTaskRemoveFromEventList+0xb0>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	4a16      	ldr	r2, [pc, #88]	; (8007c44 <xTaskRemoveFromEventList+0xb0>)
 8007bec:	6013      	str	r3, [r2, #0]
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	4413      	add	r3, r2
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	4a13      	ldr	r2, [pc, #76]	; (8007c48 <xTaskRemoveFromEventList+0xb4>)
 8007bfc:	441a      	add	r2, r3
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	3304      	adds	r3, #4
 8007c02:	4619      	mov	r1, r3
 8007c04:	4610      	mov	r0, r2
 8007c06:	f7fe fdec 	bl	80067e2 <vListInsertEnd>
 8007c0a:	e005      	b.n	8007c18 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	3318      	adds	r3, #24
 8007c10:	4619      	mov	r1, r3
 8007c12:	480e      	ldr	r0, [pc, #56]	; (8007c4c <xTaskRemoveFromEventList+0xb8>)
 8007c14:	f7fe fde5 	bl	80067e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c1c:	4b0c      	ldr	r3, [pc, #48]	; (8007c50 <xTaskRemoveFromEventList+0xbc>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d905      	bls.n	8007c32 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007c26:	2301      	movs	r3, #1
 8007c28:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007c2a:	4b0a      	ldr	r3, [pc, #40]	; (8007c54 <xTaskRemoveFromEventList+0xc0>)
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	601a      	str	r2, [r3, #0]
 8007c30:	e001      	b.n	8007c36 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007c32:	2300      	movs	r3, #0
 8007c34:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007c36:	697b      	ldr	r3, [r7, #20]
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3718      	adds	r7, #24
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}
 8007c40:	200008f0 	.word	0x200008f0
 8007c44:	200008d0 	.word	0x200008d0
 8007c48:	200007cc 	.word	0x200007cc
 8007c4c:	20000888 	.word	0x20000888
 8007c50:	200007c8 	.word	0x200007c8
 8007c54:	200008dc 	.word	0x200008dc

08007c58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007c60:	4b06      	ldr	r3, [pc, #24]	; (8007c7c <vTaskInternalSetTimeOutState+0x24>)
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007c68:	4b05      	ldr	r3, [pc, #20]	; (8007c80 <vTaskInternalSetTimeOutState+0x28>)
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	605a      	str	r2, [r3, #4]
}
 8007c70:	bf00      	nop
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr
 8007c7c:	200008e0 	.word	0x200008e0
 8007c80:	200008cc 	.word	0x200008cc

08007c84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b088      	sub	sp, #32
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d10a      	bne.n	8007caa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c98:	f383 8811 	msr	BASEPRI, r3
 8007c9c:	f3bf 8f6f 	isb	sy
 8007ca0:	f3bf 8f4f 	dsb	sy
 8007ca4:	613b      	str	r3, [r7, #16]
}
 8007ca6:	bf00      	nop
 8007ca8:	e7fe      	b.n	8007ca8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d10a      	bne.n	8007cc6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb4:	f383 8811 	msr	BASEPRI, r3
 8007cb8:	f3bf 8f6f 	isb	sy
 8007cbc:	f3bf 8f4f 	dsb	sy
 8007cc0:	60fb      	str	r3, [r7, #12]
}
 8007cc2:	bf00      	nop
 8007cc4:	e7fe      	b.n	8007cc4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007cc6:	f000 fb5d 	bl	8008384 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007cca:	4b1d      	ldr	r3, [pc, #116]	; (8007d40 <xTaskCheckForTimeOut+0xbc>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	69ba      	ldr	r2, [r7, #24]
 8007cd6:	1ad3      	subs	r3, r2, r3
 8007cd8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ce2:	d102      	bne.n	8007cea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	61fb      	str	r3, [r7, #28]
 8007ce8:	e023      	b.n	8007d32 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	4b15      	ldr	r3, [pc, #84]	; (8007d44 <xTaskCheckForTimeOut+0xc0>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d007      	beq.n	8007d06 <xTaskCheckForTimeOut+0x82>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	69ba      	ldr	r2, [r7, #24]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d302      	bcc.n	8007d06 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007d00:	2301      	movs	r3, #1
 8007d02:	61fb      	str	r3, [r7, #28]
 8007d04:	e015      	b.n	8007d32 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	697a      	ldr	r2, [r7, #20]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d20b      	bcs.n	8007d28 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	1ad2      	subs	r2, r2, r3
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f7ff ff9b 	bl	8007c58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007d22:	2300      	movs	r3, #0
 8007d24:	61fb      	str	r3, [r7, #28]
 8007d26:	e004      	b.n	8007d32 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007d32:	f000 fb57 	bl	80083e4 <vPortExitCritical>

	return xReturn;
 8007d36:	69fb      	ldr	r3, [r7, #28]
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3720      	adds	r7, #32
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	200008cc 	.word	0x200008cc
 8007d44:	200008e0 	.word	0x200008e0

08007d48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007d48:	b480      	push	{r7}
 8007d4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007d4c:	4b03      	ldr	r3, [pc, #12]	; (8007d5c <vTaskMissedYield+0x14>)
 8007d4e:	2201      	movs	r2, #1
 8007d50:	601a      	str	r2, [r3, #0]
}
 8007d52:	bf00      	nop
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr
 8007d5c:	200008dc 	.word	0x200008dc

08007d60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007d68:	f000 f852 	bl	8007e10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d6c:	4b06      	ldr	r3, [pc, #24]	; (8007d88 <prvIdleTask+0x28>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d9f9      	bls.n	8007d68 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007d74:	4b05      	ldr	r3, [pc, #20]	; (8007d8c <prvIdleTask+0x2c>)
 8007d76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d7a:	601a      	str	r2, [r3, #0]
 8007d7c:	f3bf 8f4f 	dsb	sy
 8007d80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007d84:	e7f0      	b.n	8007d68 <prvIdleTask+0x8>
 8007d86:	bf00      	nop
 8007d88:	200007cc 	.word	0x200007cc
 8007d8c:	e000ed04 	.word	0xe000ed04

08007d90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d96:	2300      	movs	r3, #0
 8007d98:	607b      	str	r3, [r7, #4]
 8007d9a:	e00c      	b.n	8007db6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	4613      	mov	r3, r2
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	4413      	add	r3, r2
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	4a12      	ldr	r2, [pc, #72]	; (8007df0 <prvInitialiseTaskLists+0x60>)
 8007da8:	4413      	add	r3, r2
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7fe fcec 	bl	8006788 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	3301      	adds	r3, #1
 8007db4:	607b      	str	r3, [r7, #4]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2b06      	cmp	r3, #6
 8007dba:	d9ef      	bls.n	8007d9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007dbc:	480d      	ldr	r0, [pc, #52]	; (8007df4 <prvInitialiseTaskLists+0x64>)
 8007dbe:	f7fe fce3 	bl	8006788 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007dc2:	480d      	ldr	r0, [pc, #52]	; (8007df8 <prvInitialiseTaskLists+0x68>)
 8007dc4:	f7fe fce0 	bl	8006788 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007dc8:	480c      	ldr	r0, [pc, #48]	; (8007dfc <prvInitialiseTaskLists+0x6c>)
 8007dca:	f7fe fcdd 	bl	8006788 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007dce:	480c      	ldr	r0, [pc, #48]	; (8007e00 <prvInitialiseTaskLists+0x70>)
 8007dd0:	f7fe fcda 	bl	8006788 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007dd4:	480b      	ldr	r0, [pc, #44]	; (8007e04 <prvInitialiseTaskLists+0x74>)
 8007dd6:	f7fe fcd7 	bl	8006788 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007dda:	4b0b      	ldr	r3, [pc, #44]	; (8007e08 <prvInitialiseTaskLists+0x78>)
 8007ddc:	4a05      	ldr	r2, [pc, #20]	; (8007df4 <prvInitialiseTaskLists+0x64>)
 8007dde:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007de0:	4b0a      	ldr	r3, [pc, #40]	; (8007e0c <prvInitialiseTaskLists+0x7c>)
 8007de2:	4a05      	ldr	r2, [pc, #20]	; (8007df8 <prvInitialiseTaskLists+0x68>)
 8007de4:	601a      	str	r2, [r3, #0]
}
 8007de6:	bf00      	nop
 8007de8:	3708      	adds	r7, #8
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	200007cc 	.word	0x200007cc
 8007df4:	20000858 	.word	0x20000858
 8007df8:	2000086c 	.word	0x2000086c
 8007dfc:	20000888 	.word	0x20000888
 8007e00:	2000089c 	.word	0x2000089c
 8007e04:	200008b4 	.word	0x200008b4
 8007e08:	20000880 	.word	0x20000880
 8007e0c:	20000884 	.word	0x20000884

08007e10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e16:	e019      	b.n	8007e4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007e18:	f000 fab4 	bl	8008384 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e1c:	4b10      	ldr	r3, [pc, #64]	; (8007e60 <prvCheckTasksWaitingTermination+0x50>)
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	3304      	adds	r3, #4
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7fe fd37 	bl	800689c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e2e:	4b0d      	ldr	r3, [pc, #52]	; (8007e64 <prvCheckTasksWaitingTermination+0x54>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	3b01      	subs	r3, #1
 8007e34:	4a0b      	ldr	r2, [pc, #44]	; (8007e64 <prvCheckTasksWaitingTermination+0x54>)
 8007e36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e38:	4b0b      	ldr	r3, [pc, #44]	; (8007e68 <prvCheckTasksWaitingTermination+0x58>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	3b01      	subs	r3, #1
 8007e3e:	4a0a      	ldr	r2, [pc, #40]	; (8007e68 <prvCheckTasksWaitingTermination+0x58>)
 8007e40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007e42:	f000 facf 	bl	80083e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 f810 	bl	8007e6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e4c:	4b06      	ldr	r3, [pc, #24]	; (8007e68 <prvCheckTasksWaitingTermination+0x58>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1e1      	bne.n	8007e18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007e54:	bf00      	nop
 8007e56:	bf00      	nop
 8007e58:	3708      	adds	r7, #8
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	2000089c 	.word	0x2000089c
 8007e64:	200008c8 	.word	0x200008c8
 8007e68:	200008b0 	.word	0x200008b0

08007e6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	334c      	adds	r3, #76	; 0x4c
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f001 fda5 	bl	80099c8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d108      	bne.n	8007e9a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f000 fc27 	bl	80086e0 <vPortFree>
				vPortFree( pxTCB );
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 fc24 	bl	80086e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007e98:	e018      	b.n	8007ecc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d103      	bne.n	8007eac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 fc1b 	bl	80086e0 <vPortFree>
	}
 8007eaa:	e00f      	b.n	8007ecc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007eb2:	2b02      	cmp	r3, #2
 8007eb4:	d00a      	beq.n	8007ecc <prvDeleteTCB+0x60>
	__asm volatile
 8007eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eba:	f383 8811 	msr	BASEPRI, r3
 8007ebe:	f3bf 8f6f 	isb	sy
 8007ec2:	f3bf 8f4f 	dsb	sy
 8007ec6:	60fb      	str	r3, [r7, #12]
}
 8007ec8:	bf00      	nop
 8007eca:	e7fe      	b.n	8007eca <prvDeleteTCB+0x5e>
	}
 8007ecc:	bf00      	nop
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007eda:	4b0c      	ldr	r3, [pc, #48]	; (8007f0c <prvResetNextTaskUnblockTime+0x38>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d104      	bne.n	8007eee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ee4:	4b0a      	ldr	r3, [pc, #40]	; (8007f10 <prvResetNextTaskUnblockTime+0x3c>)
 8007ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8007eea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007eec:	e008      	b.n	8007f00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007eee:	4b07      	ldr	r3, [pc, #28]	; (8007f0c <prvResetNextTaskUnblockTime+0x38>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	68db      	ldr	r3, [r3, #12]
 8007ef6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	4a04      	ldr	r2, [pc, #16]	; (8007f10 <prvResetNextTaskUnblockTime+0x3c>)
 8007efe:	6013      	str	r3, [r2, #0]
}
 8007f00:	bf00      	nop
 8007f02:	370c      	adds	r7, #12
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr
 8007f0c:	20000880 	.word	0x20000880
 8007f10:	200008e8 	.word	0x200008e8

08007f14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007f1a:	4b0b      	ldr	r3, [pc, #44]	; (8007f48 <xTaskGetSchedulerState+0x34>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d102      	bne.n	8007f28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007f22:	2301      	movs	r3, #1
 8007f24:	607b      	str	r3, [r7, #4]
 8007f26:	e008      	b.n	8007f3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f28:	4b08      	ldr	r3, [pc, #32]	; (8007f4c <xTaskGetSchedulerState+0x38>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d102      	bne.n	8007f36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007f30:	2302      	movs	r3, #2
 8007f32:	607b      	str	r3, [r7, #4]
 8007f34:	e001      	b.n	8007f3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007f36:	2300      	movs	r3, #0
 8007f38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007f3a:	687b      	ldr	r3, [r7, #4]
	}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	370c      	adds	r7, #12
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr
 8007f48:	200008d4 	.word	0x200008d4
 8007f4c:	200008f0 	.word	0x200008f0

08007f50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b086      	sub	sp, #24
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d06e      	beq.n	8008044 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007f66:	4b3a      	ldr	r3, [pc, #232]	; (8008050 <xTaskPriorityDisinherit+0x100>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	693a      	ldr	r2, [r7, #16]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d00a      	beq.n	8007f86 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f74:	f383 8811 	msr	BASEPRI, r3
 8007f78:	f3bf 8f6f 	isb	sy
 8007f7c:	f3bf 8f4f 	dsb	sy
 8007f80:	60fb      	str	r3, [r7, #12]
}
 8007f82:	bf00      	nop
 8007f84:	e7fe      	b.n	8007f84 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d10a      	bne.n	8007fa4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f92:	f383 8811 	msr	BASEPRI, r3
 8007f96:	f3bf 8f6f 	isb	sy
 8007f9a:	f3bf 8f4f 	dsb	sy
 8007f9e:	60bb      	str	r3, [r7, #8]
}
 8007fa0:	bf00      	nop
 8007fa2:	e7fe      	b.n	8007fa2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fa8:	1e5a      	subs	r2, r3, #1
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d044      	beq.n	8008044 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d140      	bne.n	8008044 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	3304      	adds	r3, #4
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7fe fc68 	bl	800689c <uxListRemove>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d115      	bne.n	8007ffe <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fd6:	491f      	ldr	r1, [pc, #124]	; (8008054 <xTaskPriorityDisinherit+0x104>)
 8007fd8:	4613      	mov	r3, r2
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	4413      	add	r3, r2
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	440b      	add	r3, r1
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d10a      	bne.n	8007ffe <xTaskPriorityDisinherit+0xae>
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fec:	2201      	movs	r2, #1
 8007fee:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff2:	43da      	mvns	r2, r3
 8007ff4:	4b18      	ldr	r3, [pc, #96]	; (8008058 <xTaskPriorityDisinherit+0x108>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4013      	ands	r3, r2
 8007ffa:	4a17      	ldr	r2, [pc, #92]	; (8008058 <xTaskPriorityDisinherit+0x108>)
 8007ffc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800800a:	f1c3 0207 	rsb	r2, r3, #7
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008016:	2201      	movs	r2, #1
 8008018:	409a      	lsls	r2, r3
 800801a:	4b0f      	ldr	r3, [pc, #60]	; (8008058 <xTaskPriorityDisinherit+0x108>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4313      	orrs	r3, r2
 8008020:	4a0d      	ldr	r2, [pc, #52]	; (8008058 <xTaskPriorityDisinherit+0x108>)
 8008022:	6013      	str	r3, [r2, #0]
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008028:	4613      	mov	r3, r2
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	4413      	add	r3, r2
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	4a08      	ldr	r2, [pc, #32]	; (8008054 <xTaskPriorityDisinherit+0x104>)
 8008032:	441a      	add	r2, r3
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	3304      	adds	r3, #4
 8008038:	4619      	mov	r1, r3
 800803a:	4610      	mov	r0, r2
 800803c:	f7fe fbd1 	bl	80067e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008040:	2301      	movs	r3, #1
 8008042:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008044:	697b      	ldr	r3, [r7, #20]
	}
 8008046:	4618      	mov	r0, r3
 8008048:	3718      	adds	r7, #24
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
 800804e:	bf00      	nop
 8008050:	200007c8 	.word	0x200007c8
 8008054:	200007cc 	.word	0x200007cc
 8008058:	200008d0 	.word	0x200008d0

0800805c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008066:	4b29      	ldr	r3, [pc, #164]	; (800810c <prvAddCurrentTaskToDelayedList+0xb0>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800806c:	4b28      	ldr	r3, [pc, #160]	; (8008110 <prvAddCurrentTaskToDelayedList+0xb4>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	3304      	adds	r3, #4
 8008072:	4618      	mov	r0, r3
 8008074:	f7fe fc12 	bl	800689c <uxListRemove>
 8008078:	4603      	mov	r3, r0
 800807a:	2b00      	cmp	r3, #0
 800807c:	d10b      	bne.n	8008096 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800807e:	4b24      	ldr	r3, [pc, #144]	; (8008110 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008084:	2201      	movs	r2, #1
 8008086:	fa02 f303 	lsl.w	r3, r2, r3
 800808a:	43da      	mvns	r2, r3
 800808c:	4b21      	ldr	r3, [pc, #132]	; (8008114 <prvAddCurrentTaskToDelayedList+0xb8>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4013      	ands	r3, r2
 8008092:	4a20      	ldr	r2, [pc, #128]	; (8008114 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008094:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800809c:	d10a      	bne.n	80080b4 <prvAddCurrentTaskToDelayedList+0x58>
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d007      	beq.n	80080b4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080a4:	4b1a      	ldr	r3, [pc, #104]	; (8008110 <prvAddCurrentTaskToDelayedList+0xb4>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	3304      	adds	r3, #4
 80080aa:	4619      	mov	r1, r3
 80080ac:	481a      	ldr	r0, [pc, #104]	; (8008118 <prvAddCurrentTaskToDelayedList+0xbc>)
 80080ae:	f7fe fb98 	bl	80067e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80080b2:	e026      	b.n	8008102 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80080b4:	68fa      	ldr	r2, [r7, #12]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	4413      	add	r3, r2
 80080ba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80080bc:	4b14      	ldr	r3, [pc, #80]	; (8008110 <prvAddCurrentTaskToDelayedList+0xb4>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	68ba      	ldr	r2, [r7, #8]
 80080c2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80080c4:	68ba      	ldr	r2, [r7, #8]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d209      	bcs.n	80080e0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080cc:	4b13      	ldr	r3, [pc, #76]	; (800811c <prvAddCurrentTaskToDelayedList+0xc0>)
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	4b0f      	ldr	r3, [pc, #60]	; (8008110 <prvAddCurrentTaskToDelayedList+0xb4>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	3304      	adds	r3, #4
 80080d6:	4619      	mov	r1, r3
 80080d8:	4610      	mov	r0, r2
 80080da:	f7fe fba6 	bl	800682a <vListInsert>
}
 80080de:	e010      	b.n	8008102 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080e0:	4b0f      	ldr	r3, [pc, #60]	; (8008120 <prvAddCurrentTaskToDelayedList+0xc4>)
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	4b0a      	ldr	r3, [pc, #40]	; (8008110 <prvAddCurrentTaskToDelayedList+0xb4>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	3304      	adds	r3, #4
 80080ea:	4619      	mov	r1, r3
 80080ec:	4610      	mov	r0, r2
 80080ee:	f7fe fb9c 	bl	800682a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80080f2:	4b0c      	ldr	r3, [pc, #48]	; (8008124 <prvAddCurrentTaskToDelayedList+0xc8>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	68ba      	ldr	r2, [r7, #8]
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d202      	bcs.n	8008102 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80080fc:	4a09      	ldr	r2, [pc, #36]	; (8008124 <prvAddCurrentTaskToDelayedList+0xc8>)
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	6013      	str	r3, [r2, #0]
}
 8008102:	bf00      	nop
 8008104:	3710      	adds	r7, #16
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	200008cc 	.word	0x200008cc
 8008110:	200007c8 	.word	0x200007c8
 8008114:	200008d0 	.word	0x200008d0
 8008118:	200008b4 	.word	0x200008b4
 800811c:	20000884 	.word	0x20000884
 8008120:	20000880 	.word	0x20000880
 8008124:	200008e8 	.word	0x200008e8

08008128 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008128:	b480      	push	{r7}
 800812a:	b085      	sub	sp, #20
 800812c:	af00      	add	r7, sp, #0
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	3b04      	subs	r3, #4
 8008138:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008140:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	3b04      	subs	r3, #4
 8008146:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	f023 0201 	bic.w	r2, r3, #1
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	3b04      	subs	r3, #4
 8008156:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008158:	4a0c      	ldr	r2, [pc, #48]	; (800818c <pxPortInitialiseStack+0x64>)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	3b14      	subs	r3, #20
 8008162:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	3b04      	subs	r3, #4
 800816e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f06f 0202 	mvn.w	r2, #2
 8008176:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	3b20      	subs	r3, #32
 800817c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800817e:	68fb      	ldr	r3, [r7, #12]
}
 8008180:	4618      	mov	r0, r3
 8008182:	3714      	adds	r7, #20
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr
 800818c:	08008191 	.word	0x08008191

08008190 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008190:	b480      	push	{r7}
 8008192:	b085      	sub	sp, #20
 8008194:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008196:	2300      	movs	r3, #0
 8008198:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800819a:	4b12      	ldr	r3, [pc, #72]	; (80081e4 <prvTaskExitError+0x54>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081a2:	d00a      	beq.n	80081ba <prvTaskExitError+0x2a>
	__asm volatile
 80081a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a8:	f383 8811 	msr	BASEPRI, r3
 80081ac:	f3bf 8f6f 	isb	sy
 80081b0:	f3bf 8f4f 	dsb	sy
 80081b4:	60fb      	str	r3, [r7, #12]
}
 80081b6:	bf00      	nop
 80081b8:	e7fe      	b.n	80081b8 <prvTaskExitError+0x28>
	__asm volatile
 80081ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081be:	f383 8811 	msr	BASEPRI, r3
 80081c2:	f3bf 8f6f 	isb	sy
 80081c6:	f3bf 8f4f 	dsb	sy
 80081ca:	60bb      	str	r3, [r7, #8]
}
 80081cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80081ce:	bf00      	nop
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d0fc      	beq.n	80081d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80081d6:	bf00      	nop
 80081d8:	bf00      	nop
 80081da:	3714      	adds	r7, #20
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr
 80081e4:	2000001c 	.word	0x2000001c
	...

080081f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80081f0:	4b07      	ldr	r3, [pc, #28]	; (8008210 <pxCurrentTCBConst2>)
 80081f2:	6819      	ldr	r1, [r3, #0]
 80081f4:	6808      	ldr	r0, [r1, #0]
 80081f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081fa:	f380 8809 	msr	PSP, r0
 80081fe:	f3bf 8f6f 	isb	sy
 8008202:	f04f 0000 	mov.w	r0, #0
 8008206:	f380 8811 	msr	BASEPRI, r0
 800820a:	4770      	bx	lr
 800820c:	f3af 8000 	nop.w

08008210 <pxCurrentTCBConst2>:
 8008210:	200007c8 	.word	0x200007c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008214:	bf00      	nop
 8008216:	bf00      	nop

08008218 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008218:	4808      	ldr	r0, [pc, #32]	; (800823c <prvPortStartFirstTask+0x24>)
 800821a:	6800      	ldr	r0, [r0, #0]
 800821c:	6800      	ldr	r0, [r0, #0]
 800821e:	f380 8808 	msr	MSP, r0
 8008222:	f04f 0000 	mov.w	r0, #0
 8008226:	f380 8814 	msr	CONTROL, r0
 800822a:	b662      	cpsie	i
 800822c:	b661      	cpsie	f
 800822e:	f3bf 8f4f 	dsb	sy
 8008232:	f3bf 8f6f 	isb	sy
 8008236:	df00      	svc	0
 8008238:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800823a:	bf00      	nop
 800823c:	e000ed08 	.word	0xe000ed08

08008240 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b086      	sub	sp, #24
 8008244:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008246:	4b46      	ldr	r3, [pc, #280]	; (8008360 <xPortStartScheduler+0x120>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a46      	ldr	r2, [pc, #280]	; (8008364 <xPortStartScheduler+0x124>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d10a      	bne.n	8008266 <xPortStartScheduler+0x26>
	__asm volatile
 8008250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008254:	f383 8811 	msr	BASEPRI, r3
 8008258:	f3bf 8f6f 	isb	sy
 800825c:	f3bf 8f4f 	dsb	sy
 8008260:	613b      	str	r3, [r7, #16]
}
 8008262:	bf00      	nop
 8008264:	e7fe      	b.n	8008264 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008266:	4b3e      	ldr	r3, [pc, #248]	; (8008360 <xPortStartScheduler+0x120>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a3f      	ldr	r2, [pc, #252]	; (8008368 <xPortStartScheduler+0x128>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d10a      	bne.n	8008286 <xPortStartScheduler+0x46>
	__asm volatile
 8008270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008274:	f383 8811 	msr	BASEPRI, r3
 8008278:	f3bf 8f6f 	isb	sy
 800827c:	f3bf 8f4f 	dsb	sy
 8008280:	60fb      	str	r3, [r7, #12]
}
 8008282:	bf00      	nop
 8008284:	e7fe      	b.n	8008284 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008286:	4b39      	ldr	r3, [pc, #228]	; (800836c <xPortStartScheduler+0x12c>)
 8008288:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	b2db      	uxtb	r3, r3
 8008290:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	22ff      	movs	r2, #255	; 0xff
 8008296:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	b2db      	uxtb	r3, r3
 800829e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80082a0:	78fb      	ldrb	r3, [r7, #3]
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80082a8:	b2da      	uxtb	r2, r3
 80082aa:	4b31      	ldr	r3, [pc, #196]	; (8008370 <xPortStartScheduler+0x130>)
 80082ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80082ae:	4b31      	ldr	r3, [pc, #196]	; (8008374 <xPortStartScheduler+0x134>)
 80082b0:	2207      	movs	r2, #7
 80082b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80082b4:	e009      	b.n	80082ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80082b6:	4b2f      	ldr	r3, [pc, #188]	; (8008374 <xPortStartScheduler+0x134>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	3b01      	subs	r3, #1
 80082bc:	4a2d      	ldr	r2, [pc, #180]	; (8008374 <xPortStartScheduler+0x134>)
 80082be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80082c0:	78fb      	ldrb	r3, [r7, #3]
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	005b      	lsls	r3, r3, #1
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80082ca:	78fb      	ldrb	r3, [r7, #3]
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082d2:	2b80      	cmp	r3, #128	; 0x80
 80082d4:	d0ef      	beq.n	80082b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80082d6:	4b27      	ldr	r3, [pc, #156]	; (8008374 <xPortStartScheduler+0x134>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f1c3 0307 	rsb	r3, r3, #7
 80082de:	2b04      	cmp	r3, #4
 80082e0:	d00a      	beq.n	80082f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80082e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e6:	f383 8811 	msr	BASEPRI, r3
 80082ea:	f3bf 8f6f 	isb	sy
 80082ee:	f3bf 8f4f 	dsb	sy
 80082f2:	60bb      	str	r3, [r7, #8]
}
 80082f4:	bf00      	nop
 80082f6:	e7fe      	b.n	80082f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80082f8:	4b1e      	ldr	r3, [pc, #120]	; (8008374 <xPortStartScheduler+0x134>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	021b      	lsls	r3, r3, #8
 80082fe:	4a1d      	ldr	r2, [pc, #116]	; (8008374 <xPortStartScheduler+0x134>)
 8008300:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008302:	4b1c      	ldr	r3, [pc, #112]	; (8008374 <xPortStartScheduler+0x134>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800830a:	4a1a      	ldr	r2, [pc, #104]	; (8008374 <xPortStartScheduler+0x134>)
 800830c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	b2da      	uxtb	r2, r3
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008316:	4b18      	ldr	r3, [pc, #96]	; (8008378 <xPortStartScheduler+0x138>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a17      	ldr	r2, [pc, #92]	; (8008378 <xPortStartScheduler+0x138>)
 800831c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008320:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008322:	4b15      	ldr	r3, [pc, #84]	; (8008378 <xPortStartScheduler+0x138>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a14      	ldr	r2, [pc, #80]	; (8008378 <xPortStartScheduler+0x138>)
 8008328:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800832c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800832e:	f000 f8dd 	bl	80084ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008332:	4b12      	ldr	r3, [pc, #72]	; (800837c <xPortStartScheduler+0x13c>)
 8008334:	2200      	movs	r2, #0
 8008336:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008338:	f000 f8fc 	bl	8008534 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800833c:	4b10      	ldr	r3, [pc, #64]	; (8008380 <xPortStartScheduler+0x140>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a0f      	ldr	r2, [pc, #60]	; (8008380 <xPortStartScheduler+0x140>)
 8008342:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008346:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008348:	f7ff ff66 	bl	8008218 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800834c:	f7ff fb9c 	bl	8007a88 <vTaskSwitchContext>
	prvTaskExitError();
 8008350:	f7ff ff1e 	bl	8008190 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	3718      	adds	r7, #24
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	e000ed00 	.word	0xe000ed00
 8008364:	410fc271 	.word	0x410fc271
 8008368:	410fc270 	.word	0x410fc270
 800836c:	e000e400 	.word	0xe000e400
 8008370:	200008f4 	.word	0x200008f4
 8008374:	200008f8 	.word	0x200008f8
 8008378:	e000ed20 	.word	0xe000ed20
 800837c:	2000001c 	.word	0x2000001c
 8008380:	e000ef34 	.word	0xe000ef34

08008384 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
	__asm volatile
 800838a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838e:	f383 8811 	msr	BASEPRI, r3
 8008392:	f3bf 8f6f 	isb	sy
 8008396:	f3bf 8f4f 	dsb	sy
 800839a:	607b      	str	r3, [r7, #4]
}
 800839c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800839e:	4b0f      	ldr	r3, [pc, #60]	; (80083dc <vPortEnterCritical+0x58>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	3301      	adds	r3, #1
 80083a4:	4a0d      	ldr	r2, [pc, #52]	; (80083dc <vPortEnterCritical+0x58>)
 80083a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80083a8:	4b0c      	ldr	r3, [pc, #48]	; (80083dc <vPortEnterCritical+0x58>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d10f      	bne.n	80083d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80083b0:	4b0b      	ldr	r3, [pc, #44]	; (80083e0 <vPortEnterCritical+0x5c>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00a      	beq.n	80083d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80083ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083be:	f383 8811 	msr	BASEPRI, r3
 80083c2:	f3bf 8f6f 	isb	sy
 80083c6:	f3bf 8f4f 	dsb	sy
 80083ca:	603b      	str	r3, [r7, #0]
}
 80083cc:	bf00      	nop
 80083ce:	e7fe      	b.n	80083ce <vPortEnterCritical+0x4a>
	}
}
 80083d0:	bf00      	nop
 80083d2:	370c      	adds	r7, #12
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr
 80083dc:	2000001c 	.word	0x2000001c
 80083e0:	e000ed04 	.word	0xe000ed04

080083e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80083ea:	4b12      	ldr	r3, [pc, #72]	; (8008434 <vPortExitCritical+0x50>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d10a      	bne.n	8008408 <vPortExitCritical+0x24>
	__asm volatile
 80083f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f6:	f383 8811 	msr	BASEPRI, r3
 80083fa:	f3bf 8f6f 	isb	sy
 80083fe:	f3bf 8f4f 	dsb	sy
 8008402:	607b      	str	r3, [r7, #4]
}
 8008404:	bf00      	nop
 8008406:	e7fe      	b.n	8008406 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008408:	4b0a      	ldr	r3, [pc, #40]	; (8008434 <vPortExitCritical+0x50>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	3b01      	subs	r3, #1
 800840e:	4a09      	ldr	r2, [pc, #36]	; (8008434 <vPortExitCritical+0x50>)
 8008410:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008412:	4b08      	ldr	r3, [pc, #32]	; (8008434 <vPortExitCritical+0x50>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d105      	bne.n	8008426 <vPortExitCritical+0x42>
 800841a:	2300      	movs	r3, #0
 800841c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008424:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008426:	bf00      	nop
 8008428:	370c      	adds	r7, #12
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr
 8008432:	bf00      	nop
 8008434:	2000001c 	.word	0x2000001c
	...

08008440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008440:	f3ef 8009 	mrs	r0, PSP
 8008444:	f3bf 8f6f 	isb	sy
 8008448:	4b15      	ldr	r3, [pc, #84]	; (80084a0 <pxCurrentTCBConst>)
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	f01e 0f10 	tst.w	lr, #16
 8008450:	bf08      	it	eq
 8008452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800845a:	6010      	str	r0, [r2, #0]
 800845c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008460:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008464:	f380 8811 	msr	BASEPRI, r0
 8008468:	f3bf 8f4f 	dsb	sy
 800846c:	f3bf 8f6f 	isb	sy
 8008470:	f7ff fb0a 	bl	8007a88 <vTaskSwitchContext>
 8008474:	f04f 0000 	mov.w	r0, #0
 8008478:	f380 8811 	msr	BASEPRI, r0
 800847c:	bc09      	pop	{r0, r3}
 800847e:	6819      	ldr	r1, [r3, #0]
 8008480:	6808      	ldr	r0, [r1, #0]
 8008482:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008486:	f01e 0f10 	tst.w	lr, #16
 800848a:	bf08      	it	eq
 800848c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008490:	f380 8809 	msr	PSP, r0
 8008494:	f3bf 8f6f 	isb	sy
 8008498:	4770      	bx	lr
 800849a:	bf00      	nop
 800849c:	f3af 8000 	nop.w

080084a0 <pxCurrentTCBConst>:
 80084a0:	200007c8 	.word	0x200007c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80084a4:	bf00      	nop
 80084a6:	bf00      	nop

080084a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
	__asm volatile
 80084ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b2:	f383 8811 	msr	BASEPRI, r3
 80084b6:	f3bf 8f6f 	isb	sy
 80084ba:	f3bf 8f4f 	dsb	sy
 80084be:	607b      	str	r3, [r7, #4]
}
 80084c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80084c2:	f7ff fa29 	bl	8007918 <xTaskIncrementTick>
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d003      	beq.n	80084d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80084cc:	4b06      	ldr	r3, [pc, #24]	; (80084e8 <SysTick_Handler+0x40>)
 80084ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084d2:	601a      	str	r2, [r3, #0]
 80084d4:	2300      	movs	r3, #0
 80084d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	f383 8811 	msr	BASEPRI, r3
}
 80084de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80084e0:	bf00      	nop
 80084e2:	3708      	adds	r7, #8
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}
 80084e8:	e000ed04 	.word	0xe000ed04

080084ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80084ec:	b480      	push	{r7}
 80084ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80084f0:	4b0b      	ldr	r3, [pc, #44]	; (8008520 <vPortSetupTimerInterrupt+0x34>)
 80084f2:	2200      	movs	r2, #0
 80084f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80084f6:	4b0b      	ldr	r3, [pc, #44]	; (8008524 <vPortSetupTimerInterrupt+0x38>)
 80084f8:	2200      	movs	r2, #0
 80084fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80084fc:	4b0a      	ldr	r3, [pc, #40]	; (8008528 <vPortSetupTimerInterrupt+0x3c>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a0a      	ldr	r2, [pc, #40]	; (800852c <vPortSetupTimerInterrupt+0x40>)
 8008502:	fba2 2303 	umull	r2, r3, r2, r3
 8008506:	099b      	lsrs	r3, r3, #6
 8008508:	4a09      	ldr	r2, [pc, #36]	; (8008530 <vPortSetupTimerInterrupt+0x44>)
 800850a:	3b01      	subs	r3, #1
 800850c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800850e:	4b04      	ldr	r3, [pc, #16]	; (8008520 <vPortSetupTimerInterrupt+0x34>)
 8008510:	2207      	movs	r2, #7
 8008512:	601a      	str	r2, [r3, #0]
}
 8008514:	bf00      	nop
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr
 800851e:	bf00      	nop
 8008520:	e000e010 	.word	0xe000e010
 8008524:	e000e018 	.word	0xe000e018
 8008528:	20000010 	.word	0x20000010
 800852c:	10624dd3 	.word	0x10624dd3
 8008530:	e000e014 	.word	0xe000e014

08008534 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008534:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008544 <vPortEnableVFP+0x10>
 8008538:	6801      	ldr	r1, [r0, #0]
 800853a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800853e:	6001      	str	r1, [r0, #0]
 8008540:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008542:	bf00      	nop
 8008544:	e000ed88 	.word	0xe000ed88

08008548 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b08a      	sub	sp, #40	; 0x28
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008550:	2300      	movs	r3, #0
 8008552:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008554:	f7ff f936 	bl	80077c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008558:	4b5b      	ldr	r3, [pc, #364]	; (80086c8 <pvPortMalloc+0x180>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d101      	bne.n	8008564 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008560:	f000 f920 	bl	80087a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008564:	4b59      	ldr	r3, [pc, #356]	; (80086cc <pvPortMalloc+0x184>)
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4013      	ands	r3, r2
 800856c:	2b00      	cmp	r3, #0
 800856e:	f040 8093 	bne.w	8008698 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d01d      	beq.n	80085b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008578:	2208      	movs	r2, #8
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4413      	add	r3, r2
 800857e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f003 0307 	and.w	r3, r3, #7
 8008586:	2b00      	cmp	r3, #0
 8008588:	d014      	beq.n	80085b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f023 0307 	bic.w	r3, r3, #7
 8008590:	3308      	adds	r3, #8
 8008592:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f003 0307 	and.w	r3, r3, #7
 800859a:	2b00      	cmp	r3, #0
 800859c:	d00a      	beq.n	80085b4 <pvPortMalloc+0x6c>
	__asm volatile
 800859e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a2:	f383 8811 	msr	BASEPRI, r3
 80085a6:	f3bf 8f6f 	isb	sy
 80085aa:	f3bf 8f4f 	dsb	sy
 80085ae:	617b      	str	r3, [r7, #20]
}
 80085b0:	bf00      	nop
 80085b2:	e7fe      	b.n	80085b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d06e      	beq.n	8008698 <pvPortMalloc+0x150>
 80085ba:	4b45      	ldr	r3, [pc, #276]	; (80086d0 <pvPortMalloc+0x188>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d869      	bhi.n	8008698 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80085c4:	4b43      	ldr	r3, [pc, #268]	; (80086d4 <pvPortMalloc+0x18c>)
 80085c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80085c8:	4b42      	ldr	r3, [pc, #264]	; (80086d4 <pvPortMalloc+0x18c>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80085ce:	e004      	b.n	80085da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80085d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80085d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80085da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d903      	bls.n	80085ec <pvPortMalloc+0xa4>
 80085e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d1f1      	bne.n	80085d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80085ec:	4b36      	ldr	r3, [pc, #216]	; (80086c8 <pvPortMalloc+0x180>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d050      	beq.n	8008698 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80085f6:	6a3b      	ldr	r3, [r7, #32]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	2208      	movs	r2, #8
 80085fc:	4413      	add	r3, r2
 80085fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	6a3b      	ldr	r3, [r7, #32]
 8008606:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860a:	685a      	ldr	r2, [r3, #4]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	1ad2      	subs	r2, r2, r3
 8008610:	2308      	movs	r3, #8
 8008612:	005b      	lsls	r3, r3, #1
 8008614:	429a      	cmp	r2, r3
 8008616:	d91f      	bls.n	8008658 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	4413      	add	r3, r2
 800861e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008620:	69bb      	ldr	r3, [r7, #24]
 8008622:	f003 0307 	and.w	r3, r3, #7
 8008626:	2b00      	cmp	r3, #0
 8008628:	d00a      	beq.n	8008640 <pvPortMalloc+0xf8>
	__asm volatile
 800862a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800862e:	f383 8811 	msr	BASEPRI, r3
 8008632:	f3bf 8f6f 	isb	sy
 8008636:	f3bf 8f4f 	dsb	sy
 800863a:	613b      	str	r3, [r7, #16]
}
 800863c:	bf00      	nop
 800863e:	e7fe      	b.n	800863e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008642:	685a      	ldr	r2, [r3, #4]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	1ad2      	subs	r2, r2, r3
 8008648:	69bb      	ldr	r3, [r7, #24]
 800864a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800864c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864e:	687a      	ldr	r2, [r7, #4]
 8008650:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008652:	69b8      	ldr	r0, [r7, #24]
 8008654:	f000 f908 	bl	8008868 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008658:	4b1d      	ldr	r3, [pc, #116]	; (80086d0 <pvPortMalloc+0x188>)
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	1ad3      	subs	r3, r2, r3
 8008662:	4a1b      	ldr	r2, [pc, #108]	; (80086d0 <pvPortMalloc+0x188>)
 8008664:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008666:	4b1a      	ldr	r3, [pc, #104]	; (80086d0 <pvPortMalloc+0x188>)
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	4b1b      	ldr	r3, [pc, #108]	; (80086d8 <pvPortMalloc+0x190>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	429a      	cmp	r2, r3
 8008670:	d203      	bcs.n	800867a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008672:	4b17      	ldr	r3, [pc, #92]	; (80086d0 <pvPortMalloc+0x188>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a18      	ldr	r2, [pc, #96]	; (80086d8 <pvPortMalloc+0x190>)
 8008678:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800867a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867c:	685a      	ldr	r2, [r3, #4]
 800867e:	4b13      	ldr	r3, [pc, #76]	; (80086cc <pvPortMalloc+0x184>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	431a      	orrs	r2, r3
 8008684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008686:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868a:	2200      	movs	r2, #0
 800868c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800868e:	4b13      	ldr	r3, [pc, #76]	; (80086dc <pvPortMalloc+0x194>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	3301      	adds	r3, #1
 8008694:	4a11      	ldr	r2, [pc, #68]	; (80086dc <pvPortMalloc+0x194>)
 8008696:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008698:	f7ff f8a2 	bl	80077e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	f003 0307 	and.w	r3, r3, #7
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d00a      	beq.n	80086bc <pvPortMalloc+0x174>
	__asm volatile
 80086a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086aa:	f383 8811 	msr	BASEPRI, r3
 80086ae:	f3bf 8f6f 	isb	sy
 80086b2:	f3bf 8f4f 	dsb	sy
 80086b6:	60fb      	str	r3, [r7, #12]
}
 80086b8:	bf00      	nop
 80086ba:	e7fe      	b.n	80086ba <pvPortMalloc+0x172>
	return pvReturn;
 80086bc:	69fb      	ldr	r3, [r7, #28]
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3728      	adds	r7, #40	; 0x28
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	20004504 	.word	0x20004504
 80086cc:	20004518 	.word	0x20004518
 80086d0:	20004508 	.word	0x20004508
 80086d4:	200044fc 	.word	0x200044fc
 80086d8:	2000450c 	.word	0x2000450c
 80086dc:	20004510 	.word	0x20004510

080086e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b086      	sub	sp, #24
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d04d      	beq.n	800878e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80086f2:	2308      	movs	r3, #8
 80086f4:	425b      	negs	r3, r3
 80086f6:	697a      	ldr	r2, [r7, #20]
 80086f8:	4413      	add	r3, r2
 80086fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	685a      	ldr	r2, [r3, #4]
 8008704:	4b24      	ldr	r3, [pc, #144]	; (8008798 <vPortFree+0xb8>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4013      	ands	r3, r2
 800870a:	2b00      	cmp	r3, #0
 800870c:	d10a      	bne.n	8008724 <vPortFree+0x44>
	__asm volatile
 800870e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008712:	f383 8811 	msr	BASEPRI, r3
 8008716:	f3bf 8f6f 	isb	sy
 800871a:	f3bf 8f4f 	dsb	sy
 800871e:	60fb      	str	r3, [r7, #12]
}
 8008720:	bf00      	nop
 8008722:	e7fe      	b.n	8008722 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d00a      	beq.n	8008742 <vPortFree+0x62>
	__asm volatile
 800872c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008730:	f383 8811 	msr	BASEPRI, r3
 8008734:	f3bf 8f6f 	isb	sy
 8008738:	f3bf 8f4f 	dsb	sy
 800873c:	60bb      	str	r3, [r7, #8]
}
 800873e:	bf00      	nop
 8008740:	e7fe      	b.n	8008740 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	685a      	ldr	r2, [r3, #4]
 8008746:	4b14      	ldr	r3, [pc, #80]	; (8008798 <vPortFree+0xb8>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4013      	ands	r3, r2
 800874c:	2b00      	cmp	r3, #0
 800874e:	d01e      	beq.n	800878e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d11a      	bne.n	800878e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	685a      	ldr	r2, [r3, #4]
 800875c:	4b0e      	ldr	r3, [pc, #56]	; (8008798 <vPortFree+0xb8>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	43db      	mvns	r3, r3
 8008762:	401a      	ands	r2, r3
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008768:	f7ff f82c 	bl	80077c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	685a      	ldr	r2, [r3, #4]
 8008770:	4b0a      	ldr	r3, [pc, #40]	; (800879c <vPortFree+0xbc>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4413      	add	r3, r2
 8008776:	4a09      	ldr	r2, [pc, #36]	; (800879c <vPortFree+0xbc>)
 8008778:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800877a:	6938      	ldr	r0, [r7, #16]
 800877c:	f000 f874 	bl	8008868 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008780:	4b07      	ldr	r3, [pc, #28]	; (80087a0 <vPortFree+0xc0>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	3301      	adds	r3, #1
 8008786:	4a06      	ldr	r2, [pc, #24]	; (80087a0 <vPortFree+0xc0>)
 8008788:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800878a:	f7ff f829 	bl	80077e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800878e:	bf00      	nop
 8008790:	3718      	adds	r7, #24
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}
 8008796:	bf00      	nop
 8008798:	20004518 	.word	0x20004518
 800879c:	20004508 	.word	0x20004508
 80087a0:	20004514 	.word	0x20004514

080087a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80087a4:	b480      	push	{r7}
 80087a6:	b085      	sub	sp, #20
 80087a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80087aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80087ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80087b0:	4b27      	ldr	r3, [pc, #156]	; (8008850 <prvHeapInit+0xac>)
 80087b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f003 0307 	and.w	r3, r3, #7
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00c      	beq.n	80087d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	3307      	adds	r3, #7
 80087c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f023 0307 	bic.w	r3, r3, #7
 80087ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80087cc:	68ba      	ldr	r2, [r7, #8]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	1ad3      	subs	r3, r2, r3
 80087d2:	4a1f      	ldr	r2, [pc, #124]	; (8008850 <prvHeapInit+0xac>)
 80087d4:	4413      	add	r3, r2
 80087d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80087dc:	4a1d      	ldr	r2, [pc, #116]	; (8008854 <prvHeapInit+0xb0>)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80087e2:	4b1c      	ldr	r3, [pc, #112]	; (8008854 <prvHeapInit+0xb0>)
 80087e4:	2200      	movs	r2, #0
 80087e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	68ba      	ldr	r2, [r7, #8]
 80087ec:	4413      	add	r3, r2
 80087ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80087f0:	2208      	movs	r2, #8
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	1a9b      	subs	r3, r3, r2
 80087f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f023 0307 	bic.w	r3, r3, #7
 80087fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	4a15      	ldr	r2, [pc, #84]	; (8008858 <prvHeapInit+0xb4>)
 8008804:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008806:	4b14      	ldr	r3, [pc, #80]	; (8008858 <prvHeapInit+0xb4>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2200      	movs	r2, #0
 800880c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800880e:	4b12      	ldr	r3, [pc, #72]	; (8008858 <prvHeapInit+0xb4>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	2200      	movs	r2, #0
 8008814:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	68fa      	ldr	r2, [r7, #12]
 800881e:	1ad2      	subs	r2, r2, r3
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008824:	4b0c      	ldr	r3, [pc, #48]	; (8008858 <prvHeapInit+0xb4>)
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	4a0a      	ldr	r2, [pc, #40]	; (800885c <prvHeapInit+0xb8>)
 8008832:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	4a09      	ldr	r2, [pc, #36]	; (8008860 <prvHeapInit+0xbc>)
 800883a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800883c:	4b09      	ldr	r3, [pc, #36]	; (8008864 <prvHeapInit+0xc0>)
 800883e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008842:	601a      	str	r2, [r3, #0]
}
 8008844:	bf00      	nop
 8008846:	3714      	adds	r7, #20
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr
 8008850:	200008fc 	.word	0x200008fc
 8008854:	200044fc 	.word	0x200044fc
 8008858:	20004504 	.word	0x20004504
 800885c:	2000450c 	.word	0x2000450c
 8008860:	20004508 	.word	0x20004508
 8008864:	20004518 	.word	0x20004518

08008868 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008868:	b480      	push	{r7}
 800886a:	b085      	sub	sp, #20
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008870:	4b28      	ldr	r3, [pc, #160]	; (8008914 <prvInsertBlockIntoFreeList+0xac>)
 8008872:	60fb      	str	r3, [r7, #12]
 8008874:	e002      	b.n	800887c <prvInsertBlockIntoFreeList+0x14>
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	60fb      	str	r3, [r7, #12]
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	429a      	cmp	r2, r3
 8008884:	d8f7      	bhi.n	8008876 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	68ba      	ldr	r2, [r7, #8]
 8008890:	4413      	add	r3, r2
 8008892:	687a      	ldr	r2, [r7, #4]
 8008894:	429a      	cmp	r2, r3
 8008896:	d108      	bne.n	80088aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	685a      	ldr	r2, [r3, #4]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	441a      	add	r2, r3
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	68ba      	ldr	r2, [r7, #8]
 80088b4:	441a      	add	r2, r3
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d118      	bne.n	80088f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	4b15      	ldr	r3, [pc, #84]	; (8008918 <prvInsertBlockIntoFreeList+0xb0>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d00d      	beq.n	80088e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	685a      	ldr	r2, [r3, #4]
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	441a      	add	r2, r3
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	601a      	str	r2, [r3, #0]
 80088e4:	e008      	b.n	80088f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80088e6:	4b0c      	ldr	r3, [pc, #48]	; (8008918 <prvInsertBlockIntoFreeList+0xb0>)
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	601a      	str	r2, [r3, #0]
 80088ee:	e003      	b.n	80088f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681a      	ldr	r2, [r3, #0]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80088f8:	68fa      	ldr	r2, [r7, #12]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d002      	beq.n	8008906 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008906:	bf00      	nop
 8008908:	3714      	adds	r7, #20
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr
 8008912:	bf00      	nop
 8008914:	200044fc 	.word	0x200044fc
 8008918:	20004504 	.word	0x20004504

0800891c <__errno>:
 800891c:	4b01      	ldr	r3, [pc, #4]	; (8008924 <__errno+0x8>)
 800891e:	6818      	ldr	r0, [r3, #0]
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop
 8008924:	20000020 	.word	0x20000020

08008928 <std>:
 8008928:	2300      	movs	r3, #0
 800892a:	b510      	push	{r4, lr}
 800892c:	4604      	mov	r4, r0
 800892e:	e9c0 3300 	strd	r3, r3, [r0]
 8008932:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008936:	6083      	str	r3, [r0, #8]
 8008938:	8181      	strh	r1, [r0, #12]
 800893a:	6643      	str	r3, [r0, #100]	; 0x64
 800893c:	81c2      	strh	r2, [r0, #14]
 800893e:	6183      	str	r3, [r0, #24]
 8008940:	4619      	mov	r1, r3
 8008942:	2208      	movs	r2, #8
 8008944:	305c      	adds	r0, #92	; 0x5c
 8008946:	f000 f91a 	bl	8008b7e <memset>
 800894a:	4b05      	ldr	r3, [pc, #20]	; (8008960 <std+0x38>)
 800894c:	6263      	str	r3, [r4, #36]	; 0x24
 800894e:	4b05      	ldr	r3, [pc, #20]	; (8008964 <std+0x3c>)
 8008950:	62a3      	str	r3, [r4, #40]	; 0x28
 8008952:	4b05      	ldr	r3, [pc, #20]	; (8008968 <std+0x40>)
 8008954:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008956:	4b05      	ldr	r3, [pc, #20]	; (800896c <std+0x44>)
 8008958:	6224      	str	r4, [r4, #32]
 800895a:	6323      	str	r3, [r4, #48]	; 0x30
 800895c:	bd10      	pop	{r4, pc}
 800895e:	bf00      	nop
 8008960:	08009aed 	.word	0x08009aed
 8008964:	08009b0f 	.word	0x08009b0f
 8008968:	08009b47 	.word	0x08009b47
 800896c:	08009b6b 	.word	0x08009b6b

08008970 <_cleanup_r>:
 8008970:	4901      	ldr	r1, [pc, #4]	; (8008978 <_cleanup_r+0x8>)
 8008972:	f000 b8af 	b.w	8008ad4 <_fwalk_reent>
 8008976:	bf00      	nop
 8008978:	0800b719 	.word	0x0800b719

0800897c <__sfmoreglue>:
 800897c:	b570      	push	{r4, r5, r6, lr}
 800897e:	2268      	movs	r2, #104	; 0x68
 8008980:	1e4d      	subs	r5, r1, #1
 8008982:	4355      	muls	r5, r2
 8008984:	460e      	mov	r6, r1
 8008986:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800898a:	f000 f921 	bl	8008bd0 <_malloc_r>
 800898e:	4604      	mov	r4, r0
 8008990:	b140      	cbz	r0, 80089a4 <__sfmoreglue+0x28>
 8008992:	2100      	movs	r1, #0
 8008994:	e9c0 1600 	strd	r1, r6, [r0]
 8008998:	300c      	adds	r0, #12
 800899a:	60a0      	str	r0, [r4, #8]
 800899c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80089a0:	f000 f8ed 	bl	8008b7e <memset>
 80089a4:	4620      	mov	r0, r4
 80089a6:	bd70      	pop	{r4, r5, r6, pc}

080089a8 <__sfp_lock_acquire>:
 80089a8:	4801      	ldr	r0, [pc, #4]	; (80089b0 <__sfp_lock_acquire+0x8>)
 80089aa:	f000 b8d8 	b.w	8008b5e <__retarget_lock_acquire_recursive>
 80089ae:	bf00      	nop
 80089b0:	2000451d 	.word	0x2000451d

080089b4 <__sfp_lock_release>:
 80089b4:	4801      	ldr	r0, [pc, #4]	; (80089bc <__sfp_lock_release+0x8>)
 80089b6:	f000 b8d3 	b.w	8008b60 <__retarget_lock_release_recursive>
 80089ba:	bf00      	nop
 80089bc:	2000451d 	.word	0x2000451d

080089c0 <__sinit_lock_acquire>:
 80089c0:	4801      	ldr	r0, [pc, #4]	; (80089c8 <__sinit_lock_acquire+0x8>)
 80089c2:	f000 b8cc 	b.w	8008b5e <__retarget_lock_acquire_recursive>
 80089c6:	bf00      	nop
 80089c8:	2000451e 	.word	0x2000451e

080089cc <__sinit_lock_release>:
 80089cc:	4801      	ldr	r0, [pc, #4]	; (80089d4 <__sinit_lock_release+0x8>)
 80089ce:	f000 b8c7 	b.w	8008b60 <__retarget_lock_release_recursive>
 80089d2:	bf00      	nop
 80089d4:	2000451e 	.word	0x2000451e

080089d8 <__sinit>:
 80089d8:	b510      	push	{r4, lr}
 80089da:	4604      	mov	r4, r0
 80089dc:	f7ff fff0 	bl	80089c0 <__sinit_lock_acquire>
 80089e0:	69a3      	ldr	r3, [r4, #24]
 80089e2:	b11b      	cbz	r3, 80089ec <__sinit+0x14>
 80089e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089e8:	f7ff bff0 	b.w	80089cc <__sinit_lock_release>
 80089ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80089f0:	6523      	str	r3, [r4, #80]	; 0x50
 80089f2:	4b13      	ldr	r3, [pc, #76]	; (8008a40 <__sinit+0x68>)
 80089f4:	4a13      	ldr	r2, [pc, #76]	; (8008a44 <__sinit+0x6c>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80089fa:	42a3      	cmp	r3, r4
 80089fc:	bf04      	itt	eq
 80089fe:	2301      	moveq	r3, #1
 8008a00:	61a3      	streq	r3, [r4, #24]
 8008a02:	4620      	mov	r0, r4
 8008a04:	f000 f820 	bl	8008a48 <__sfp>
 8008a08:	6060      	str	r0, [r4, #4]
 8008a0a:	4620      	mov	r0, r4
 8008a0c:	f000 f81c 	bl	8008a48 <__sfp>
 8008a10:	60a0      	str	r0, [r4, #8]
 8008a12:	4620      	mov	r0, r4
 8008a14:	f000 f818 	bl	8008a48 <__sfp>
 8008a18:	2200      	movs	r2, #0
 8008a1a:	60e0      	str	r0, [r4, #12]
 8008a1c:	2104      	movs	r1, #4
 8008a1e:	6860      	ldr	r0, [r4, #4]
 8008a20:	f7ff ff82 	bl	8008928 <std>
 8008a24:	68a0      	ldr	r0, [r4, #8]
 8008a26:	2201      	movs	r2, #1
 8008a28:	2109      	movs	r1, #9
 8008a2a:	f7ff ff7d 	bl	8008928 <std>
 8008a2e:	68e0      	ldr	r0, [r4, #12]
 8008a30:	2202      	movs	r2, #2
 8008a32:	2112      	movs	r1, #18
 8008a34:	f7ff ff78 	bl	8008928 <std>
 8008a38:	2301      	movs	r3, #1
 8008a3a:	61a3      	str	r3, [r4, #24]
 8008a3c:	e7d2      	b.n	80089e4 <__sinit+0xc>
 8008a3e:	bf00      	nop
 8008a40:	0800d4ac 	.word	0x0800d4ac
 8008a44:	08008971 	.word	0x08008971

08008a48 <__sfp>:
 8008a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a4a:	4607      	mov	r7, r0
 8008a4c:	f7ff ffac 	bl	80089a8 <__sfp_lock_acquire>
 8008a50:	4b1e      	ldr	r3, [pc, #120]	; (8008acc <__sfp+0x84>)
 8008a52:	681e      	ldr	r6, [r3, #0]
 8008a54:	69b3      	ldr	r3, [r6, #24]
 8008a56:	b913      	cbnz	r3, 8008a5e <__sfp+0x16>
 8008a58:	4630      	mov	r0, r6
 8008a5a:	f7ff ffbd 	bl	80089d8 <__sinit>
 8008a5e:	3648      	adds	r6, #72	; 0x48
 8008a60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008a64:	3b01      	subs	r3, #1
 8008a66:	d503      	bpl.n	8008a70 <__sfp+0x28>
 8008a68:	6833      	ldr	r3, [r6, #0]
 8008a6a:	b30b      	cbz	r3, 8008ab0 <__sfp+0x68>
 8008a6c:	6836      	ldr	r6, [r6, #0]
 8008a6e:	e7f7      	b.n	8008a60 <__sfp+0x18>
 8008a70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008a74:	b9d5      	cbnz	r5, 8008aac <__sfp+0x64>
 8008a76:	4b16      	ldr	r3, [pc, #88]	; (8008ad0 <__sfp+0x88>)
 8008a78:	60e3      	str	r3, [r4, #12]
 8008a7a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008a7e:	6665      	str	r5, [r4, #100]	; 0x64
 8008a80:	f000 f86c 	bl	8008b5c <__retarget_lock_init_recursive>
 8008a84:	f7ff ff96 	bl	80089b4 <__sfp_lock_release>
 8008a88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008a8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008a90:	6025      	str	r5, [r4, #0]
 8008a92:	61a5      	str	r5, [r4, #24]
 8008a94:	2208      	movs	r2, #8
 8008a96:	4629      	mov	r1, r5
 8008a98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008a9c:	f000 f86f 	bl	8008b7e <memset>
 8008aa0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008aa4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008aa8:	4620      	mov	r0, r4
 8008aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008aac:	3468      	adds	r4, #104	; 0x68
 8008aae:	e7d9      	b.n	8008a64 <__sfp+0x1c>
 8008ab0:	2104      	movs	r1, #4
 8008ab2:	4638      	mov	r0, r7
 8008ab4:	f7ff ff62 	bl	800897c <__sfmoreglue>
 8008ab8:	4604      	mov	r4, r0
 8008aba:	6030      	str	r0, [r6, #0]
 8008abc:	2800      	cmp	r0, #0
 8008abe:	d1d5      	bne.n	8008a6c <__sfp+0x24>
 8008ac0:	f7ff ff78 	bl	80089b4 <__sfp_lock_release>
 8008ac4:	230c      	movs	r3, #12
 8008ac6:	603b      	str	r3, [r7, #0]
 8008ac8:	e7ee      	b.n	8008aa8 <__sfp+0x60>
 8008aca:	bf00      	nop
 8008acc:	0800d4ac 	.word	0x0800d4ac
 8008ad0:	ffff0001 	.word	0xffff0001

08008ad4 <_fwalk_reent>:
 8008ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ad8:	4606      	mov	r6, r0
 8008ada:	4688      	mov	r8, r1
 8008adc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008ae0:	2700      	movs	r7, #0
 8008ae2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ae6:	f1b9 0901 	subs.w	r9, r9, #1
 8008aea:	d505      	bpl.n	8008af8 <_fwalk_reent+0x24>
 8008aec:	6824      	ldr	r4, [r4, #0]
 8008aee:	2c00      	cmp	r4, #0
 8008af0:	d1f7      	bne.n	8008ae2 <_fwalk_reent+0xe>
 8008af2:	4638      	mov	r0, r7
 8008af4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008af8:	89ab      	ldrh	r3, [r5, #12]
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d907      	bls.n	8008b0e <_fwalk_reent+0x3a>
 8008afe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b02:	3301      	adds	r3, #1
 8008b04:	d003      	beq.n	8008b0e <_fwalk_reent+0x3a>
 8008b06:	4629      	mov	r1, r5
 8008b08:	4630      	mov	r0, r6
 8008b0a:	47c0      	blx	r8
 8008b0c:	4307      	orrs	r7, r0
 8008b0e:	3568      	adds	r5, #104	; 0x68
 8008b10:	e7e9      	b.n	8008ae6 <_fwalk_reent+0x12>
	...

08008b14 <__libc_init_array>:
 8008b14:	b570      	push	{r4, r5, r6, lr}
 8008b16:	4d0d      	ldr	r5, [pc, #52]	; (8008b4c <__libc_init_array+0x38>)
 8008b18:	4c0d      	ldr	r4, [pc, #52]	; (8008b50 <__libc_init_array+0x3c>)
 8008b1a:	1b64      	subs	r4, r4, r5
 8008b1c:	10a4      	asrs	r4, r4, #2
 8008b1e:	2600      	movs	r6, #0
 8008b20:	42a6      	cmp	r6, r4
 8008b22:	d109      	bne.n	8008b38 <__libc_init_array+0x24>
 8008b24:	4d0b      	ldr	r5, [pc, #44]	; (8008b54 <__libc_init_array+0x40>)
 8008b26:	4c0c      	ldr	r4, [pc, #48]	; (8008b58 <__libc_init_array+0x44>)
 8008b28:	f004 fc08 	bl	800d33c <_init>
 8008b2c:	1b64      	subs	r4, r4, r5
 8008b2e:	10a4      	asrs	r4, r4, #2
 8008b30:	2600      	movs	r6, #0
 8008b32:	42a6      	cmp	r6, r4
 8008b34:	d105      	bne.n	8008b42 <__libc_init_array+0x2e>
 8008b36:	bd70      	pop	{r4, r5, r6, pc}
 8008b38:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b3c:	4798      	blx	r3
 8008b3e:	3601      	adds	r6, #1
 8008b40:	e7ee      	b.n	8008b20 <__libc_init_array+0xc>
 8008b42:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b46:	4798      	blx	r3
 8008b48:	3601      	adds	r6, #1
 8008b4a:	e7f2      	b.n	8008b32 <__libc_init_array+0x1e>
 8008b4c:	0800d8fc 	.word	0x0800d8fc
 8008b50:	0800d8fc 	.word	0x0800d8fc
 8008b54:	0800d8fc 	.word	0x0800d8fc
 8008b58:	0800d900 	.word	0x0800d900

08008b5c <__retarget_lock_init_recursive>:
 8008b5c:	4770      	bx	lr

08008b5e <__retarget_lock_acquire_recursive>:
 8008b5e:	4770      	bx	lr

08008b60 <__retarget_lock_release_recursive>:
 8008b60:	4770      	bx	lr

08008b62 <memcpy>:
 8008b62:	440a      	add	r2, r1
 8008b64:	4291      	cmp	r1, r2
 8008b66:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b6a:	d100      	bne.n	8008b6e <memcpy+0xc>
 8008b6c:	4770      	bx	lr
 8008b6e:	b510      	push	{r4, lr}
 8008b70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b78:	4291      	cmp	r1, r2
 8008b7a:	d1f9      	bne.n	8008b70 <memcpy+0xe>
 8008b7c:	bd10      	pop	{r4, pc}

08008b7e <memset>:
 8008b7e:	4402      	add	r2, r0
 8008b80:	4603      	mov	r3, r0
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d100      	bne.n	8008b88 <memset+0xa>
 8008b86:	4770      	bx	lr
 8008b88:	f803 1b01 	strb.w	r1, [r3], #1
 8008b8c:	e7f9      	b.n	8008b82 <memset+0x4>
	...

08008b90 <sbrk_aligned>:
 8008b90:	b570      	push	{r4, r5, r6, lr}
 8008b92:	4e0e      	ldr	r6, [pc, #56]	; (8008bcc <sbrk_aligned+0x3c>)
 8008b94:	460c      	mov	r4, r1
 8008b96:	6831      	ldr	r1, [r6, #0]
 8008b98:	4605      	mov	r5, r0
 8008b9a:	b911      	cbnz	r1, 8008ba2 <sbrk_aligned+0x12>
 8008b9c:	f000 ff70 	bl	8009a80 <_sbrk_r>
 8008ba0:	6030      	str	r0, [r6, #0]
 8008ba2:	4621      	mov	r1, r4
 8008ba4:	4628      	mov	r0, r5
 8008ba6:	f000 ff6b 	bl	8009a80 <_sbrk_r>
 8008baa:	1c43      	adds	r3, r0, #1
 8008bac:	d00a      	beq.n	8008bc4 <sbrk_aligned+0x34>
 8008bae:	1cc4      	adds	r4, r0, #3
 8008bb0:	f024 0403 	bic.w	r4, r4, #3
 8008bb4:	42a0      	cmp	r0, r4
 8008bb6:	d007      	beq.n	8008bc8 <sbrk_aligned+0x38>
 8008bb8:	1a21      	subs	r1, r4, r0
 8008bba:	4628      	mov	r0, r5
 8008bbc:	f000 ff60 	bl	8009a80 <_sbrk_r>
 8008bc0:	3001      	adds	r0, #1
 8008bc2:	d101      	bne.n	8008bc8 <sbrk_aligned+0x38>
 8008bc4:	f04f 34ff 	mov.w	r4, #4294967295
 8008bc8:	4620      	mov	r0, r4
 8008bca:	bd70      	pop	{r4, r5, r6, pc}
 8008bcc:	20004524 	.word	0x20004524

08008bd0 <_malloc_r>:
 8008bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bd4:	1ccd      	adds	r5, r1, #3
 8008bd6:	f025 0503 	bic.w	r5, r5, #3
 8008bda:	3508      	adds	r5, #8
 8008bdc:	2d0c      	cmp	r5, #12
 8008bde:	bf38      	it	cc
 8008be0:	250c      	movcc	r5, #12
 8008be2:	2d00      	cmp	r5, #0
 8008be4:	4607      	mov	r7, r0
 8008be6:	db01      	blt.n	8008bec <_malloc_r+0x1c>
 8008be8:	42a9      	cmp	r1, r5
 8008bea:	d905      	bls.n	8008bf8 <_malloc_r+0x28>
 8008bec:	230c      	movs	r3, #12
 8008bee:	603b      	str	r3, [r7, #0]
 8008bf0:	2600      	movs	r6, #0
 8008bf2:	4630      	mov	r0, r6
 8008bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bf8:	4e2e      	ldr	r6, [pc, #184]	; (8008cb4 <_malloc_r+0xe4>)
 8008bfa:	f003 f969 	bl	800bed0 <__malloc_lock>
 8008bfe:	6833      	ldr	r3, [r6, #0]
 8008c00:	461c      	mov	r4, r3
 8008c02:	bb34      	cbnz	r4, 8008c52 <_malloc_r+0x82>
 8008c04:	4629      	mov	r1, r5
 8008c06:	4638      	mov	r0, r7
 8008c08:	f7ff ffc2 	bl	8008b90 <sbrk_aligned>
 8008c0c:	1c43      	adds	r3, r0, #1
 8008c0e:	4604      	mov	r4, r0
 8008c10:	d14d      	bne.n	8008cae <_malloc_r+0xde>
 8008c12:	6834      	ldr	r4, [r6, #0]
 8008c14:	4626      	mov	r6, r4
 8008c16:	2e00      	cmp	r6, #0
 8008c18:	d140      	bne.n	8008c9c <_malloc_r+0xcc>
 8008c1a:	6823      	ldr	r3, [r4, #0]
 8008c1c:	4631      	mov	r1, r6
 8008c1e:	4638      	mov	r0, r7
 8008c20:	eb04 0803 	add.w	r8, r4, r3
 8008c24:	f000 ff2c 	bl	8009a80 <_sbrk_r>
 8008c28:	4580      	cmp	r8, r0
 8008c2a:	d13a      	bne.n	8008ca2 <_malloc_r+0xd2>
 8008c2c:	6821      	ldr	r1, [r4, #0]
 8008c2e:	3503      	adds	r5, #3
 8008c30:	1a6d      	subs	r5, r5, r1
 8008c32:	f025 0503 	bic.w	r5, r5, #3
 8008c36:	3508      	adds	r5, #8
 8008c38:	2d0c      	cmp	r5, #12
 8008c3a:	bf38      	it	cc
 8008c3c:	250c      	movcc	r5, #12
 8008c3e:	4629      	mov	r1, r5
 8008c40:	4638      	mov	r0, r7
 8008c42:	f7ff ffa5 	bl	8008b90 <sbrk_aligned>
 8008c46:	3001      	adds	r0, #1
 8008c48:	d02b      	beq.n	8008ca2 <_malloc_r+0xd2>
 8008c4a:	6823      	ldr	r3, [r4, #0]
 8008c4c:	442b      	add	r3, r5
 8008c4e:	6023      	str	r3, [r4, #0]
 8008c50:	e00e      	b.n	8008c70 <_malloc_r+0xa0>
 8008c52:	6822      	ldr	r2, [r4, #0]
 8008c54:	1b52      	subs	r2, r2, r5
 8008c56:	d41e      	bmi.n	8008c96 <_malloc_r+0xc6>
 8008c58:	2a0b      	cmp	r2, #11
 8008c5a:	d916      	bls.n	8008c8a <_malloc_r+0xba>
 8008c5c:	1961      	adds	r1, r4, r5
 8008c5e:	42a3      	cmp	r3, r4
 8008c60:	6025      	str	r5, [r4, #0]
 8008c62:	bf18      	it	ne
 8008c64:	6059      	strne	r1, [r3, #4]
 8008c66:	6863      	ldr	r3, [r4, #4]
 8008c68:	bf08      	it	eq
 8008c6a:	6031      	streq	r1, [r6, #0]
 8008c6c:	5162      	str	r2, [r4, r5]
 8008c6e:	604b      	str	r3, [r1, #4]
 8008c70:	4638      	mov	r0, r7
 8008c72:	f104 060b 	add.w	r6, r4, #11
 8008c76:	f003 f931 	bl	800bedc <__malloc_unlock>
 8008c7a:	f026 0607 	bic.w	r6, r6, #7
 8008c7e:	1d23      	adds	r3, r4, #4
 8008c80:	1af2      	subs	r2, r6, r3
 8008c82:	d0b6      	beq.n	8008bf2 <_malloc_r+0x22>
 8008c84:	1b9b      	subs	r3, r3, r6
 8008c86:	50a3      	str	r3, [r4, r2]
 8008c88:	e7b3      	b.n	8008bf2 <_malloc_r+0x22>
 8008c8a:	6862      	ldr	r2, [r4, #4]
 8008c8c:	42a3      	cmp	r3, r4
 8008c8e:	bf0c      	ite	eq
 8008c90:	6032      	streq	r2, [r6, #0]
 8008c92:	605a      	strne	r2, [r3, #4]
 8008c94:	e7ec      	b.n	8008c70 <_malloc_r+0xa0>
 8008c96:	4623      	mov	r3, r4
 8008c98:	6864      	ldr	r4, [r4, #4]
 8008c9a:	e7b2      	b.n	8008c02 <_malloc_r+0x32>
 8008c9c:	4634      	mov	r4, r6
 8008c9e:	6876      	ldr	r6, [r6, #4]
 8008ca0:	e7b9      	b.n	8008c16 <_malloc_r+0x46>
 8008ca2:	230c      	movs	r3, #12
 8008ca4:	603b      	str	r3, [r7, #0]
 8008ca6:	4638      	mov	r0, r7
 8008ca8:	f003 f918 	bl	800bedc <__malloc_unlock>
 8008cac:	e7a1      	b.n	8008bf2 <_malloc_r+0x22>
 8008cae:	6025      	str	r5, [r4, #0]
 8008cb0:	e7de      	b.n	8008c70 <_malloc_r+0xa0>
 8008cb2:	bf00      	nop
 8008cb4:	20004520 	.word	0x20004520

08008cb8 <__cvt>:
 8008cb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cbc:	ec55 4b10 	vmov	r4, r5, d0
 8008cc0:	2d00      	cmp	r5, #0
 8008cc2:	460e      	mov	r6, r1
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	462b      	mov	r3, r5
 8008cc8:	bfbb      	ittet	lt
 8008cca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008cce:	461d      	movlt	r5, r3
 8008cd0:	2300      	movge	r3, #0
 8008cd2:	232d      	movlt	r3, #45	; 0x2d
 8008cd4:	700b      	strb	r3, [r1, #0]
 8008cd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008cd8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008cdc:	4691      	mov	r9, r2
 8008cde:	f023 0820 	bic.w	r8, r3, #32
 8008ce2:	bfbc      	itt	lt
 8008ce4:	4622      	movlt	r2, r4
 8008ce6:	4614      	movlt	r4, r2
 8008ce8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008cec:	d005      	beq.n	8008cfa <__cvt+0x42>
 8008cee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008cf2:	d100      	bne.n	8008cf6 <__cvt+0x3e>
 8008cf4:	3601      	adds	r6, #1
 8008cf6:	2102      	movs	r1, #2
 8008cf8:	e000      	b.n	8008cfc <__cvt+0x44>
 8008cfa:	2103      	movs	r1, #3
 8008cfc:	ab03      	add	r3, sp, #12
 8008cfe:	9301      	str	r3, [sp, #4]
 8008d00:	ab02      	add	r3, sp, #8
 8008d02:	9300      	str	r3, [sp, #0]
 8008d04:	ec45 4b10 	vmov	d0, r4, r5
 8008d08:	4653      	mov	r3, sl
 8008d0a:	4632      	mov	r2, r6
 8008d0c:	f001 fe90 	bl	800aa30 <_dtoa_r>
 8008d10:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008d14:	4607      	mov	r7, r0
 8008d16:	d102      	bne.n	8008d1e <__cvt+0x66>
 8008d18:	f019 0f01 	tst.w	r9, #1
 8008d1c:	d022      	beq.n	8008d64 <__cvt+0xac>
 8008d1e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008d22:	eb07 0906 	add.w	r9, r7, r6
 8008d26:	d110      	bne.n	8008d4a <__cvt+0x92>
 8008d28:	783b      	ldrb	r3, [r7, #0]
 8008d2a:	2b30      	cmp	r3, #48	; 0x30
 8008d2c:	d10a      	bne.n	8008d44 <__cvt+0x8c>
 8008d2e:	2200      	movs	r2, #0
 8008d30:	2300      	movs	r3, #0
 8008d32:	4620      	mov	r0, r4
 8008d34:	4629      	mov	r1, r5
 8008d36:	f7f7 fecf 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d3a:	b918      	cbnz	r0, 8008d44 <__cvt+0x8c>
 8008d3c:	f1c6 0601 	rsb	r6, r6, #1
 8008d40:	f8ca 6000 	str.w	r6, [sl]
 8008d44:	f8da 3000 	ldr.w	r3, [sl]
 8008d48:	4499      	add	r9, r3
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	4620      	mov	r0, r4
 8008d50:	4629      	mov	r1, r5
 8008d52:	f7f7 fec1 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d56:	b108      	cbz	r0, 8008d5c <__cvt+0xa4>
 8008d58:	f8cd 900c 	str.w	r9, [sp, #12]
 8008d5c:	2230      	movs	r2, #48	; 0x30
 8008d5e:	9b03      	ldr	r3, [sp, #12]
 8008d60:	454b      	cmp	r3, r9
 8008d62:	d307      	bcc.n	8008d74 <__cvt+0xbc>
 8008d64:	9b03      	ldr	r3, [sp, #12]
 8008d66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d68:	1bdb      	subs	r3, r3, r7
 8008d6a:	4638      	mov	r0, r7
 8008d6c:	6013      	str	r3, [r2, #0]
 8008d6e:	b004      	add	sp, #16
 8008d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d74:	1c59      	adds	r1, r3, #1
 8008d76:	9103      	str	r1, [sp, #12]
 8008d78:	701a      	strb	r2, [r3, #0]
 8008d7a:	e7f0      	b.n	8008d5e <__cvt+0xa6>

08008d7c <__exponent>:
 8008d7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d7e:	4603      	mov	r3, r0
 8008d80:	2900      	cmp	r1, #0
 8008d82:	bfb8      	it	lt
 8008d84:	4249      	neglt	r1, r1
 8008d86:	f803 2b02 	strb.w	r2, [r3], #2
 8008d8a:	bfb4      	ite	lt
 8008d8c:	222d      	movlt	r2, #45	; 0x2d
 8008d8e:	222b      	movge	r2, #43	; 0x2b
 8008d90:	2909      	cmp	r1, #9
 8008d92:	7042      	strb	r2, [r0, #1]
 8008d94:	dd2a      	ble.n	8008dec <__exponent+0x70>
 8008d96:	f10d 0407 	add.w	r4, sp, #7
 8008d9a:	46a4      	mov	ip, r4
 8008d9c:	270a      	movs	r7, #10
 8008d9e:	46a6      	mov	lr, r4
 8008da0:	460a      	mov	r2, r1
 8008da2:	fb91 f6f7 	sdiv	r6, r1, r7
 8008da6:	fb07 1516 	mls	r5, r7, r6, r1
 8008daa:	3530      	adds	r5, #48	; 0x30
 8008dac:	2a63      	cmp	r2, #99	; 0x63
 8008dae:	f104 34ff 	add.w	r4, r4, #4294967295
 8008db2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008db6:	4631      	mov	r1, r6
 8008db8:	dcf1      	bgt.n	8008d9e <__exponent+0x22>
 8008dba:	3130      	adds	r1, #48	; 0x30
 8008dbc:	f1ae 0502 	sub.w	r5, lr, #2
 8008dc0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008dc4:	1c44      	adds	r4, r0, #1
 8008dc6:	4629      	mov	r1, r5
 8008dc8:	4561      	cmp	r1, ip
 8008dca:	d30a      	bcc.n	8008de2 <__exponent+0x66>
 8008dcc:	f10d 0209 	add.w	r2, sp, #9
 8008dd0:	eba2 020e 	sub.w	r2, r2, lr
 8008dd4:	4565      	cmp	r5, ip
 8008dd6:	bf88      	it	hi
 8008dd8:	2200      	movhi	r2, #0
 8008dda:	4413      	add	r3, r2
 8008ddc:	1a18      	subs	r0, r3, r0
 8008dde:	b003      	add	sp, #12
 8008de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008de2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008de6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008dea:	e7ed      	b.n	8008dc8 <__exponent+0x4c>
 8008dec:	2330      	movs	r3, #48	; 0x30
 8008dee:	3130      	adds	r1, #48	; 0x30
 8008df0:	7083      	strb	r3, [r0, #2]
 8008df2:	70c1      	strb	r1, [r0, #3]
 8008df4:	1d03      	adds	r3, r0, #4
 8008df6:	e7f1      	b.n	8008ddc <__exponent+0x60>

08008df8 <_printf_float>:
 8008df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dfc:	ed2d 8b02 	vpush	{d8}
 8008e00:	b08d      	sub	sp, #52	; 0x34
 8008e02:	460c      	mov	r4, r1
 8008e04:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008e08:	4616      	mov	r6, r2
 8008e0a:	461f      	mov	r7, r3
 8008e0c:	4605      	mov	r5, r0
 8008e0e:	f003 f82f 	bl	800be70 <_localeconv_r>
 8008e12:	f8d0 a000 	ldr.w	sl, [r0]
 8008e16:	4650      	mov	r0, sl
 8008e18:	f7f7 f9e2 	bl	80001e0 <strlen>
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	930a      	str	r3, [sp, #40]	; 0x28
 8008e20:	6823      	ldr	r3, [r4, #0]
 8008e22:	9305      	str	r3, [sp, #20]
 8008e24:	f8d8 3000 	ldr.w	r3, [r8]
 8008e28:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008e2c:	3307      	adds	r3, #7
 8008e2e:	f023 0307 	bic.w	r3, r3, #7
 8008e32:	f103 0208 	add.w	r2, r3, #8
 8008e36:	f8c8 2000 	str.w	r2, [r8]
 8008e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e3e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008e42:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008e46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008e4a:	9307      	str	r3, [sp, #28]
 8008e4c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008e50:	ee08 0a10 	vmov	s16, r0
 8008e54:	4b9f      	ldr	r3, [pc, #636]	; (80090d4 <_printf_float+0x2dc>)
 8008e56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e5e:	f7f7 fe6d 	bl	8000b3c <__aeabi_dcmpun>
 8008e62:	bb88      	cbnz	r0, 8008ec8 <_printf_float+0xd0>
 8008e64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e68:	4b9a      	ldr	r3, [pc, #616]	; (80090d4 <_printf_float+0x2dc>)
 8008e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e6e:	f7f7 fe47 	bl	8000b00 <__aeabi_dcmple>
 8008e72:	bb48      	cbnz	r0, 8008ec8 <_printf_float+0xd0>
 8008e74:	2200      	movs	r2, #0
 8008e76:	2300      	movs	r3, #0
 8008e78:	4640      	mov	r0, r8
 8008e7a:	4649      	mov	r1, r9
 8008e7c:	f7f7 fe36 	bl	8000aec <__aeabi_dcmplt>
 8008e80:	b110      	cbz	r0, 8008e88 <_printf_float+0x90>
 8008e82:	232d      	movs	r3, #45	; 0x2d
 8008e84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e88:	4b93      	ldr	r3, [pc, #588]	; (80090d8 <_printf_float+0x2e0>)
 8008e8a:	4894      	ldr	r0, [pc, #592]	; (80090dc <_printf_float+0x2e4>)
 8008e8c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008e90:	bf94      	ite	ls
 8008e92:	4698      	movls	r8, r3
 8008e94:	4680      	movhi	r8, r0
 8008e96:	2303      	movs	r3, #3
 8008e98:	6123      	str	r3, [r4, #16]
 8008e9a:	9b05      	ldr	r3, [sp, #20]
 8008e9c:	f023 0204 	bic.w	r2, r3, #4
 8008ea0:	6022      	str	r2, [r4, #0]
 8008ea2:	f04f 0900 	mov.w	r9, #0
 8008ea6:	9700      	str	r7, [sp, #0]
 8008ea8:	4633      	mov	r3, r6
 8008eaa:	aa0b      	add	r2, sp, #44	; 0x2c
 8008eac:	4621      	mov	r1, r4
 8008eae:	4628      	mov	r0, r5
 8008eb0:	f000 f9d8 	bl	8009264 <_printf_common>
 8008eb4:	3001      	adds	r0, #1
 8008eb6:	f040 8090 	bne.w	8008fda <_printf_float+0x1e2>
 8008eba:	f04f 30ff 	mov.w	r0, #4294967295
 8008ebe:	b00d      	add	sp, #52	; 0x34
 8008ec0:	ecbd 8b02 	vpop	{d8}
 8008ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ec8:	4642      	mov	r2, r8
 8008eca:	464b      	mov	r3, r9
 8008ecc:	4640      	mov	r0, r8
 8008ece:	4649      	mov	r1, r9
 8008ed0:	f7f7 fe34 	bl	8000b3c <__aeabi_dcmpun>
 8008ed4:	b140      	cbz	r0, 8008ee8 <_printf_float+0xf0>
 8008ed6:	464b      	mov	r3, r9
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	bfbc      	itt	lt
 8008edc:	232d      	movlt	r3, #45	; 0x2d
 8008ede:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008ee2:	487f      	ldr	r0, [pc, #508]	; (80090e0 <_printf_float+0x2e8>)
 8008ee4:	4b7f      	ldr	r3, [pc, #508]	; (80090e4 <_printf_float+0x2ec>)
 8008ee6:	e7d1      	b.n	8008e8c <_printf_float+0x94>
 8008ee8:	6863      	ldr	r3, [r4, #4]
 8008eea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008eee:	9206      	str	r2, [sp, #24]
 8008ef0:	1c5a      	adds	r2, r3, #1
 8008ef2:	d13f      	bne.n	8008f74 <_printf_float+0x17c>
 8008ef4:	2306      	movs	r3, #6
 8008ef6:	6063      	str	r3, [r4, #4]
 8008ef8:	9b05      	ldr	r3, [sp, #20]
 8008efa:	6861      	ldr	r1, [r4, #4]
 8008efc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008f00:	2300      	movs	r3, #0
 8008f02:	9303      	str	r3, [sp, #12]
 8008f04:	ab0a      	add	r3, sp, #40	; 0x28
 8008f06:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008f0a:	ab09      	add	r3, sp, #36	; 0x24
 8008f0c:	ec49 8b10 	vmov	d0, r8, r9
 8008f10:	9300      	str	r3, [sp, #0]
 8008f12:	6022      	str	r2, [r4, #0]
 8008f14:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008f18:	4628      	mov	r0, r5
 8008f1a:	f7ff fecd 	bl	8008cb8 <__cvt>
 8008f1e:	9b06      	ldr	r3, [sp, #24]
 8008f20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f22:	2b47      	cmp	r3, #71	; 0x47
 8008f24:	4680      	mov	r8, r0
 8008f26:	d108      	bne.n	8008f3a <_printf_float+0x142>
 8008f28:	1cc8      	adds	r0, r1, #3
 8008f2a:	db02      	blt.n	8008f32 <_printf_float+0x13a>
 8008f2c:	6863      	ldr	r3, [r4, #4]
 8008f2e:	4299      	cmp	r1, r3
 8008f30:	dd41      	ble.n	8008fb6 <_printf_float+0x1be>
 8008f32:	f1ab 0b02 	sub.w	fp, fp, #2
 8008f36:	fa5f fb8b 	uxtb.w	fp, fp
 8008f3a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008f3e:	d820      	bhi.n	8008f82 <_printf_float+0x18a>
 8008f40:	3901      	subs	r1, #1
 8008f42:	465a      	mov	r2, fp
 8008f44:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008f48:	9109      	str	r1, [sp, #36]	; 0x24
 8008f4a:	f7ff ff17 	bl	8008d7c <__exponent>
 8008f4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f50:	1813      	adds	r3, r2, r0
 8008f52:	2a01      	cmp	r2, #1
 8008f54:	4681      	mov	r9, r0
 8008f56:	6123      	str	r3, [r4, #16]
 8008f58:	dc02      	bgt.n	8008f60 <_printf_float+0x168>
 8008f5a:	6822      	ldr	r2, [r4, #0]
 8008f5c:	07d2      	lsls	r2, r2, #31
 8008f5e:	d501      	bpl.n	8008f64 <_printf_float+0x16c>
 8008f60:	3301      	adds	r3, #1
 8008f62:	6123      	str	r3, [r4, #16]
 8008f64:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d09c      	beq.n	8008ea6 <_printf_float+0xae>
 8008f6c:	232d      	movs	r3, #45	; 0x2d
 8008f6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f72:	e798      	b.n	8008ea6 <_printf_float+0xae>
 8008f74:	9a06      	ldr	r2, [sp, #24]
 8008f76:	2a47      	cmp	r2, #71	; 0x47
 8008f78:	d1be      	bne.n	8008ef8 <_printf_float+0x100>
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d1bc      	bne.n	8008ef8 <_printf_float+0x100>
 8008f7e:	2301      	movs	r3, #1
 8008f80:	e7b9      	b.n	8008ef6 <_printf_float+0xfe>
 8008f82:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008f86:	d118      	bne.n	8008fba <_printf_float+0x1c2>
 8008f88:	2900      	cmp	r1, #0
 8008f8a:	6863      	ldr	r3, [r4, #4]
 8008f8c:	dd0b      	ble.n	8008fa6 <_printf_float+0x1ae>
 8008f8e:	6121      	str	r1, [r4, #16]
 8008f90:	b913      	cbnz	r3, 8008f98 <_printf_float+0x1a0>
 8008f92:	6822      	ldr	r2, [r4, #0]
 8008f94:	07d0      	lsls	r0, r2, #31
 8008f96:	d502      	bpl.n	8008f9e <_printf_float+0x1a6>
 8008f98:	3301      	adds	r3, #1
 8008f9a:	440b      	add	r3, r1
 8008f9c:	6123      	str	r3, [r4, #16]
 8008f9e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008fa0:	f04f 0900 	mov.w	r9, #0
 8008fa4:	e7de      	b.n	8008f64 <_printf_float+0x16c>
 8008fa6:	b913      	cbnz	r3, 8008fae <_printf_float+0x1b6>
 8008fa8:	6822      	ldr	r2, [r4, #0]
 8008faa:	07d2      	lsls	r2, r2, #31
 8008fac:	d501      	bpl.n	8008fb2 <_printf_float+0x1ba>
 8008fae:	3302      	adds	r3, #2
 8008fb0:	e7f4      	b.n	8008f9c <_printf_float+0x1a4>
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	e7f2      	b.n	8008f9c <_printf_float+0x1a4>
 8008fb6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008fba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fbc:	4299      	cmp	r1, r3
 8008fbe:	db05      	blt.n	8008fcc <_printf_float+0x1d4>
 8008fc0:	6823      	ldr	r3, [r4, #0]
 8008fc2:	6121      	str	r1, [r4, #16]
 8008fc4:	07d8      	lsls	r0, r3, #31
 8008fc6:	d5ea      	bpl.n	8008f9e <_printf_float+0x1a6>
 8008fc8:	1c4b      	adds	r3, r1, #1
 8008fca:	e7e7      	b.n	8008f9c <_printf_float+0x1a4>
 8008fcc:	2900      	cmp	r1, #0
 8008fce:	bfd4      	ite	le
 8008fd0:	f1c1 0202 	rsble	r2, r1, #2
 8008fd4:	2201      	movgt	r2, #1
 8008fd6:	4413      	add	r3, r2
 8008fd8:	e7e0      	b.n	8008f9c <_printf_float+0x1a4>
 8008fda:	6823      	ldr	r3, [r4, #0]
 8008fdc:	055a      	lsls	r2, r3, #21
 8008fde:	d407      	bmi.n	8008ff0 <_printf_float+0x1f8>
 8008fe0:	6923      	ldr	r3, [r4, #16]
 8008fe2:	4642      	mov	r2, r8
 8008fe4:	4631      	mov	r1, r6
 8008fe6:	4628      	mov	r0, r5
 8008fe8:	47b8      	blx	r7
 8008fea:	3001      	adds	r0, #1
 8008fec:	d12c      	bne.n	8009048 <_printf_float+0x250>
 8008fee:	e764      	b.n	8008eba <_printf_float+0xc2>
 8008ff0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008ff4:	f240 80e0 	bls.w	80091b8 <_printf_float+0x3c0>
 8008ff8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	2300      	movs	r3, #0
 8009000:	f7f7 fd6a 	bl	8000ad8 <__aeabi_dcmpeq>
 8009004:	2800      	cmp	r0, #0
 8009006:	d034      	beq.n	8009072 <_printf_float+0x27a>
 8009008:	4a37      	ldr	r2, [pc, #220]	; (80090e8 <_printf_float+0x2f0>)
 800900a:	2301      	movs	r3, #1
 800900c:	4631      	mov	r1, r6
 800900e:	4628      	mov	r0, r5
 8009010:	47b8      	blx	r7
 8009012:	3001      	adds	r0, #1
 8009014:	f43f af51 	beq.w	8008eba <_printf_float+0xc2>
 8009018:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800901c:	429a      	cmp	r2, r3
 800901e:	db02      	blt.n	8009026 <_printf_float+0x22e>
 8009020:	6823      	ldr	r3, [r4, #0]
 8009022:	07d8      	lsls	r0, r3, #31
 8009024:	d510      	bpl.n	8009048 <_printf_float+0x250>
 8009026:	ee18 3a10 	vmov	r3, s16
 800902a:	4652      	mov	r2, sl
 800902c:	4631      	mov	r1, r6
 800902e:	4628      	mov	r0, r5
 8009030:	47b8      	blx	r7
 8009032:	3001      	adds	r0, #1
 8009034:	f43f af41 	beq.w	8008eba <_printf_float+0xc2>
 8009038:	f04f 0800 	mov.w	r8, #0
 800903c:	f104 091a 	add.w	r9, r4, #26
 8009040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009042:	3b01      	subs	r3, #1
 8009044:	4543      	cmp	r3, r8
 8009046:	dc09      	bgt.n	800905c <_printf_float+0x264>
 8009048:	6823      	ldr	r3, [r4, #0]
 800904a:	079b      	lsls	r3, r3, #30
 800904c:	f100 8105 	bmi.w	800925a <_printf_float+0x462>
 8009050:	68e0      	ldr	r0, [r4, #12]
 8009052:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009054:	4298      	cmp	r0, r3
 8009056:	bfb8      	it	lt
 8009058:	4618      	movlt	r0, r3
 800905a:	e730      	b.n	8008ebe <_printf_float+0xc6>
 800905c:	2301      	movs	r3, #1
 800905e:	464a      	mov	r2, r9
 8009060:	4631      	mov	r1, r6
 8009062:	4628      	mov	r0, r5
 8009064:	47b8      	blx	r7
 8009066:	3001      	adds	r0, #1
 8009068:	f43f af27 	beq.w	8008eba <_printf_float+0xc2>
 800906c:	f108 0801 	add.w	r8, r8, #1
 8009070:	e7e6      	b.n	8009040 <_printf_float+0x248>
 8009072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009074:	2b00      	cmp	r3, #0
 8009076:	dc39      	bgt.n	80090ec <_printf_float+0x2f4>
 8009078:	4a1b      	ldr	r2, [pc, #108]	; (80090e8 <_printf_float+0x2f0>)
 800907a:	2301      	movs	r3, #1
 800907c:	4631      	mov	r1, r6
 800907e:	4628      	mov	r0, r5
 8009080:	47b8      	blx	r7
 8009082:	3001      	adds	r0, #1
 8009084:	f43f af19 	beq.w	8008eba <_printf_float+0xc2>
 8009088:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800908c:	4313      	orrs	r3, r2
 800908e:	d102      	bne.n	8009096 <_printf_float+0x29e>
 8009090:	6823      	ldr	r3, [r4, #0]
 8009092:	07d9      	lsls	r1, r3, #31
 8009094:	d5d8      	bpl.n	8009048 <_printf_float+0x250>
 8009096:	ee18 3a10 	vmov	r3, s16
 800909a:	4652      	mov	r2, sl
 800909c:	4631      	mov	r1, r6
 800909e:	4628      	mov	r0, r5
 80090a0:	47b8      	blx	r7
 80090a2:	3001      	adds	r0, #1
 80090a4:	f43f af09 	beq.w	8008eba <_printf_float+0xc2>
 80090a8:	f04f 0900 	mov.w	r9, #0
 80090ac:	f104 0a1a 	add.w	sl, r4, #26
 80090b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090b2:	425b      	negs	r3, r3
 80090b4:	454b      	cmp	r3, r9
 80090b6:	dc01      	bgt.n	80090bc <_printf_float+0x2c4>
 80090b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090ba:	e792      	b.n	8008fe2 <_printf_float+0x1ea>
 80090bc:	2301      	movs	r3, #1
 80090be:	4652      	mov	r2, sl
 80090c0:	4631      	mov	r1, r6
 80090c2:	4628      	mov	r0, r5
 80090c4:	47b8      	blx	r7
 80090c6:	3001      	adds	r0, #1
 80090c8:	f43f aef7 	beq.w	8008eba <_printf_float+0xc2>
 80090cc:	f109 0901 	add.w	r9, r9, #1
 80090d0:	e7ee      	b.n	80090b0 <_printf_float+0x2b8>
 80090d2:	bf00      	nop
 80090d4:	7fefffff 	.word	0x7fefffff
 80090d8:	0800d4b0 	.word	0x0800d4b0
 80090dc:	0800d4b4 	.word	0x0800d4b4
 80090e0:	0800d4bc 	.word	0x0800d4bc
 80090e4:	0800d4b8 	.word	0x0800d4b8
 80090e8:	0800d4c0 	.word	0x0800d4c0
 80090ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80090f0:	429a      	cmp	r2, r3
 80090f2:	bfa8      	it	ge
 80090f4:	461a      	movge	r2, r3
 80090f6:	2a00      	cmp	r2, #0
 80090f8:	4691      	mov	r9, r2
 80090fa:	dc37      	bgt.n	800916c <_printf_float+0x374>
 80090fc:	f04f 0b00 	mov.w	fp, #0
 8009100:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009104:	f104 021a 	add.w	r2, r4, #26
 8009108:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800910a:	9305      	str	r3, [sp, #20]
 800910c:	eba3 0309 	sub.w	r3, r3, r9
 8009110:	455b      	cmp	r3, fp
 8009112:	dc33      	bgt.n	800917c <_printf_float+0x384>
 8009114:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009118:	429a      	cmp	r2, r3
 800911a:	db3b      	blt.n	8009194 <_printf_float+0x39c>
 800911c:	6823      	ldr	r3, [r4, #0]
 800911e:	07da      	lsls	r2, r3, #31
 8009120:	d438      	bmi.n	8009194 <_printf_float+0x39c>
 8009122:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009124:	9a05      	ldr	r2, [sp, #20]
 8009126:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009128:	1a9a      	subs	r2, r3, r2
 800912a:	eba3 0901 	sub.w	r9, r3, r1
 800912e:	4591      	cmp	r9, r2
 8009130:	bfa8      	it	ge
 8009132:	4691      	movge	r9, r2
 8009134:	f1b9 0f00 	cmp.w	r9, #0
 8009138:	dc35      	bgt.n	80091a6 <_printf_float+0x3ae>
 800913a:	f04f 0800 	mov.w	r8, #0
 800913e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009142:	f104 0a1a 	add.w	sl, r4, #26
 8009146:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800914a:	1a9b      	subs	r3, r3, r2
 800914c:	eba3 0309 	sub.w	r3, r3, r9
 8009150:	4543      	cmp	r3, r8
 8009152:	f77f af79 	ble.w	8009048 <_printf_float+0x250>
 8009156:	2301      	movs	r3, #1
 8009158:	4652      	mov	r2, sl
 800915a:	4631      	mov	r1, r6
 800915c:	4628      	mov	r0, r5
 800915e:	47b8      	blx	r7
 8009160:	3001      	adds	r0, #1
 8009162:	f43f aeaa 	beq.w	8008eba <_printf_float+0xc2>
 8009166:	f108 0801 	add.w	r8, r8, #1
 800916a:	e7ec      	b.n	8009146 <_printf_float+0x34e>
 800916c:	4613      	mov	r3, r2
 800916e:	4631      	mov	r1, r6
 8009170:	4642      	mov	r2, r8
 8009172:	4628      	mov	r0, r5
 8009174:	47b8      	blx	r7
 8009176:	3001      	adds	r0, #1
 8009178:	d1c0      	bne.n	80090fc <_printf_float+0x304>
 800917a:	e69e      	b.n	8008eba <_printf_float+0xc2>
 800917c:	2301      	movs	r3, #1
 800917e:	4631      	mov	r1, r6
 8009180:	4628      	mov	r0, r5
 8009182:	9205      	str	r2, [sp, #20]
 8009184:	47b8      	blx	r7
 8009186:	3001      	adds	r0, #1
 8009188:	f43f ae97 	beq.w	8008eba <_printf_float+0xc2>
 800918c:	9a05      	ldr	r2, [sp, #20]
 800918e:	f10b 0b01 	add.w	fp, fp, #1
 8009192:	e7b9      	b.n	8009108 <_printf_float+0x310>
 8009194:	ee18 3a10 	vmov	r3, s16
 8009198:	4652      	mov	r2, sl
 800919a:	4631      	mov	r1, r6
 800919c:	4628      	mov	r0, r5
 800919e:	47b8      	blx	r7
 80091a0:	3001      	adds	r0, #1
 80091a2:	d1be      	bne.n	8009122 <_printf_float+0x32a>
 80091a4:	e689      	b.n	8008eba <_printf_float+0xc2>
 80091a6:	9a05      	ldr	r2, [sp, #20]
 80091a8:	464b      	mov	r3, r9
 80091aa:	4442      	add	r2, r8
 80091ac:	4631      	mov	r1, r6
 80091ae:	4628      	mov	r0, r5
 80091b0:	47b8      	blx	r7
 80091b2:	3001      	adds	r0, #1
 80091b4:	d1c1      	bne.n	800913a <_printf_float+0x342>
 80091b6:	e680      	b.n	8008eba <_printf_float+0xc2>
 80091b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091ba:	2a01      	cmp	r2, #1
 80091bc:	dc01      	bgt.n	80091c2 <_printf_float+0x3ca>
 80091be:	07db      	lsls	r3, r3, #31
 80091c0:	d538      	bpl.n	8009234 <_printf_float+0x43c>
 80091c2:	2301      	movs	r3, #1
 80091c4:	4642      	mov	r2, r8
 80091c6:	4631      	mov	r1, r6
 80091c8:	4628      	mov	r0, r5
 80091ca:	47b8      	blx	r7
 80091cc:	3001      	adds	r0, #1
 80091ce:	f43f ae74 	beq.w	8008eba <_printf_float+0xc2>
 80091d2:	ee18 3a10 	vmov	r3, s16
 80091d6:	4652      	mov	r2, sl
 80091d8:	4631      	mov	r1, r6
 80091da:	4628      	mov	r0, r5
 80091dc:	47b8      	blx	r7
 80091de:	3001      	adds	r0, #1
 80091e0:	f43f ae6b 	beq.w	8008eba <_printf_float+0xc2>
 80091e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80091e8:	2200      	movs	r2, #0
 80091ea:	2300      	movs	r3, #0
 80091ec:	f7f7 fc74 	bl	8000ad8 <__aeabi_dcmpeq>
 80091f0:	b9d8      	cbnz	r0, 800922a <_printf_float+0x432>
 80091f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091f4:	f108 0201 	add.w	r2, r8, #1
 80091f8:	3b01      	subs	r3, #1
 80091fa:	4631      	mov	r1, r6
 80091fc:	4628      	mov	r0, r5
 80091fe:	47b8      	blx	r7
 8009200:	3001      	adds	r0, #1
 8009202:	d10e      	bne.n	8009222 <_printf_float+0x42a>
 8009204:	e659      	b.n	8008eba <_printf_float+0xc2>
 8009206:	2301      	movs	r3, #1
 8009208:	4652      	mov	r2, sl
 800920a:	4631      	mov	r1, r6
 800920c:	4628      	mov	r0, r5
 800920e:	47b8      	blx	r7
 8009210:	3001      	adds	r0, #1
 8009212:	f43f ae52 	beq.w	8008eba <_printf_float+0xc2>
 8009216:	f108 0801 	add.w	r8, r8, #1
 800921a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800921c:	3b01      	subs	r3, #1
 800921e:	4543      	cmp	r3, r8
 8009220:	dcf1      	bgt.n	8009206 <_printf_float+0x40e>
 8009222:	464b      	mov	r3, r9
 8009224:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009228:	e6dc      	b.n	8008fe4 <_printf_float+0x1ec>
 800922a:	f04f 0800 	mov.w	r8, #0
 800922e:	f104 0a1a 	add.w	sl, r4, #26
 8009232:	e7f2      	b.n	800921a <_printf_float+0x422>
 8009234:	2301      	movs	r3, #1
 8009236:	4642      	mov	r2, r8
 8009238:	e7df      	b.n	80091fa <_printf_float+0x402>
 800923a:	2301      	movs	r3, #1
 800923c:	464a      	mov	r2, r9
 800923e:	4631      	mov	r1, r6
 8009240:	4628      	mov	r0, r5
 8009242:	47b8      	blx	r7
 8009244:	3001      	adds	r0, #1
 8009246:	f43f ae38 	beq.w	8008eba <_printf_float+0xc2>
 800924a:	f108 0801 	add.w	r8, r8, #1
 800924e:	68e3      	ldr	r3, [r4, #12]
 8009250:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009252:	1a5b      	subs	r3, r3, r1
 8009254:	4543      	cmp	r3, r8
 8009256:	dcf0      	bgt.n	800923a <_printf_float+0x442>
 8009258:	e6fa      	b.n	8009050 <_printf_float+0x258>
 800925a:	f04f 0800 	mov.w	r8, #0
 800925e:	f104 0919 	add.w	r9, r4, #25
 8009262:	e7f4      	b.n	800924e <_printf_float+0x456>

08009264 <_printf_common>:
 8009264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009268:	4616      	mov	r6, r2
 800926a:	4699      	mov	r9, r3
 800926c:	688a      	ldr	r2, [r1, #8]
 800926e:	690b      	ldr	r3, [r1, #16]
 8009270:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009274:	4293      	cmp	r3, r2
 8009276:	bfb8      	it	lt
 8009278:	4613      	movlt	r3, r2
 800927a:	6033      	str	r3, [r6, #0]
 800927c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009280:	4607      	mov	r7, r0
 8009282:	460c      	mov	r4, r1
 8009284:	b10a      	cbz	r2, 800928a <_printf_common+0x26>
 8009286:	3301      	adds	r3, #1
 8009288:	6033      	str	r3, [r6, #0]
 800928a:	6823      	ldr	r3, [r4, #0]
 800928c:	0699      	lsls	r1, r3, #26
 800928e:	bf42      	ittt	mi
 8009290:	6833      	ldrmi	r3, [r6, #0]
 8009292:	3302      	addmi	r3, #2
 8009294:	6033      	strmi	r3, [r6, #0]
 8009296:	6825      	ldr	r5, [r4, #0]
 8009298:	f015 0506 	ands.w	r5, r5, #6
 800929c:	d106      	bne.n	80092ac <_printf_common+0x48>
 800929e:	f104 0a19 	add.w	sl, r4, #25
 80092a2:	68e3      	ldr	r3, [r4, #12]
 80092a4:	6832      	ldr	r2, [r6, #0]
 80092a6:	1a9b      	subs	r3, r3, r2
 80092a8:	42ab      	cmp	r3, r5
 80092aa:	dc26      	bgt.n	80092fa <_printf_common+0x96>
 80092ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80092b0:	1e13      	subs	r3, r2, #0
 80092b2:	6822      	ldr	r2, [r4, #0]
 80092b4:	bf18      	it	ne
 80092b6:	2301      	movne	r3, #1
 80092b8:	0692      	lsls	r2, r2, #26
 80092ba:	d42b      	bmi.n	8009314 <_printf_common+0xb0>
 80092bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80092c0:	4649      	mov	r1, r9
 80092c2:	4638      	mov	r0, r7
 80092c4:	47c0      	blx	r8
 80092c6:	3001      	adds	r0, #1
 80092c8:	d01e      	beq.n	8009308 <_printf_common+0xa4>
 80092ca:	6823      	ldr	r3, [r4, #0]
 80092cc:	68e5      	ldr	r5, [r4, #12]
 80092ce:	6832      	ldr	r2, [r6, #0]
 80092d0:	f003 0306 	and.w	r3, r3, #6
 80092d4:	2b04      	cmp	r3, #4
 80092d6:	bf08      	it	eq
 80092d8:	1aad      	subeq	r5, r5, r2
 80092da:	68a3      	ldr	r3, [r4, #8]
 80092dc:	6922      	ldr	r2, [r4, #16]
 80092de:	bf0c      	ite	eq
 80092e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80092e4:	2500      	movne	r5, #0
 80092e6:	4293      	cmp	r3, r2
 80092e8:	bfc4      	itt	gt
 80092ea:	1a9b      	subgt	r3, r3, r2
 80092ec:	18ed      	addgt	r5, r5, r3
 80092ee:	2600      	movs	r6, #0
 80092f0:	341a      	adds	r4, #26
 80092f2:	42b5      	cmp	r5, r6
 80092f4:	d11a      	bne.n	800932c <_printf_common+0xc8>
 80092f6:	2000      	movs	r0, #0
 80092f8:	e008      	b.n	800930c <_printf_common+0xa8>
 80092fa:	2301      	movs	r3, #1
 80092fc:	4652      	mov	r2, sl
 80092fe:	4649      	mov	r1, r9
 8009300:	4638      	mov	r0, r7
 8009302:	47c0      	blx	r8
 8009304:	3001      	adds	r0, #1
 8009306:	d103      	bne.n	8009310 <_printf_common+0xac>
 8009308:	f04f 30ff 	mov.w	r0, #4294967295
 800930c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009310:	3501      	adds	r5, #1
 8009312:	e7c6      	b.n	80092a2 <_printf_common+0x3e>
 8009314:	18e1      	adds	r1, r4, r3
 8009316:	1c5a      	adds	r2, r3, #1
 8009318:	2030      	movs	r0, #48	; 0x30
 800931a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800931e:	4422      	add	r2, r4
 8009320:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009324:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009328:	3302      	adds	r3, #2
 800932a:	e7c7      	b.n	80092bc <_printf_common+0x58>
 800932c:	2301      	movs	r3, #1
 800932e:	4622      	mov	r2, r4
 8009330:	4649      	mov	r1, r9
 8009332:	4638      	mov	r0, r7
 8009334:	47c0      	blx	r8
 8009336:	3001      	adds	r0, #1
 8009338:	d0e6      	beq.n	8009308 <_printf_common+0xa4>
 800933a:	3601      	adds	r6, #1
 800933c:	e7d9      	b.n	80092f2 <_printf_common+0x8e>
	...

08009340 <_printf_i>:
 8009340:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009344:	7e0f      	ldrb	r7, [r1, #24]
 8009346:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009348:	2f78      	cmp	r7, #120	; 0x78
 800934a:	4691      	mov	r9, r2
 800934c:	4680      	mov	r8, r0
 800934e:	460c      	mov	r4, r1
 8009350:	469a      	mov	sl, r3
 8009352:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009356:	d807      	bhi.n	8009368 <_printf_i+0x28>
 8009358:	2f62      	cmp	r7, #98	; 0x62
 800935a:	d80a      	bhi.n	8009372 <_printf_i+0x32>
 800935c:	2f00      	cmp	r7, #0
 800935e:	f000 80d8 	beq.w	8009512 <_printf_i+0x1d2>
 8009362:	2f58      	cmp	r7, #88	; 0x58
 8009364:	f000 80a3 	beq.w	80094ae <_printf_i+0x16e>
 8009368:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800936c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009370:	e03a      	b.n	80093e8 <_printf_i+0xa8>
 8009372:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009376:	2b15      	cmp	r3, #21
 8009378:	d8f6      	bhi.n	8009368 <_printf_i+0x28>
 800937a:	a101      	add	r1, pc, #4	; (adr r1, 8009380 <_printf_i+0x40>)
 800937c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009380:	080093d9 	.word	0x080093d9
 8009384:	080093ed 	.word	0x080093ed
 8009388:	08009369 	.word	0x08009369
 800938c:	08009369 	.word	0x08009369
 8009390:	08009369 	.word	0x08009369
 8009394:	08009369 	.word	0x08009369
 8009398:	080093ed 	.word	0x080093ed
 800939c:	08009369 	.word	0x08009369
 80093a0:	08009369 	.word	0x08009369
 80093a4:	08009369 	.word	0x08009369
 80093a8:	08009369 	.word	0x08009369
 80093ac:	080094f9 	.word	0x080094f9
 80093b0:	0800941d 	.word	0x0800941d
 80093b4:	080094db 	.word	0x080094db
 80093b8:	08009369 	.word	0x08009369
 80093bc:	08009369 	.word	0x08009369
 80093c0:	0800951b 	.word	0x0800951b
 80093c4:	08009369 	.word	0x08009369
 80093c8:	0800941d 	.word	0x0800941d
 80093cc:	08009369 	.word	0x08009369
 80093d0:	08009369 	.word	0x08009369
 80093d4:	080094e3 	.word	0x080094e3
 80093d8:	682b      	ldr	r3, [r5, #0]
 80093da:	1d1a      	adds	r2, r3, #4
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	602a      	str	r2, [r5, #0]
 80093e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80093e8:	2301      	movs	r3, #1
 80093ea:	e0a3      	b.n	8009534 <_printf_i+0x1f4>
 80093ec:	6820      	ldr	r0, [r4, #0]
 80093ee:	6829      	ldr	r1, [r5, #0]
 80093f0:	0606      	lsls	r6, r0, #24
 80093f2:	f101 0304 	add.w	r3, r1, #4
 80093f6:	d50a      	bpl.n	800940e <_printf_i+0xce>
 80093f8:	680e      	ldr	r6, [r1, #0]
 80093fa:	602b      	str	r3, [r5, #0]
 80093fc:	2e00      	cmp	r6, #0
 80093fe:	da03      	bge.n	8009408 <_printf_i+0xc8>
 8009400:	232d      	movs	r3, #45	; 0x2d
 8009402:	4276      	negs	r6, r6
 8009404:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009408:	485e      	ldr	r0, [pc, #376]	; (8009584 <_printf_i+0x244>)
 800940a:	230a      	movs	r3, #10
 800940c:	e019      	b.n	8009442 <_printf_i+0x102>
 800940e:	680e      	ldr	r6, [r1, #0]
 8009410:	602b      	str	r3, [r5, #0]
 8009412:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009416:	bf18      	it	ne
 8009418:	b236      	sxthne	r6, r6
 800941a:	e7ef      	b.n	80093fc <_printf_i+0xbc>
 800941c:	682b      	ldr	r3, [r5, #0]
 800941e:	6820      	ldr	r0, [r4, #0]
 8009420:	1d19      	adds	r1, r3, #4
 8009422:	6029      	str	r1, [r5, #0]
 8009424:	0601      	lsls	r1, r0, #24
 8009426:	d501      	bpl.n	800942c <_printf_i+0xec>
 8009428:	681e      	ldr	r6, [r3, #0]
 800942a:	e002      	b.n	8009432 <_printf_i+0xf2>
 800942c:	0646      	lsls	r6, r0, #25
 800942e:	d5fb      	bpl.n	8009428 <_printf_i+0xe8>
 8009430:	881e      	ldrh	r6, [r3, #0]
 8009432:	4854      	ldr	r0, [pc, #336]	; (8009584 <_printf_i+0x244>)
 8009434:	2f6f      	cmp	r7, #111	; 0x6f
 8009436:	bf0c      	ite	eq
 8009438:	2308      	moveq	r3, #8
 800943a:	230a      	movne	r3, #10
 800943c:	2100      	movs	r1, #0
 800943e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009442:	6865      	ldr	r5, [r4, #4]
 8009444:	60a5      	str	r5, [r4, #8]
 8009446:	2d00      	cmp	r5, #0
 8009448:	bfa2      	ittt	ge
 800944a:	6821      	ldrge	r1, [r4, #0]
 800944c:	f021 0104 	bicge.w	r1, r1, #4
 8009450:	6021      	strge	r1, [r4, #0]
 8009452:	b90e      	cbnz	r6, 8009458 <_printf_i+0x118>
 8009454:	2d00      	cmp	r5, #0
 8009456:	d04d      	beq.n	80094f4 <_printf_i+0x1b4>
 8009458:	4615      	mov	r5, r2
 800945a:	fbb6 f1f3 	udiv	r1, r6, r3
 800945e:	fb03 6711 	mls	r7, r3, r1, r6
 8009462:	5dc7      	ldrb	r7, [r0, r7]
 8009464:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009468:	4637      	mov	r7, r6
 800946a:	42bb      	cmp	r3, r7
 800946c:	460e      	mov	r6, r1
 800946e:	d9f4      	bls.n	800945a <_printf_i+0x11a>
 8009470:	2b08      	cmp	r3, #8
 8009472:	d10b      	bne.n	800948c <_printf_i+0x14c>
 8009474:	6823      	ldr	r3, [r4, #0]
 8009476:	07de      	lsls	r6, r3, #31
 8009478:	d508      	bpl.n	800948c <_printf_i+0x14c>
 800947a:	6923      	ldr	r3, [r4, #16]
 800947c:	6861      	ldr	r1, [r4, #4]
 800947e:	4299      	cmp	r1, r3
 8009480:	bfde      	ittt	le
 8009482:	2330      	movle	r3, #48	; 0x30
 8009484:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009488:	f105 35ff 	addle.w	r5, r5, #4294967295
 800948c:	1b52      	subs	r2, r2, r5
 800948e:	6122      	str	r2, [r4, #16]
 8009490:	f8cd a000 	str.w	sl, [sp]
 8009494:	464b      	mov	r3, r9
 8009496:	aa03      	add	r2, sp, #12
 8009498:	4621      	mov	r1, r4
 800949a:	4640      	mov	r0, r8
 800949c:	f7ff fee2 	bl	8009264 <_printf_common>
 80094a0:	3001      	adds	r0, #1
 80094a2:	d14c      	bne.n	800953e <_printf_i+0x1fe>
 80094a4:	f04f 30ff 	mov.w	r0, #4294967295
 80094a8:	b004      	add	sp, #16
 80094aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094ae:	4835      	ldr	r0, [pc, #212]	; (8009584 <_printf_i+0x244>)
 80094b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80094b4:	6829      	ldr	r1, [r5, #0]
 80094b6:	6823      	ldr	r3, [r4, #0]
 80094b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80094bc:	6029      	str	r1, [r5, #0]
 80094be:	061d      	lsls	r5, r3, #24
 80094c0:	d514      	bpl.n	80094ec <_printf_i+0x1ac>
 80094c2:	07df      	lsls	r7, r3, #31
 80094c4:	bf44      	itt	mi
 80094c6:	f043 0320 	orrmi.w	r3, r3, #32
 80094ca:	6023      	strmi	r3, [r4, #0]
 80094cc:	b91e      	cbnz	r6, 80094d6 <_printf_i+0x196>
 80094ce:	6823      	ldr	r3, [r4, #0]
 80094d0:	f023 0320 	bic.w	r3, r3, #32
 80094d4:	6023      	str	r3, [r4, #0]
 80094d6:	2310      	movs	r3, #16
 80094d8:	e7b0      	b.n	800943c <_printf_i+0xfc>
 80094da:	6823      	ldr	r3, [r4, #0]
 80094dc:	f043 0320 	orr.w	r3, r3, #32
 80094e0:	6023      	str	r3, [r4, #0]
 80094e2:	2378      	movs	r3, #120	; 0x78
 80094e4:	4828      	ldr	r0, [pc, #160]	; (8009588 <_printf_i+0x248>)
 80094e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80094ea:	e7e3      	b.n	80094b4 <_printf_i+0x174>
 80094ec:	0659      	lsls	r1, r3, #25
 80094ee:	bf48      	it	mi
 80094f0:	b2b6      	uxthmi	r6, r6
 80094f2:	e7e6      	b.n	80094c2 <_printf_i+0x182>
 80094f4:	4615      	mov	r5, r2
 80094f6:	e7bb      	b.n	8009470 <_printf_i+0x130>
 80094f8:	682b      	ldr	r3, [r5, #0]
 80094fa:	6826      	ldr	r6, [r4, #0]
 80094fc:	6961      	ldr	r1, [r4, #20]
 80094fe:	1d18      	adds	r0, r3, #4
 8009500:	6028      	str	r0, [r5, #0]
 8009502:	0635      	lsls	r5, r6, #24
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	d501      	bpl.n	800950c <_printf_i+0x1cc>
 8009508:	6019      	str	r1, [r3, #0]
 800950a:	e002      	b.n	8009512 <_printf_i+0x1d2>
 800950c:	0670      	lsls	r0, r6, #25
 800950e:	d5fb      	bpl.n	8009508 <_printf_i+0x1c8>
 8009510:	8019      	strh	r1, [r3, #0]
 8009512:	2300      	movs	r3, #0
 8009514:	6123      	str	r3, [r4, #16]
 8009516:	4615      	mov	r5, r2
 8009518:	e7ba      	b.n	8009490 <_printf_i+0x150>
 800951a:	682b      	ldr	r3, [r5, #0]
 800951c:	1d1a      	adds	r2, r3, #4
 800951e:	602a      	str	r2, [r5, #0]
 8009520:	681d      	ldr	r5, [r3, #0]
 8009522:	6862      	ldr	r2, [r4, #4]
 8009524:	2100      	movs	r1, #0
 8009526:	4628      	mov	r0, r5
 8009528:	f7f6 fe62 	bl	80001f0 <memchr>
 800952c:	b108      	cbz	r0, 8009532 <_printf_i+0x1f2>
 800952e:	1b40      	subs	r0, r0, r5
 8009530:	6060      	str	r0, [r4, #4]
 8009532:	6863      	ldr	r3, [r4, #4]
 8009534:	6123      	str	r3, [r4, #16]
 8009536:	2300      	movs	r3, #0
 8009538:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800953c:	e7a8      	b.n	8009490 <_printf_i+0x150>
 800953e:	6923      	ldr	r3, [r4, #16]
 8009540:	462a      	mov	r2, r5
 8009542:	4649      	mov	r1, r9
 8009544:	4640      	mov	r0, r8
 8009546:	47d0      	blx	sl
 8009548:	3001      	adds	r0, #1
 800954a:	d0ab      	beq.n	80094a4 <_printf_i+0x164>
 800954c:	6823      	ldr	r3, [r4, #0]
 800954e:	079b      	lsls	r3, r3, #30
 8009550:	d413      	bmi.n	800957a <_printf_i+0x23a>
 8009552:	68e0      	ldr	r0, [r4, #12]
 8009554:	9b03      	ldr	r3, [sp, #12]
 8009556:	4298      	cmp	r0, r3
 8009558:	bfb8      	it	lt
 800955a:	4618      	movlt	r0, r3
 800955c:	e7a4      	b.n	80094a8 <_printf_i+0x168>
 800955e:	2301      	movs	r3, #1
 8009560:	4632      	mov	r2, r6
 8009562:	4649      	mov	r1, r9
 8009564:	4640      	mov	r0, r8
 8009566:	47d0      	blx	sl
 8009568:	3001      	adds	r0, #1
 800956a:	d09b      	beq.n	80094a4 <_printf_i+0x164>
 800956c:	3501      	adds	r5, #1
 800956e:	68e3      	ldr	r3, [r4, #12]
 8009570:	9903      	ldr	r1, [sp, #12]
 8009572:	1a5b      	subs	r3, r3, r1
 8009574:	42ab      	cmp	r3, r5
 8009576:	dcf2      	bgt.n	800955e <_printf_i+0x21e>
 8009578:	e7eb      	b.n	8009552 <_printf_i+0x212>
 800957a:	2500      	movs	r5, #0
 800957c:	f104 0619 	add.w	r6, r4, #25
 8009580:	e7f5      	b.n	800956e <_printf_i+0x22e>
 8009582:	bf00      	nop
 8009584:	0800d4c2 	.word	0x0800d4c2
 8009588:	0800d4d3 	.word	0x0800d4d3

0800958c <_scanf_float>:
 800958c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009590:	b087      	sub	sp, #28
 8009592:	4617      	mov	r7, r2
 8009594:	9303      	str	r3, [sp, #12]
 8009596:	688b      	ldr	r3, [r1, #8]
 8009598:	1e5a      	subs	r2, r3, #1
 800959a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800959e:	bf83      	ittte	hi
 80095a0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80095a4:	195b      	addhi	r3, r3, r5
 80095a6:	9302      	strhi	r3, [sp, #8]
 80095a8:	2300      	movls	r3, #0
 80095aa:	bf86      	itte	hi
 80095ac:	f240 135d 	movwhi	r3, #349	; 0x15d
 80095b0:	608b      	strhi	r3, [r1, #8]
 80095b2:	9302      	strls	r3, [sp, #8]
 80095b4:	680b      	ldr	r3, [r1, #0]
 80095b6:	468b      	mov	fp, r1
 80095b8:	2500      	movs	r5, #0
 80095ba:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80095be:	f84b 3b1c 	str.w	r3, [fp], #28
 80095c2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80095c6:	4680      	mov	r8, r0
 80095c8:	460c      	mov	r4, r1
 80095ca:	465e      	mov	r6, fp
 80095cc:	46aa      	mov	sl, r5
 80095ce:	46a9      	mov	r9, r5
 80095d0:	9501      	str	r5, [sp, #4]
 80095d2:	68a2      	ldr	r2, [r4, #8]
 80095d4:	b152      	cbz	r2, 80095ec <_scanf_float+0x60>
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	2b4e      	cmp	r3, #78	; 0x4e
 80095dc:	d864      	bhi.n	80096a8 <_scanf_float+0x11c>
 80095de:	2b40      	cmp	r3, #64	; 0x40
 80095e0:	d83c      	bhi.n	800965c <_scanf_float+0xd0>
 80095e2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80095e6:	b2c8      	uxtb	r0, r1
 80095e8:	280e      	cmp	r0, #14
 80095ea:	d93a      	bls.n	8009662 <_scanf_float+0xd6>
 80095ec:	f1b9 0f00 	cmp.w	r9, #0
 80095f0:	d003      	beq.n	80095fa <_scanf_float+0x6e>
 80095f2:	6823      	ldr	r3, [r4, #0]
 80095f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095f8:	6023      	str	r3, [r4, #0]
 80095fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80095fe:	f1ba 0f01 	cmp.w	sl, #1
 8009602:	f200 8113 	bhi.w	800982c <_scanf_float+0x2a0>
 8009606:	455e      	cmp	r6, fp
 8009608:	f200 8105 	bhi.w	8009816 <_scanf_float+0x28a>
 800960c:	2501      	movs	r5, #1
 800960e:	4628      	mov	r0, r5
 8009610:	b007      	add	sp, #28
 8009612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009616:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800961a:	2a0d      	cmp	r2, #13
 800961c:	d8e6      	bhi.n	80095ec <_scanf_float+0x60>
 800961e:	a101      	add	r1, pc, #4	; (adr r1, 8009624 <_scanf_float+0x98>)
 8009620:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009624:	08009763 	.word	0x08009763
 8009628:	080095ed 	.word	0x080095ed
 800962c:	080095ed 	.word	0x080095ed
 8009630:	080095ed 	.word	0x080095ed
 8009634:	080097c3 	.word	0x080097c3
 8009638:	0800979b 	.word	0x0800979b
 800963c:	080095ed 	.word	0x080095ed
 8009640:	080095ed 	.word	0x080095ed
 8009644:	08009771 	.word	0x08009771
 8009648:	080095ed 	.word	0x080095ed
 800964c:	080095ed 	.word	0x080095ed
 8009650:	080095ed 	.word	0x080095ed
 8009654:	080095ed 	.word	0x080095ed
 8009658:	08009729 	.word	0x08009729
 800965c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009660:	e7db      	b.n	800961a <_scanf_float+0x8e>
 8009662:	290e      	cmp	r1, #14
 8009664:	d8c2      	bhi.n	80095ec <_scanf_float+0x60>
 8009666:	a001      	add	r0, pc, #4	; (adr r0, 800966c <_scanf_float+0xe0>)
 8009668:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800966c:	0800971b 	.word	0x0800971b
 8009670:	080095ed 	.word	0x080095ed
 8009674:	0800971b 	.word	0x0800971b
 8009678:	080097af 	.word	0x080097af
 800967c:	080095ed 	.word	0x080095ed
 8009680:	080096c9 	.word	0x080096c9
 8009684:	08009705 	.word	0x08009705
 8009688:	08009705 	.word	0x08009705
 800968c:	08009705 	.word	0x08009705
 8009690:	08009705 	.word	0x08009705
 8009694:	08009705 	.word	0x08009705
 8009698:	08009705 	.word	0x08009705
 800969c:	08009705 	.word	0x08009705
 80096a0:	08009705 	.word	0x08009705
 80096a4:	08009705 	.word	0x08009705
 80096a8:	2b6e      	cmp	r3, #110	; 0x6e
 80096aa:	d809      	bhi.n	80096c0 <_scanf_float+0x134>
 80096ac:	2b60      	cmp	r3, #96	; 0x60
 80096ae:	d8b2      	bhi.n	8009616 <_scanf_float+0x8a>
 80096b0:	2b54      	cmp	r3, #84	; 0x54
 80096b2:	d077      	beq.n	80097a4 <_scanf_float+0x218>
 80096b4:	2b59      	cmp	r3, #89	; 0x59
 80096b6:	d199      	bne.n	80095ec <_scanf_float+0x60>
 80096b8:	2d07      	cmp	r5, #7
 80096ba:	d197      	bne.n	80095ec <_scanf_float+0x60>
 80096bc:	2508      	movs	r5, #8
 80096be:	e029      	b.n	8009714 <_scanf_float+0x188>
 80096c0:	2b74      	cmp	r3, #116	; 0x74
 80096c2:	d06f      	beq.n	80097a4 <_scanf_float+0x218>
 80096c4:	2b79      	cmp	r3, #121	; 0x79
 80096c6:	e7f6      	b.n	80096b6 <_scanf_float+0x12a>
 80096c8:	6821      	ldr	r1, [r4, #0]
 80096ca:	05c8      	lsls	r0, r1, #23
 80096cc:	d51a      	bpl.n	8009704 <_scanf_float+0x178>
 80096ce:	9b02      	ldr	r3, [sp, #8]
 80096d0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80096d4:	6021      	str	r1, [r4, #0]
 80096d6:	f109 0901 	add.w	r9, r9, #1
 80096da:	b11b      	cbz	r3, 80096e4 <_scanf_float+0x158>
 80096dc:	3b01      	subs	r3, #1
 80096de:	3201      	adds	r2, #1
 80096e0:	9302      	str	r3, [sp, #8]
 80096e2:	60a2      	str	r2, [r4, #8]
 80096e4:	68a3      	ldr	r3, [r4, #8]
 80096e6:	3b01      	subs	r3, #1
 80096e8:	60a3      	str	r3, [r4, #8]
 80096ea:	6923      	ldr	r3, [r4, #16]
 80096ec:	3301      	adds	r3, #1
 80096ee:	6123      	str	r3, [r4, #16]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	3b01      	subs	r3, #1
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	607b      	str	r3, [r7, #4]
 80096f8:	f340 8084 	ble.w	8009804 <_scanf_float+0x278>
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	3301      	adds	r3, #1
 8009700:	603b      	str	r3, [r7, #0]
 8009702:	e766      	b.n	80095d2 <_scanf_float+0x46>
 8009704:	eb1a 0f05 	cmn.w	sl, r5
 8009708:	f47f af70 	bne.w	80095ec <_scanf_float+0x60>
 800970c:	6822      	ldr	r2, [r4, #0]
 800970e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009712:	6022      	str	r2, [r4, #0]
 8009714:	f806 3b01 	strb.w	r3, [r6], #1
 8009718:	e7e4      	b.n	80096e4 <_scanf_float+0x158>
 800971a:	6822      	ldr	r2, [r4, #0]
 800971c:	0610      	lsls	r0, r2, #24
 800971e:	f57f af65 	bpl.w	80095ec <_scanf_float+0x60>
 8009722:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009726:	e7f4      	b.n	8009712 <_scanf_float+0x186>
 8009728:	f1ba 0f00 	cmp.w	sl, #0
 800972c:	d10e      	bne.n	800974c <_scanf_float+0x1c0>
 800972e:	f1b9 0f00 	cmp.w	r9, #0
 8009732:	d10e      	bne.n	8009752 <_scanf_float+0x1c6>
 8009734:	6822      	ldr	r2, [r4, #0]
 8009736:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800973a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800973e:	d108      	bne.n	8009752 <_scanf_float+0x1c6>
 8009740:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009744:	6022      	str	r2, [r4, #0]
 8009746:	f04f 0a01 	mov.w	sl, #1
 800974a:	e7e3      	b.n	8009714 <_scanf_float+0x188>
 800974c:	f1ba 0f02 	cmp.w	sl, #2
 8009750:	d055      	beq.n	80097fe <_scanf_float+0x272>
 8009752:	2d01      	cmp	r5, #1
 8009754:	d002      	beq.n	800975c <_scanf_float+0x1d0>
 8009756:	2d04      	cmp	r5, #4
 8009758:	f47f af48 	bne.w	80095ec <_scanf_float+0x60>
 800975c:	3501      	adds	r5, #1
 800975e:	b2ed      	uxtb	r5, r5
 8009760:	e7d8      	b.n	8009714 <_scanf_float+0x188>
 8009762:	f1ba 0f01 	cmp.w	sl, #1
 8009766:	f47f af41 	bne.w	80095ec <_scanf_float+0x60>
 800976a:	f04f 0a02 	mov.w	sl, #2
 800976e:	e7d1      	b.n	8009714 <_scanf_float+0x188>
 8009770:	b97d      	cbnz	r5, 8009792 <_scanf_float+0x206>
 8009772:	f1b9 0f00 	cmp.w	r9, #0
 8009776:	f47f af3c 	bne.w	80095f2 <_scanf_float+0x66>
 800977a:	6822      	ldr	r2, [r4, #0]
 800977c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009780:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009784:	f47f af39 	bne.w	80095fa <_scanf_float+0x6e>
 8009788:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800978c:	6022      	str	r2, [r4, #0]
 800978e:	2501      	movs	r5, #1
 8009790:	e7c0      	b.n	8009714 <_scanf_float+0x188>
 8009792:	2d03      	cmp	r5, #3
 8009794:	d0e2      	beq.n	800975c <_scanf_float+0x1d0>
 8009796:	2d05      	cmp	r5, #5
 8009798:	e7de      	b.n	8009758 <_scanf_float+0x1cc>
 800979a:	2d02      	cmp	r5, #2
 800979c:	f47f af26 	bne.w	80095ec <_scanf_float+0x60>
 80097a0:	2503      	movs	r5, #3
 80097a2:	e7b7      	b.n	8009714 <_scanf_float+0x188>
 80097a4:	2d06      	cmp	r5, #6
 80097a6:	f47f af21 	bne.w	80095ec <_scanf_float+0x60>
 80097aa:	2507      	movs	r5, #7
 80097ac:	e7b2      	b.n	8009714 <_scanf_float+0x188>
 80097ae:	6822      	ldr	r2, [r4, #0]
 80097b0:	0591      	lsls	r1, r2, #22
 80097b2:	f57f af1b 	bpl.w	80095ec <_scanf_float+0x60>
 80097b6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80097ba:	6022      	str	r2, [r4, #0]
 80097bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80097c0:	e7a8      	b.n	8009714 <_scanf_float+0x188>
 80097c2:	6822      	ldr	r2, [r4, #0]
 80097c4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80097c8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80097cc:	d006      	beq.n	80097dc <_scanf_float+0x250>
 80097ce:	0550      	lsls	r0, r2, #21
 80097d0:	f57f af0c 	bpl.w	80095ec <_scanf_float+0x60>
 80097d4:	f1b9 0f00 	cmp.w	r9, #0
 80097d8:	f43f af0f 	beq.w	80095fa <_scanf_float+0x6e>
 80097dc:	0591      	lsls	r1, r2, #22
 80097de:	bf58      	it	pl
 80097e0:	9901      	ldrpl	r1, [sp, #4]
 80097e2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80097e6:	bf58      	it	pl
 80097e8:	eba9 0101 	subpl.w	r1, r9, r1
 80097ec:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80097f0:	bf58      	it	pl
 80097f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80097f6:	6022      	str	r2, [r4, #0]
 80097f8:	f04f 0900 	mov.w	r9, #0
 80097fc:	e78a      	b.n	8009714 <_scanf_float+0x188>
 80097fe:	f04f 0a03 	mov.w	sl, #3
 8009802:	e787      	b.n	8009714 <_scanf_float+0x188>
 8009804:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009808:	4639      	mov	r1, r7
 800980a:	4640      	mov	r0, r8
 800980c:	4798      	blx	r3
 800980e:	2800      	cmp	r0, #0
 8009810:	f43f aedf 	beq.w	80095d2 <_scanf_float+0x46>
 8009814:	e6ea      	b.n	80095ec <_scanf_float+0x60>
 8009816:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800981a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800981e:	463a      	mov	r2, r7
 8009820:	4640      	mov	r0, r8
 8009822:	4798      	blx	r3
 8009824:	6923      	ldr	r3, [r4, #16]
 8009826:	3b01      	subs	r3, #1
 8009828:	6123      	str	r3, [r4, #16]
 800982a:	e6ec      	b.n	8009606 <_scanf_float+0x7a>
 800982c:	1e6b      	subs	r3, r5, #1
 800982e:	2b06      	cmp	r3, #6
 8009830:	d825      	bhi.n	800987e <_scanf_float+0x2f2>
 8009832:	2d02      	cmp	r5, #2
 8009834:	d836      	bhi.n	80098a4 <_scanf_float+0x318>
 8009836:	455e      	cmp	r6, fp
 8009838:	f67f aee8 	bls.w	800960c <_scanf_float+0x80>
 800983c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009840:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009844:	463a      	mov	r2, r7
 8009846:	4640      	mov	r0, r8
 8009848:	4798      	blx	r3
 800984a:	6923      	ldr	r3, [r4, #16]
 800984c:	3b01      	subs	r3, #1
 800984e:	6123      	str	r3, [r4, #16]
 8009850:	e7f1      	b.n	8009836 <_scanf_float+0x2aa>
 8009852:	9802      	ldr	r0, [sp, #8]
 8009854:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009858:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800985c:	9002      	str	r0, [sp, #8]
 800985e:	463a      	mov	r2, r7
 8009860:	4640      	mov	r0, r8
 8009862:	4798      	blx	r3
 8009864:	6923      	ldr	r3, [r4, #16]
 8009866:	3b01      	subs	r3, #1
 8009868:	6123      	str	r3, [r4, #16]
 800986a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800986e:	fa5f fa8a 	uxtb.w	sl, sl
 8009872:	f1ba 0f02 	cmp.w	sl, #2
 8009876:	d1ec      	bne.n	8009852 <_scanf_float+0x2c6>
 8009878:	3d03      	subs	r5, #3
 800987a:	b2ed      	uxtb	r5, r5
 800987c:	1b76      	subs	r6, r6, r5
 800987e:	6823      	ldr	r3, [r4, #0]
 8009880:	05da      	lsls	r2, r3, #23
 8009882:	d52f      	bpl.n	80098e4 <_scanf_float+0x358>
 8009884:	055b      	lsls	r3, r3, #21
 8009886:	d510      	bpl.n	80098aa <_scanf_float+0x31e>
 8009888:	455e      	cmp	r6, fp
 800988a:	f67f aebf 	bls.w	800960c <_scanf_float+0x80>
 800988e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009892:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009896:	463a      	mov	r2, r7
 8009898:	4640      	mov	r0, r8
 800989a:	4798      	blx	r3
 800989c:	6923      	ldr	r3, [r4, #16]
 800989e:	3b01      	subs	r3, #1
 80098a0:	6123      	str	r3, [r4, #16]
 80098a2:	e7f1      	b.n	8009888 <_scanf_float+0x2fc>
 80098a4:	46aa      	mov	sl, r5
 80098a6:	9602      	str	r6, [sp, #8]
 80098a8:	e7df      	b.n	800986a <_scanf_float+0x2de>
 80098aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80098ae:	6923      	ldr	r3, [r4, #16]
 80098b0:	2965      	cmp	r1, #101	; 0x65
 80098b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80098b6:	f106 35ff 	add.w	r5, r6, #4294967295
 80098ba:	6123      	str	r3, [r4, #16]
 80098bc:	d00c      	beq.n	80098d8 <_scanf_float+0x34c>
 80098be:	2945      	cmp	r1, #69	; 0x45
 80098c0:	d00a      	beq.n	80098d8 <_scanf_float+0x34c>
 80098c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80098c6:	463a      	mov	r2, r7
 80098c8:	4640      	mov	r0, r8
 80098ca:	4798      	blx	r3
 80098cc:	6923      	ldr	r3, [r4, #16]
 80098ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80098d2:	3b01      	subs	r3, #1
 80098d4:	1eb5      	subs	r5, r6, #2
 80098d6:	6123      	str	r3, [r4, #16]
 80098d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80098dc:	463a      	mov	r2, r7
 80098de:	4640      	mov	r0, r8
 80098e0:	4798      	blx	r3
 80098e2:	462e      	mov	r6, r5
 80098e4:	6825      	ldr	r5, [r4, #0]
 80098e6:	f015 0510 	ands.w	r5, r5, #16
 80098ea:	d159      	bne.n	80099a0 <_scanf_float+0x414>
 80098ec:	7035      	strb	r5, [r6, #0]
 80098ee:	6823      	ldr	r3, [r4, #0]
 80098f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80098f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098f8:	d11b      	bne.n	8009932 <_scanf_float+0x3a6>
 80098fa:	9b01      	ldr	r3, [sp, #4]
 80098fc:	454b      	cmp	r3, r9
 80098fe:	eba3 0209 	sub.w	r2, r3, r9
 8009902:	d123      	bne.n	800994c <_scanf_float+0x3c0>
 8009904:	2200      	movs	r2, #0
 8009906:	4659      	mov	r1, fp
 8009908:	4640      	mov	r0, r8
 800990a:	f000 ff57 	bl	800a7bc <_strtod_r>
 800990e:	6822      	ldr	r2, [r4, #0]
 8009910:	9b03      	ldr	r3, [sp, #12]
 8009912:	f012 0f02 	tst.w	r2, #2
 8009916:	ec57 6b10 	vmov	r6, r7, d0
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	d021      	beq.n	8009962 <_scanf_float+0x3d6>
 800991e:	9903      	ldr	r1, [sp, #12]
 8009920:	1d1a      	adds	r2, r3, #4
 8009922:	600a      	str	r2, [r1, #0]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	e9c3 6700 	strd	r6, r7, [r3]
 800992a:	68e3      	ldr	r3, [r4, #12]
 800992c:	3301      	adds	r3, #1
 800992e:	60e3      	str	r3, [r4, #12]
 8009930:	e66d      	b.n	800960e <_scanf_float+0x82>
 8009932:	9b04      	ldr	r3, [sp, #16]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d0e5      	beq.n	8009904 <_scanf_float+0x378>
 8009938:	9905      	ldr	r1, [sp, #20]
 800993a:	230a      	movs	r3, #10
 800993c:	462a      	mov	r2, r5
 800993e:	3101      	adds	r1, #1
 8009940:	4640      	mov	r0, r8
 8009942:	f000 ffc3 	bl	800a8cc <_strtol_r>
 8009946:	9b04      	ldr	r3, [sp, #16]
 8009948:	9e05      	ldr	r6, [sp, #20]
 800994a:	1ac2      	subs	r2, r0, r3
 800994c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009950:	429e      	cmp	r6, r3
 8009952:	bf28      	it	cs
 8009954:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009958:	4912      	ldr	r1, [pc, #72]	; (80099a4 <_scanf_float+0x418>)
 800995a:	4630      	mov	r0, r6
 800995c:	f000 f8a6 	bl	8009aac <siprintf>
 8009960:	e7d0      	b.n	8009904 <_scanf_float+0x378>
 8009962:	9903      	ldr	r1, [sp, #12]
 8009964:	f012 0f04 	tst.w	r2, #4
 8009968:	f103 0204 	add.w	r2, r3, #4
 800996c:	600a      	str	r2, [r1, #0]
 800996e:	d1d9      	bne.n	8009924 <_scanf_float+0x398>
 8009970:	f8d3 8000 	ldr.w	r8, [r3]
 8009974:	ee10 2a10 	vmov	r2, s0
 8009978:	ee10 0a10 	vmov	r0, s0
 800997c:	463b      	mov	r3, r7
 800997e:	4639      	mov	r1, r7
 8009980:	f7f7 f8dc 	bl	8000b3c <__aeabi_dcmpun>
 8009984:	b128      	cbz	r0, 8009992 <_scanf_float+0x406>
 8009986:	4808      	ldr	r0, [pc, #32]	; (80099a8 <_scanf_float+0x41c>)
 8009988:	f000 f88a 	bl	8009aa0 <nanf>
 800998c:	ed88 0a00 	vstr	s0, [r8]
 8009990:	e7cb      	b.n	800992a <_scanf_float+0x39e>
 8009992:	4630      	mov	r0, r6
 8009994:	4639      	mov	r1, r7
 8009996:	f7f7 f92f 	bl	8000bf8 <__aeabi_d2f>
 800999a:	f8c8 0000 	str.w	r0, [r8]
 800999e:	e7c4      	b.n	800992a <_scanf_float+0x39e>
 80099a0:	2500      	movs	r5, #0
 80099a2:	e634      	b.n	800960e <_scanf_float+0x82>
 80099a4:	0800d4e4 	.word	0x0800d4e4
 80099a8:	0800d8f0 	.word	0x0800d8f0

080099ac <cleanup_glue>:
 80099ac:	b538      	push	{r3, r4, r5, lr}
 80099ae:	460c      	mov	r4, r1
 80099b0:	6809      	ldr	r1, [r1, #0]
 80099b2:	4605      	mov	r5, r0
 80099b4:	b109      	cbz	r1, 80099ba <cleanup_glue+0xe>
 80099b6:	f7ff fff9 	bl	80099ac <cleanup_glue>
 80099ba:	4621      	mov	r1, r4
 80099bc:	4628      	mov	r0, r5
 80099be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099c2:	f002 bf69 	b.w	800c898 <_free_r>
	...

080099c8 <_reclaim_reent>:
 80099c8:	4b2c      	ldr	r3, [pc, #176]	; (8009a7c <_reclaim_reent+0xb4>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4283      	cmp	r3, r0
 80099ce:	b570      	push	{r4, r5, r6, lr}
 80099d0:	4604      	mov	r4, r0
 80099d2:	d051      	beq.n	8009a78 <_reclaim_reent+0xb0>
 80099d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80099d6:	b143      	cbz	r3, 80099ea <_reclaim_reent+0x22>
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d14a      	bne.n	8009a74 <_reclaim_reent+0xac>
 80099de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099e0:	6819      	ldr	r1, [r3, #0]
 80099e2:	b111      	cbz	r1, 80099ea <_reclaim_reent+0x22>
 80099e4:	4620      	mov	r0, r4
 80099e6:	f002 ff57 	bl	800c898 <_free_r>
 80099ea:	6961      	ldr	r1, [r4, #20]
 80099ec:	b111      	cbz	r1, 80099f4 <_reclaim_reent+0x2c>
 80099ee:	4620      	mov	r0, r4
 80099f0:	f002 ff52 	bl	800c898 <_free_r>
 80099f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80099f6:	b111      	cbz	r1, 80099fe <_reclaim_reent+0x36>
 80099f8:	4620      	mov	r0, r4
 80099fa:	f002 ff4d 	bl	800c898 <_free_r>
 80099fe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009a00:	b111      	cbz	r1, 8009a08 <_reclaim_reent+0x40>
 8009a02:	4620      	mov	r0, r4
 8009a04:	f002 ff48 	bl	800c898 <_free_r>
 8009a08:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009a0a:	b111      	cbz	r1, 8009a12 <_reclaim_reent+0x4a>
 8009a0c:	4620      	mov	r0, r4
 8009a0e:	f002 ff43 	bl	800c898 <_free_r>
 8009a12:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009a14:	b111      	cbz	r1, 8009a1c <_reclaim_reent+0x54>
 8009a16:	4620      	mov	r0, r4
 8009a18:	f002 ff3e 	bl	800c898 <_free_r>
 8009a1c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009a1e:	b111      	cbz	r1, 8009a26 <_reclaim_reent+0x5e>
 8009a20:	4620      	mov	r0, r4
 8009a22:	f002 ff39 	bl	800c898 <_free_r>
 8009a26:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009a28:	b111      	cbz	r1, 8009a30 <_reclaim_reent+0x68>
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	f002 ff34 	bl	800c898 <_free_r>
 8009a30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a32:	b111      	cbz	r1, 8009a3a <_reclaim_reent+0x72>
 8009a34:	4620      	mov	r0, r4
 8009a36:	f002 ff2f 	bl	800c898 <_free_r>
 8009a3a:	69a3      	ldr	r3, [r4, #24]
 8009a3c:	b1e3      	cbz	r3, 8009a78 <_reclaim_reent+0xb0>
 8009a3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009a40:	4620      	mov	r0, r4
 8009a42:	4798      	blx	r3
 8009a44:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009a46:	b1b9      	cbz	r1, 8009a78 <_reclaim_reent+0xb0>
 8009a48:	4620      	mov	r0, r4
 8009a4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009a4e:	f7ff bfad 	b.w	80099ac <cleanup_glue>
 8009a52:	5949      	ldr	r1, [r1, r5]
 8009a54:	b941      	cbnz	r1, 8009a68 <_reclaim_reent+0xa0>
 8009a56:	3504      	adds	r5, #4
 8009a58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a5a:	2d80      	cmp	r5, #128	; 0x80
 8009a5c:	68d9      	ldr	r1, [r3, #12]
 8009a5e:	d1f8      	bne.n	8009a52 <_reclaim_reent+0x8a>
 8009a60:	4620      	mov	r0, r4
 8009a62:	f002 ff19 	bl	800c898 <_free_r>
 8009a66:	e7ba      	b.n	80099de <_reclaim_reent+0x16>
 8009a68:	680e      	ldr	r6, [r1, #0]
 8009a6a:	4620      	mov	r0, r4
 8009a6c:	f002 ff14 	bl	800c898 <_free_r>
 8009a70:	4631      	mov	r1, r6
 8009a72:	e7ef      	b.n	8009a54 <_reclaim_reent+0x8c>
 8009a74:	2500      	movs	r5, #0
 8009a76:	e7ef      	b.n	8009a58 <_reclaim_reent+0x90>
 8009a78:	bd70      	pop	{r4, r5, r6, pc}
 8009a7a:	bf00      	nop
 8009a7c:	20000020 	.word	0x20000020

08009a80 <_sbrk_r>:
 8009a80:	b538      	push	{r3, r4, r5, lr}
 8009a82:	4d06      	ldr	r5, [pc, #24]	; (8009a9c <_sbrk_r+0x1c>)
 8009a84:	2300      	movs	r3, #0
 8009a86:	4604      	mov	r4, r0
 8009a88:	4608      	mov	r0, r1
 8009a8a:	602b      	str	r3, [r5, #0]
 8009a8c:	f7f9 f986 	bl	8002d9c <_sbrk>
 8009a90:	1c43      	adds	r3, r0, #1
 8009a92:	d102      	bne.n	8009a9a <_sbrk_r+0x1a>
 8009a94:	682b      	ldr	r3, [r5, #0]
 8009a96:	b103      	cbz	r3, 8009a9a <_sbrk_r+0x1a>
 8009a98:	6023      	str	r3, [r4, #0]
 8009a9a:	bd38      	pop	{r3, r4, r5, pc}
 8009a9c:	20004528 	.word	0x20004528

08009aa0 <nanf>:
 8009aa0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009aa8 <nanf+0x8>
 8009aa4:	4770      	bx	lr
 8009aa6:	bf00      	nop
 8009aa8:	7fc00000 	.word	0x7fc00000

08009aac <siprintf>:
 8009aac:	b40e      	push	{r1, r2, r3}
 8009aae:	b500      	push	{lr}
 8009ab0:	b09c      	sub	sp, #112	; 0x70
 8009ab2:	ab1d      	add	r3, sp, #116	; 0x74
 8009ab4:	9002      	str	r0, [sp, #8]
 8009ab6:	9006      	str	r0, [sp, #24]
 8009ab8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009abc:	4809      	ldr	r0, [pc, #36]	; (8009ae4 <siprintf+0x38>)
 8009abe:	9107      	str	r1, [sp, #28]
 8009ac0:	9104      	str	r1, [sp, #16]
 8009ac2:	4909      	ldr	r1, [pc, #36]	; (8009ae8 <siprintf+0x3c>)
 8009ac4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ac8:	9105      	str	r1, [sp, #20]
 8009aca:	6800      	ldr	r0, [r0, #0]
 8009acc:	9301      	str	r3, [sp, #4]
 8009ace:	a902      	add	r1, sp, #8
 8009ad0:	f002 ff8a 	bl	800c9e8 <_svfiprintf_r>
 8009ad4:	9b02      	ldr	r3, [sp, #8]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	701a      	strb	r2, [r3, #0]
 8009ada:	b01c      	add	sp, #112	; 0x70
 8009adc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ae0:	b003      	add	sp, #12
 8009ae2:	4770      	bx	lr
 8009ae4:	20000020 	.word	0x20000020
 8009ae8:	ffff0208 	.word	0xffff0208

08009aec <__sread>:
 8009aec:	b510      	push	{r4, lr}
 8009aee:	460c      	mov	r4, r1
 8009af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009af4:	f003 f878 	bl	800cbe8 <_read_r>
 8009af8:	2800      	cmp	r0, #0
 8009afa:	bfab      	itete	ge
 8009afc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009afe:	89a3      	ldrhlt	r3, [r4, #12]
 8009b00:	181b      	addge	r3, r3, r0
 8009b02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009b06:	bfac      	ite	ge
 8009b08:	6563      	strge	r3, [r4, #84]	; 0x54
 8009b0a:	81a3      	strhlt	r3, [r4, #12]
 8009b0c:	bd10      	pop	{r4, pc}

08009b0e <__swrite>:
 8009b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b12:	461f      	mov	r7, r3
 8009b14:	898b      	ldrh	r3, [r1, #12]
 8009b16:	05db      	lsls	r3, r3, #23
 8009b18:	4605      	mov	r5, r0
 8009b1a:	460c      	mov	r4, r1
 8009b1c:	4616      	mov	r6, r2
 8009b1e:	d505      	bpl.n	8009b2c <__swrite+0x1e>
 8009b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b24:	2302      	movs	r3, #2
 8009b26:	2200      	movs	r2, #0
 8009b28:	f002 f9a6 	bl	800be78 <_lseek_r>
 8009b2c:	89a3      	ldrh	r3, [r4, #12]
 8009b2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b36:	81a3      	strh	r3, [r4, #12]
 8009b38:	4632      	mov	r2, r6
 8009b3a:	463b      	mov	r3, r7
 8009b3c:	4628      	mov	r0, r5
 8009b3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b42:	f000 bec5 	b.w	800a8d0 <_write_r>

08009b46 <__sseek>:
 8009b46:	b510      	push	{r4, lr}
 8009b48:	460c      	mov	r4, r1
 8009b4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b4e:	f002 f993 	bl	800be78 <_lseek_r>
 8009b52:	1c43      	adds	r3, r0, #1
 8009b54:	89a3      	ldrh	r3, [r4, #12]
 8009b56:	bf15      	itete	ne
 8009b58:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b62:	81a3      	strheq	r3, [r4, #12]
 8009b64:	bf18      	it	ne
 8009b66:	81a3      	strhne	r3, [r4, #12]
 8009b68:	bd10      	pop	{r4, pc}

08009b6a <__sclose>:
 8009b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b6e:	f000 bec1 	b.w	800a8f4 <_close_r>

08009b72 <sulp>:
 8009b72:	b570      	push	{r4, r5, r6, lr}
 8009b74:	4604      	mov	r4, r0
 8009b76:	460d      	mov	r5, r1
 8009b78:	ec45 4b10 	vmov	d0, r4, r5
 8009b7c:	4616      	mov	r6, r2
 8009b7e:	f002 fd25 	bl	800c5cc <__ulp>
 8009b82:	ec51 0b10 	vmov	r0, r1, d0
 8009b86:	b17e      	cbz	r6, 8009ba8 <sulp+0x36>
 8009b88:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009b8c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	dd09      	ble.n	8009ba8 <sulp+0x36>
 8009b94:	051b      	lsls	r3, r3, #20
 8009b96:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009b9a:	2400      	movs	r4, #0
 8009b9c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009ba0:	4622      	mov	r2, r4
 8009ba2:	462b      	mov	r3, r5
 8009ba4:	f7f6 fd30 	bl	8000608 <__aeabi_dmul>
 8009ba8:	bd70      	pop	{r4, r5, r6, pc}
 8009baa:	0000      	movs	r0, r0
 8009bac:	0000      	movs	r0, r0
	...

08009bb0 <_strtod_l>:
 8009bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bb4:	ed2d 8b02 	vpush	{d8}
 8009bb8:	b09d      	sub	sp, #116	; 0x74
 8009bba:	461f      	mov	r7, r3
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	9318      	str	r3, [sp, #96]	; 0x60
 8009bc0:	4ba2      	ldr	r3, [pc, #648]	; (8009e4c <_strtod_l+0x29c>)
 8009bc2:	9213      	str	r2, [sp, #76]	; 0x4c
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	9305      	str	r3, [sp, #20]
 8009bc8:	4604      	mov	r4, r0
 8009bca:	4618      	mov	r0, r3
 8009bcc:	4688      	mov	r8, r1
 8009bce:	f7f6 fb07 	bl	80001e0 <strlen>
 8009bd2:	f04f 0a00 	mov.w	sl, #0
 8009bd6:	4605      	mov	r5, r0
 8009bd8:	f04f 0b00 	mov.w	fp, #0
 8009bdc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009be0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009be2:	781a      	ldrb	r2, [r3, #0]
 8009be4:	2a2b      	cmp	r2, #43	; 0x2b
 8009be6:	d04e      	beq.n	8009c86 <_strtod_l+0xd6>
 8009be8:	d83b      	bhi.n	8009c62 <_strtod_l+0xb2>
 8009bea:	2a0d      	cmp	r2, #13
 8009bec:	d834      	bhi.n	8009c58 <_strtod_l+0xa8>
 8009bee:	2a08      	cmp	r2, #8
 8009bf0:	d834      	bhi.n	8009c5c <_strtod_l+0xac>
 8009bf2:	2a00      	cmp	r2, #0
 8009bf4:	d03e      	beq.n	8009c74 <_strtod_l+0xc4>
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	930a      	str	r3, [sp, #40]	; 0x28
 8009bfa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009bfc:	7833      	ldrb	r3, [r6, #0]
 8009bfe:	2b30      	cmp	r3, #48	; 0x30
 8009c00:	f040 80b0 	bne.w	8009d64 <_strtod_l+0x1b4>
 8009c04:	7873      	ldrb	r3, [r6, #1]
 8009c06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009c0a:	2b58      	cmp	r3, #88	; 0x58
 8009c0c:	d168      	bne.n	8009ce0 <_strtod_l+0x130>
 8009c0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c10:	9301      	str	r3, [sp, #4]
 8009c12:	ab18      	add	r3, sp, #96	; 0x60
 8009c14:	9702      	str	r7, [sp, #8]
 8009c16:	9300      	str	r3, [sp, #0]
 8009c18:	4a8d      	ldr	r2, [pc, #564]	; (8009e50 <_strtod_l+0x2a0>)
 8009c1a:	ab19      	add	r3, sp, #100	; 0x64
 8009c1c:	a917      	add	r1, sp, #92	; 0x5c
 8009c1e:	4620      	mov	r0, r4
 8009c20:	f001 fe1e 	bl	800b860 <__gethex>
 8009c24:	f010 0707 	ands.w	r7, r0, #7
 8009c28:	4605      	mov	r5, r0
 8009c2a:	d005      	beq.n	8009c38 <_strtod_l+0x88>
 8009c2c:	2f06      	cmp	r7, #6
 8009c2e:	d12c      	bne.n	8009c8a <_strtod_l+0xda>
 8009c30:	3601      	adds	r6, #1
 8009c32:	2300      	movs	r3, #0
 8009c34:	9617      	str	r6, [sp, #92]	; 0x5c
 8009c36:	930a      	str	r3, [sp, #40]	; 0x28
 8009c38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	f040 8590 	bne.w	800a760 <_strtod_l+0xbb0>
 8009c40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c42:	b1eb      	cbz	r3, 8009c80 <_strtod_l+0xd0>
 8009c44:	4652      	mov	r2, sl
 8009c46:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009c4a:	ec43 2b10 	vmov	d0, r2, r3
 8009c4e:	b01d      	add	sp, #116	; 0x74
 8009c50:	ecbd 8b02 	vpop	{d8}
 8009c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c58:	2a20      	cmp	r2, #32
 8009c5a:	d1cc      	bne.n	8009bf6 <_strtod_l+0x46>
 8009c5c:	3301      	adds	r3, #1
 8009c5e:	9317      	str	r3, [sp, #92]	; 0x5c
 8009c60:	e7be      	b.n	8009be0 <_strtod_l+0x30>
 8009c62:	2a2d      	cmp	r2, #45	; 0x2d
 8009c64:	d1c7      	bne.n	8009bf6 <_strtod_l+0x46>
 8009c66:	2201      	movs	r2, #1
 8009c68:	920a      	str	r2, [sp, #40]	; 0x28
 8009c6a:	1c5a      	adds	r2, r3, #1
 8009c6c:	9217      	str	r2, [sp, #92]	; 0x5c
 8009c6e:	785b      	ldrb	r3, [r3, #1]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d1c2      	bne.n	8009bfa <_strtod_l+0x4a>
 8009c74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009c76:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	f040 856e 	bne.w	800a75c <_strtod_l+0xbac>
 8009c80:	4652      	mov	r2, sl
 8009c82:	465b      	mov	r3, fp
 8009c84:	e7e1      	b.n	8009c4a <_strtod_l+0x9a>
 8009c86:	2200      	movs	r2, #0
 8009c88:	e7ee      	b.n	8009c68 <_strtod_l+0xb8>
 8009c8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009c8c:	b13a      	cbz	r2, 8009c9e <_strtod_l+0xee>
 8009c8e:	2135      	movs	r1, #53	; 0x35
 8009c90:	a81a      	add	r0, sp, #104	; 0x68
 8009c92:	f002 fda6 	bl	800c7e2 <__copybits>
 8009c96:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009c98:	4620      	mov	r0, r4
 8009c9a:	f002 f965 	bl	800bf68 <_Bfree>
 8009c9e:	3f01      	subs	r7, #1
 8009ca0:	2f04      	cmp	r7, #4
 8009ca2:	d806      	bhi.n	8009cb2 <_strtod_l+0x102>
 8009ca4:	e8df f007 	tbb	[pc, r7]
 8009ca8:	1714030a 	.word	0x1714030a
 8009cac:	0a          	.byte	0x0a
 8009cad:	00          	.byte	0x00
 8009cae:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009cb2:	0728      	lsls	r0, r5, #28
 8009cb4:	d5c0      	bpl.n	8009c38 <_strtod_l+0x88>
 8009cb6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009cba:	e7bd      	b.n	8009c38 <_strtod_l+0x88>
 8009cbc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009cc0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009cc2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009cc6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009cca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009cce:	e7f0      	b.n	8009cb2 <_strtod_l+0x102>
 8009cd0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8009e54 <_strtod_l+0x2a4>
 8009cd4:	e7ed      	b.n	8009cb2 <_strtod_l+0x102>
 8009cd6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009cda:	f04f 3aff 	mov.w	sl, #4294967295
 8009cde:	e7e8      	b.n	8009cb2 <_strtod_l+0x102>
 8009ce0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009ce2:	1c5a      	adds	r2, r3, #1
 8009ce4:	9217      	str	r2, [sp, #92]	; 0x5c
 8009ce6:	785b      	ldrb	r3, [r3, #1]
 8009ce8:	2b30      	cmp	r3, #48	; 0x30
 8009cea:	d0f9      	beq.n	8009ce0 <_strtod_l+0x130>
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d0a3      	beq.n	8009c38 <_strtod_l+0x88>
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	f04f 0900 	mov.w	r9, #0
 8009cf6:	9304      	str	r3, [sp, #16]
 8009cf8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009cfa:	9308      	str	r3, [sp, #32]
 8009cfc:	f8cd 901c 	str.w	r9, [sp, #28]
 8009d00:	464f      	mov	r7, r9
 8009d02:	220a      	movs	r2, #10
 8009d04:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009d06:	7806      	ldrb	r6, [r0, #0]
 8009d08:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009d0c:	b2d9      	uxtb	r1, r3
 8009d0e:	2909      	cmp	r1, #9
 8009d10:	d92a      	bls.n	8009d68 <_strtod_l+0x1b8>
 8009d12:	9905      	ldr	r1, [sp, #20]
 8009d14:	462a      	mov	r2, r5
 8009d16:	f002 ff83 	bl	800cc20 <strncmp>
 8009d1a:	b398      	cbz	r0, 8009d84 <_strtod_l+0x1d4>
 8009d1c:	2000      	movs	r0, #0
 8009d1e:	4632      	mov	r2, r6
 8009d20:	463d      	mov	r5, r7
 8009d22:	9005      	str	r0, [sp, #20]
 8009d24:	4603      	mov	r3, r0
 8009d26:	2a65      	cmp	r2, #101	; 0x65
 8009d28:	d001      	beq.n	8009d2e <_strtod_l+0x17e>
 8009d2a:	2a45      	cmp	r2, #69	; 0x45
 8009d2c:	d118      	bne.n	8009d60 <_strtod_l+0x1b0>
 8009d2e:	b91d      	cbnz	r5, 8009d38 <_strtod_l+0x188>
 8009d30:	9a04      	ldr	r2, [sp, #16]
 8009d32:	4302      	orrs	r2, r0
 8009d34:	d09e      	beq.n	8009c74 <_strtod_l+0xc4>
 8009d36:	2500      	movs	r5, #0
 8009d38:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8009d3c:	f108 0201 	add.w	r2, r8, #1
 8009d40:	9217      	str	r2, [sp, #92]	; 0x5c
 8009d42:	f898 2001 	ldrb.w	r2, [r8, #1]
 8009d46:	2a2b      	cmp	r2, #43	; 0x2b
 8009d48:	d075      	beq.n	8009e36 <_strtod_l+0x286>
 8009d4a:	2a2d      	cmp	r2, #45	; 0x2d
 8009d4c:	d07b      	beq.n	8009e46 <_strtod_l+0x296>
 8009d4e:	f04f 0c00 	mov.w	ip, #0
 8009d52:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009d56:	2909      	cmp	r1, #9
 8009d58:	f240 8082 	bls.w	8009e60 <_strtod_l+0x2b0>
 8009d5c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009d60:	2600      	movs	r6, #0
 8009d62:	e09d      	b.n	8009ea0 <_strtod_l+0x2f0>
 8009d64:	2300      	movs	r3, #0
 8009d66:	e7c4      	b.n	8009cf2 <_strtod_l+0x142>
 8009d68:	2f08      	cmp	r7, #8
 8009d6a:	bfd8      	it	le
 8009d6c:	9907      	ldrle	r1, [sp, #28]
 8009d6e:	f100 0001 	add.w	r0, r0, #1
 8009d72:	bfda      	itte	le
 8009d74:	fb02 3301 	mlale	r3, r2, r1, r3
 8009d78:	9307      	strle	r3, [sp, #28]
 8009d7a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009d7e:	3701      	adds	r7, #1
 8009d80:	9017      	str	r0, [sp, #92]	; 0x5c
 8009d82:	e7bf      	b.n	8009d04 <_strtod_l+0x154>
 8009d84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009d86:	195a      	adds	r2, r3, r5
 8009d88:	9217      	str	r2, [sp, #92]	; 0x5c
 8009d8a:	5d5a      	ldrb	r2, [r3, r5]
 8009d8c:	2f00      	cmp	r7, #0
 8009d8e:	d037      	beq.n	8009e00 <_strtod_l+0x250>
 8009d90:	9005      	str	r0, [sp, #20]
 8009d92:	463d      	mov	r5, r7
 8009d94:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009d98:	2b09      	cmp	r3, #9
 8009d9a:	d912      	bls.n	8009dc2 <_strtod_l+0x212>
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	e7c2      	b.n	8009d26 <_strtod_l+0x176>
 8009da0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009da2:	1c5a      	adds	r2, r3, #1
 8009da4:	9217      	str	r2, [sp, #92]	; 0x5c
 8009da6:	785a      	ldrb	r2, [r3, #1]
 8009da8:	3001      	adds	r0, #1
 8009daa:	2a30      	cmp	r2, #48	; 0x30
 8009dac:	d0f8      	beq.n	8009da0 <_strtod_l+0x1f0>
 8009dae:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009db2:	2b08      	cmp	r3, #8
 8009db4:	f200 84d9 	bhi.w	800a76a <_strtod_l+0xbba>
 8009db8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009dba:	9005      	str	r0, [sp, #20]
 8009dbc:	2000      	movs	r0, #0
 8009dbe:	9308      	str	r3, [sp, #32]
 8009dc0:	4605      	mov	r5, r0
 8009dc2:	3a30      	subs	r2, #48	; 0x30
 8009dc4:	f100 0301 	add.w	r3, r0, #1
 8009dc8:	d014      	beq.n	8009df4 <_strtod_l+0x244>
 8009dca:	9905      	ldr	r1, [sp, #20]
 8009dcc:	4419      	add	r1, r3
 8009dce:	9105      	str	r1, [sp, #20]
 8009dd0:	462b      	mov	r3, r5
 8009dd2:	eb00 0e05 	add.w	lr, r0, r5
 8009dd6:	210a      	movs	r1, #10
 8009dd8:	4573      	cmp	r3, lr
 8009dda:	d113      	bne.n	8009e04 <_strtod_l+0x254>
 8009ddc:	182b      	adds	r3, r5, r0
 8009dde:	2b08      	cmp	r3, #8
 8009de0:	f105 0501 	add.w	r5, r5, #1
 8009de4:	4405      	add	r5, r0
 8009de6:	dc1c      	bgt.n	8009e22 <_strtod_l+0x272>
 8009de8:	9907      	ldr	r1, [sp, #28]
 8009dea:	230a      	movs	r3, #10
 8009dec:	fb03 2301 	mla	r3, r3, r1, r2
 8009df0:	9307      	str	r3, [sp, #28]
 8009df2:	2300      	movs	r3, #0
 8009df4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009df6:	1c51      	adds	r1, r2, #1
 8009df8:	9117      	str	r1, [sp, #92]	; 0x5c
 8009dfa:	7852      	ldrb	r2, [r2, #1]
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	e7c9      	b.n	8009d94 <_strtod_l+0x1e4>
 8009e00:	4638      	mov	r0, r7
 8009e02:	e7d2      	b.n	8009daa <_strtod_l+0x1fa>
 8009e04:	2b08      	cmp	r3, #8
 8009e06:	dc04      	bgt.n	8009e12 <_strtod_l+0x262>
 8009e08:	9e07      	ldr	r6, [sp, #28]
 8009e0a:	434e      	muls	r6, r1
 8009e0c:	9607      	str	r6, [sp, #28]
 8009e0e:	3301      	adds	r3, #1
 8009e10:	e7e2      	b.n	8009dd8 <_strtod_l+0x228>
 8009e12:	f103 0c01 	add.w	ip, r3, #1
 8009e16:	f1bc 0f10 	cmp.w	ip, #16
 8009e1a:	bfd8      	it	le
 8009e1c:	fb01 f909 	mulle.w	r9, r1, r9
 8009e20:	e7f5      	b.n	8009e0e <_strtod_l+0x25e>
 8009e22:	2d10      	cmp	r5, #16
 8009e24:	bfdc      	itt	le
 8009e26:	230a      	movle	r3, #10
 8009e28:	fb03 2909 	mlale	r9, r3, r9, r2
 8009e2c:	e7e1      	b.n	8009df2 <_strtod_l+0x242>
 8009e2e:	2300      	movs	r3, #0
 8009e30:	9305      	str	r3, [sp, #20]
 8009e32:	2301      	movs	r3, #1
 8009e34:	e77c      	b.n	8009d30 <_strtod_l+0x180>
 8009e36:	f04f 0c00 	mov.w	ip, #0
 8009e3a:	f108 0202 	add.w	r2, r8, #2
 8009e3e:	9217      	str	r2, [sp, #92]	; 0x5c
 8009e40:	f898 2002 	ldrb.w	r2, [r8, #2]
 8009e44:	e785      	b.n	8009d52 <_strtod_l+0x1a2>
 8009e46:	f04f 0c01 	mov.w	ip, #1
 8009e4a:	e7f6      	b.n	8009e3a <_strtod_l+0x28a>
 8009e4c:	0800d738 	.word	0x0800d738
 8009e50:	0800d4ec 	.word	0x0800d4ec
 8009e54:	7ff00000 	.word	0x7ff00000
 8009e58:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009e5a:	1c51      	adds	r1, r2, #1
 8009e5c:	9117      	str	r1, [sp, #92]	; 0x5c
 8009e5e:	7852      	ldrb	r2, [r2, #1]
 8009e60:	2a30      	cmp	r2, #48	; 0x30
 8009e62:	d0f9      	beq.n	8009e58 <_strtod_l+0x2a8>
 8009e64:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009e68:	2908      	cmp	r1, #8
 8009e6a:	f63f af79 	bhi.w	8009d60 <_strtod_l+0x1b0>
 8009e6e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009e72:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009e74:	9206      	str	r2, [sp, #24]
 8009e76:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009e78:	1c51      	adds	r1, r2, #1
 8009e7a:	9117      	str	r1, [sp, #92]	; 0x5c
 8009e7c:	7852      	ldrb	r2, [r2, #1]
 8009e7e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009e82:	2e09      	cmp	r6, #9
 8009e84:	d937      	bls.n	8009ef6 <_strtod_l+0x346>
 8009e86:	9e06      	ldr	r6, [sp, #24]
 8009e88:	1b89      	subs	r1, r1, r6
 8009e8a:	2908      	cmp	r1, #8
 8009e8c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009e90:	dc02      	bgt.n	8009e98 <_strtod_l+0x2e8>
 8009e92:	4576      	cmp	r6, lr
 8009e94:	bfa8      	it	ge
 8009e96:	4676      	movge	r6, lr
 8009e98:	f1bc 0f00 	cmp.w	ip, #0
 8009e9c:	d000      	beq.n	8009ea0 <_strtod_l+0x2f0>
 8009e9e:	4276      	negs	r6, r6
 8009ea0:	2d00      	cmp	r5, #0
 8009ea2:	d14d      	bne.n	8009f40 <_strtod_l+0x390>
 8009ea4:	9904      	ldr	r1, [sp, #16]
 8009ea6:	4301      	orrs	r1, r0
 8009ea8:	f47f aec6 	bne.w	8009c38 <_strtod_l+0x88>
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	f47f aee1 	bne.w	8009c74 <_strtod_l+0xc4>
 8009eb2:	2a69      	cmp	r2, #105	; 0x69
 8009eb4:	d027      	beq.n	8009f06 <_strtod_l+0x356>
 8009eb6:	dc24      	bgt.n	8009f02 <_strtod_l+0x352>
 8009eb8:	2a49      	cmp	r2, #73	; 0x49
 8009eba:	d024      	beq.n	8009f06 <_strtod_l+0x356>
 8009ebc:	2a4e      	cmp	r2, #78	; 0x4e
 8009ebe:	f47f aed9 	bne.w	8009c74 <_strtod_l+0xc4>
 8009ec2:	499f      	ldr	r1, [pc, #636]	; (800a140 <_strtod_l+0x590>)
 8009ec4:	a817      	add	r0, sp, #92	; 0x5c
 8009ec6:	f001 ff23 	bl	800bd10 <__match>
 8009eca:	2800      	cmp	r0, #0
 8009ecc:	f43f aed2 	beq.w	8009c74 <_strtod_l+0xc4>
 8009ed0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009ed2:	781b      	ldrb	r3, [r3, #0]
 8009ed4:	2b28      	cmp	r3, #40	; 0x28
 8009ed6:	d12d      	bne.n	8009f34 <_strtod_l+0x384>
 8009ed8:	499a      	ldr	r1, [pc, #616]	; (800a144 <_strtod_l+0x594>)
 8009eda:	aa1a      	add	r2, sp, #104	; 0x68
 8009edc:	a817      	add	r0, sp, #92	; 0x5c
 8009ede:	f001 ff2b 	bl	800bd38 <__hexnan>
 8009ee2:	2805      	cmp	r0, #5
 8009ee4:	d126      	bne.n	8009f34 <_strtod_l+0x384>
 8009ee6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ee8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8009eec:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009ef0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009ef4:	e6a0      	b.n	8009c38 <_strtod_l+0x88>
 8009ef6:	210a      	movs	r1, #10
 8009ef8:	fb01 2e0e 	mla	lr, r1, lr, r2
 8009efc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009f00:	e7b9      	b.n	8009e76 <_strtod_l+0x2c6>
 8009f02:	2a6e      	cmp	r2, #110	; 0x6e
 8009f04:	e7db      	b.n	8009ebe <_strtod_l+0x30e>
 8009f06:	4990      	ldr	r1, [pc, #576]	; (800a148 <_strtod_l+0x598>)
 8009f08:	a817      	add	r0, sp, #92	; 0x5c
 8009f0a:	f001 ff01 	bl	800bd10 <__match>
 8009f0e:	2800      	cmp	r0, #0
 8009f10:	f43f aeb0 	beq.w	8009c74 <_strtod_l+0xc4>
 8009f14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009f16:	498d      	ldr	r1, [pc, #564]	; (800a14c <_strtod_l+0x59c>)
 8009f18:	3b01      	subs	r3, #1
 8009f1a:	a817      	add	r0, sp, #92	; 0x5c
 8009f1c:	9317      	str	r3, [sp, #92]	; 0x5c
 8009f1e:	f001 fef7 	bl	800bd10 <__match>
 8009f22:	b910      	cbnz	r0, 8009f2a <_strtod_l+0x37a>
 8009f24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009f26:	3301      	adds	r3, #1
 8009f28:	9317      	str	r3, [sp, #92]	; 0x5c
 8009f2a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800a15c <_strtod_l+0x5ac>
 8009f2e:	f04f 0a00 	mov.w	sl, #0
 8009f32:	e681      	b.n	8009c38 <_strtod_l+0x88>
 8009f34:	4886      	ldr	r0, [pc, #536]	; (800a150 <_strtod_l+0x5a0>)
 8009f36:	f002 fe6b 	bl	800cc10 <nan>
 8009f3a:	ec5b ab10 	vmov	sl, fp, d0
 8009f3e:	e67b      	b.n	8009c38 <_strtod_l+0x88>
 8009f40:	9b05      	ldr	r3, [sp, #20]
 8009f42:	9807      	ldr	r0, [sp, #28]
 8009f44:	1af3      	subs	r3, r6, r3
 8009f46:	2f00      	cmp	r7, #0
 8009f48:	bf08      	it	eq
 8009f4a:	462f      	moveq	r7, r5
 8009f4c:	2d10      	cmp	r5, #16
 8009f4e:	9306      	str	r3, [sp, #24]
 8009f50:	46a8      	mov	r8, r5
 8009f52:	bfa8      	it	ge
 8009f54:	f04f 0810 	movge.w	r8, #16
 8009f58:	f7f6 fadc 	bl	8000514 <__aeabi_ui2d>
 8009f5c:	2d09      	cmp	r5, #9
 8009f5e:	4682      	mov	sl, r0
 8009f60:	468b      	mov	fp, r1
 8009f62:	dd13      	ble.n	8009f8c <_strtod_l+0x3dc>
 8009f64:	4b7b      	ldr	r3, [pc, #492]	; (800a154 <_strtod_l+0x5a4>)
 8009f66:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009f6a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009f6e:	f7f6 fb4b 	bl	8000608 <__aeabi_dmul>
 8009f72:	4682      	mov	sl, r0
 8009f74:	4648      	mov	r0, r9
 8009f76:	468b      	mov	fp, r1
 8009f78:	f7f6 facc 	bl	8000514 <__aeabi_ui2d>
 8009f7c:	4602      	mov	r2, r0
 8009f7e:	460b      	mov	r3, r1
 8009f80:	4650      	mov	r0, sl
 8009f82:	4659      	mov	r1, fp
 8009f84:	f7f6 f98a 	bl	800029c <__adddf3>
 8009f88:	4682      	mov	sl, r0
 8009f8a:	468b      	mov	fp, r1
 8009f8c:	2d0f      	cmp	r5, #15
 8009f8e:	dc38      	bgt.n	800a002 <_strtod_l+0x452>
 8009f90:	9b06      	ldr	r3, [sp, #24]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	f43f ae50 	beq.w	8009c38 <_strtod_l+0x88>
 8009f98:	dd24      	ble.n	8009fe4 <_strtod_l+0x434>
 8009f9a:	2b16      	cmp	r3, #22
 8009f9c:	dc0b      	bgt.n	8009fb6 <_strtod_l+0x406>
 8009f9e:	496d      	ldr	r1, [pc, #436]	; (800a154 <_strtod_l+0x5a4>)
 8009fa0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009fa4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fa8:	4652      	mov	r2, sl
 8009faa:	465b      	mov	r3, fp
 8009fac:	f7f6 fb2c 	bl	8000608 <__aeabi_dmul>
 8009fb0:	4682      	mov	sl, r0
 8009fb2:	468b      	mov	fp, r1
 8009fb4:	e640      	b.n	8009c38 <_strtod_l+0x88>
 8009fb6:	9a06      	ldr	r2, [sp, #24]
 8009fb8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	db20      	blt.n	800a002 <_strtod_l+0x452>
 8009fc0:	4c64      	ldr	r4, [pc, #400]	; (800a154 <_strtod_l+0x5a4>)
 8009fc2:	f1c5 050f 	rsb	r5, r5, #15
 8009fc6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009fca:	4652      	mov	r2, sl
 8009fcc:	465b      	mov	r3, fp
 8009fce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fd2:	f7f6 fb19 	bl	8000608 <__aeabi_dmul>
 8009fd6:	9b06      	ldr	r3, [sp, #24]
 8009fd8:	1b5d      	subs	r5, r3, r5
 8009fda:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009fde:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009fe2:	e7e3      	b.n	8009fac <_strtod_l+0x3fc>
 8009fe4:	9b06      	ldr	r3, [sp, #24]
 8009fe6:	3316      	adds	r3, #22
 8009fe8:	db0b      	blt.n	800a002 <_strtod_l+0x452>
 8009fea:	9b05      	ldr	r3, [sp, #20]
 8009fec:	1b9e      	subs	r6, r3, r6
 8009fee:	4b59      	ldr	r3, [pc, #356]	; (800a154 <_strtod_l+0x5a4>)
 8009ff0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009ff4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009ff8:	4650      	mov	r0, sl
 8009ffa:	4659      	mov	r1, fp
 8009ffc:	f7f6 fc2e 	bl	800085c <__aeabi_ddiv>
 800a000:	e7d6      	b.n	8009fb0 <_strtod_l+0x400>
 800a002:	9b06      	ldr	r3, [sp, #24]
 800a004:	eba5 0808 	sub.w	r8, r5, r8
 800a008:	4498      	add	r8, r3
 800a00a:	f1b8 0f00 	cmp.w	r8, #0
 800a00e:	dd74      	ble.n	800a0fa <_strtod_l+0x54a>
 800a010:	f018 030f 	ands.w	r3, r8, #15
 800a014:	d00a      	beq.n	800a02c <_strtod_l+0x47c>
 800a016:	494f      	ldr	r1, [pc, #316]	; (800a154 <_strtod_l+0x5a4>)
 800a018:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a01c:	4652      	mov	r2, sl
 800a01e:	465b      	mov	r3, fp
 800a020:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a024:	f7f6 faf0 	bl	8000608 <__aeabi_dmul>
 800a028:	4682      	mov	sl, r0
 800a02a:	468b      	mov	fp, r1
 800a02c:	f038 080f 	bics.w	r8, r8, #15
 800a030:	d04f      	beq.n	800a0d2 <_strtod_l+0x522>
 800a032:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a036:	dd22      	ble.n	800a07e <_strtod_l+0x4ce>
 800a038:	2500      	movs	r5, #0
 800a03a:	462e      	mov	r6, r5
 800a03c:	9507      	str	r5, [sp, #28]
 800a03e:	9505      	str	r5, [sp, #20]
 800a040:	2322      	movs	r3, #34	; 0x22
 800a042:	f8df b118 	ldr.w	fp, [pc, #280]	; 800a15c <_strtod_l+0x5ac>
 800a046:	6023      	str	r3, [r4, #0]
 800a048:	f04f 0a00 	mov.w	sl, #0
 800a04c:	9b07      	ldr	r3, [sp, #28]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	f43f adf2 	beq.w	8009c38 <_strtod_l+0x88>
 800a054:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a056:	4620      	mov	r0, r4
 800a058:	f001 ff86 	bl	800bf68 <_Bfree>
 800a05c:	9905      	ldr	r1, [sp, #20]
 800a05e:	4620      	mov	r0, r4
 800a060:	f001 ff82 	bl	800bf68 <_Bfree>
 800a064:	4631      	mov	r1, r6
 800a066:	4620      	mov	r0, r4
 800a068:	f001 ff7e 	bl	800bf68 <_Bfree>
 800a06c:	9907      	ldr	r1, [sp, #28]
 800a06e:	4620      	mov	r0, r4
 800a070:	f001 ff7a 	bl	800bf68 <_Bfree>
 800a074:	4629      	mov	r1, r5
 800a076:	4620      	mov	r0, r4
 800a078:	f001 ff76 	bl	800bf68 <_Bfree>
 800a07c:	e5dc      	b.n	8009c38 <_strtod_l+0x88>
 800a07e:	4b36      	ldr	r3, [pc, #216]	; (800a158 <_strtod_l+0x5a8>)
 800a080:	9304      	str	r3, [sp, #16]
 800a082:	2300      	movs	r3, #0
 800a084:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a088:	4650      	mov	r0, sl
 800a08a:	4659      	mov	r1, fp
 800a08c:	4699      	mov	r9, r3
 800a08e:	f1b8 0f01 	cmp.w	r8, #1
 800a092:	dc21      	bgt.n	800a0d8 <_strtod_l+0x528>
 800a094:	b10b      	cbz	r3, 800a09a <_strtod_l+0x4ea>
 800a096:	4682      	mov	sl, r0
 800a098:	468b      	mov	fp, r1
 800a09a:	4b2f      	ldr	r3, [pc, #188]	; (800a158 <_strtod_l+0x5a8>)
 800a09c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a0a0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a0a4:	4652      	mov	r2, sl
 800a0a6:	465b      	mov	r3, fp
 800a0a8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a0ac:	f7f6 faac 	bl	8000608 <__aeabi_dmul>
 800a0b0:	4b2a      	ldr	r3, [pc, #168]	; (800a15c <_strtod_l+0x5ac>)
 800a0b2:	460a      	mov	r2, r1
 800a0b4:	400b      	ands	r3, r1
 800a0b6:	492a      	ldr	r1, [pc, #168]	; (800a160 <_strtod_l+0x5b0>)
 800a0b8:	428b      	cmp	r3, r1
 800a0ba:	4682      	mov	sl, r0
 800a0bc:	d8bc      	bhi.n	800a038 <_strtod_l+0x488>
 800a0be:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a0c2:	428b      	cmp	r3, r1
 800a0c4:	bf86      	itte	hi
 800a0c6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800a164 <_strtod_l+0x5b4>
 800a0ca:	f04f 3aff 	movhi.w	sl, #4294967295
 800a0ce:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	9304      	str	r3, [sp, #16]
 800a0d6:	e084      	b.n	800a1e2 <_strtod_l+0x632>
 800a0d8:	f018 0f01 	tst.w	r8, #1
 800a0dc:	d005      	beq.n	800a0ea <_strtod_l+0x53a>
 800a0de:	9b04      	ldr	r3, [sp, #16]
 800a0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e4:	f7f6 fa90 	bl	8000608 <__aeabi_dmul>
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	9a04      	ldr	r2, [sp, #16]
 800a0ec:	3208      	adds	r2, #8
 800a0ee:	f109 0901 	add.w	r9, r9, #1
 800a0f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a0f6:	9204      	str	r2, [sp, #16]
 800a0f8:	e7c9      	b.n	800a08e <_strtod_l+0x4de>
 800a0fa:	d0ea      	beq.n	800a0d2 <_strtod_l+0x522>
 800a0fc:	f1c8 0800 	rsb	r8, r8, #0
 800a100:	f018 020f 	ands.w	r2, r8, #15
 800a104:	d00a      	beq.n	800a11c <_strtod_l+0x56c>
 800a106:	4b13      	ldr	r3, [pc, #76]	; (800a154 <_strtod_l+0x5a4>)
 800a108:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a10c:	4650      	mov	r0, sl
 800a10e:	4659      	mov	r1, fp
 800a110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a114:	f7f6 fba2 	bl	800085c <__aeabi_ddiv>
 800a118:	4682      	mov	sl, r0
 800a11a:	468b      	mov	fp, r1
 800a11c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a120:	d0d7      	beq.n	800a0d2 <_strtod_l+0x522>
 800a122:	f1b8 0f1f 	cmp.w	r8, #31
 800a126:	dd1f      	ble.n	800a168 <_strtod_l+0x5b8>
 800a128:	2500      	movs	r5, #0
 800a12a:	462e      	mov	r6, r5
 800a12c:	9507      	str	r5, [sp, #28]
 800a12e:	9505      	str	r5, [sp, #20]
 800a130:	2322      	movs	r3, #34	; 0x22
 800a132:	f04f 0a00 	mov.w	sl, #0
 800a136:	f04f 0b00 	mov.w	fp, #0
 800a13a:	6023      	str	r3, [r4, #0]
 800a13c:	e786      	b.n	800a04c <_strtod_l+0x49c>
 800a13e:	bf00      	nop
 800a140:	0800d4bd 	.word	0x0800d4bd
 800a144:	0800d500 	.word	0x0800d500
 800a148:	0800d4b5 	.word	0x0800d4b5
 800a14c:	0800d644 	.word	0x0800d644
 800a150:	0800d8f0 	.word	0x0800d8f0
 800a154:	0800d7d0 	.word	0x0800d7d0
 800a158:	0800d7a8 	.word	0x0800d7a8
 800a15c:	7ff00000 	.word	0x7ff00000
 800a160:	7ca00000 	.word	0x7ca00000
 800a164:	7fefffff 	.word	0x7fefffff
 800a168:	f018 0310 	ands.w	r3, r8, #16
 800a16c:	bf18      	it	ne
 800a16e:	236a      	movne	r3, #106	; 0x6a
 800a170:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800a520 <_strtod_l+0x970>
 800a174:	9304      	str	r3, [sp, #16]
 800a176:	4650      	mov	r0, sl
 800a178:	4659      	mov	r1, fp
 800a17a:	2300      	movs	r3, #0
 800a17c:	f018 0f01 	tst.w	r8, #1
 800a180:	d004      	beq.n	800a18c <_strtod_l+0x5dc>
 800a182:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a186:	f7f6 fa3f 	bl	8000608 <__aeabi_dmul>
 800a18a:	2301      	movs	r3, #1
 800a18c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a190:	f109 0908 	add.w	r9, r9, #8
 800a194:	d1f2      	bne.n	800a17c <_strtod_l+0x5cc>
 800a196:	b10b      	cbz	r3, 800a19c <_strtod_l+0x5ec>
 800a198:	4682      	mov	sl, r0
 800a19a:	468b      	mov	fp, r1
 800a19c:	9b04      	ldr	r3, [sp, #16]
 800a19e:	b1c3      	cbz	r3, 800a1d2 <_strtod_l+0x622>
 800a1a0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a1a4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	4659      	mov	r1, fp
 800a1ac:	dd11      	ble.n	800a1d2 <_strtod_l+0x622>
 800a1ae:	2b1f      	cmp	r3, #31
 800a1b0:	f340 8124 	ble.w	800a3fc <_strtod_l+0x84c>
 800a1b4:	2b34      	cmp	r3, #52	; 0x34
 800a1b6:	bfde      	ittt	le
 800a1b8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a1bc:	f04f 33ff 	movle.w	r3, #4294967295
 800a1c0:	fa03 f202 	lslle.w	r2, r3, r2
 800a1c4:	f04f 0a00 	mov.w	sl, #0
 800a1c8:	bfcc      	ite	gt
 800a1ca:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a1ce:	ea02 0b01 	andle.w	fp, r2, r1
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	4650      	mov	r0, sl
 800a1d8:	4659      	mov	r1, fp
 800a1da:	f7f6 fc7d 	bl	8000ad8 <__aeabi_dcmpeq>
 800a1de:	2800      	cmp	r0, #0
 800a1e0:	d1a2      	bne.n	800a128 <_strtod_l+0x578>
 800a1e2:	9b07      	ldr	r3, [sp, #28]
 800a1e4:	9300      	str	r3, [sp, #0]
 800a1e6:	9908      	ldr	r1, [sp, #32]
 800a1e8:	462b      	mov	r3, r5
 800a1ea:	463a      	mov	r2, r7
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	f001 ff23 	bl	800c038 <__s2b>
 800a1f2:	9007      	str	r0, [sp, #28]
 800a1f4:	2800      	cmp	r0, #0
 800a1f6:	f43f af1f 	beq.w	800a038 <_strtod_l+0x488>
 800a1fa:	9b05      	ldr	r3, [sp, #20]
 800a1fc:	1b9e      	subs	r6, r3, r6
 800a1fe:	9b06      	ldr	r3, [sp, #24]
 800a200:	2b00      	cmp	r3, #0
 800a202:	bfb4      	ite	lt
 800a204:	4633      	movlt	r3, r6
 800a206:	2300      	movge	r3, #0
 800a208:	930c      	str	r3, [sp, #48]	; 0x30
 800a20a:	9b06      	ldr	r3, [sp, #24]
 800a20c:	2500      	movs	r5, #0
 800a20e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a212:	9312      	str	r3, [sp, #72]	; 0x48
 800a214:	462e      	mov	r6, r5
 800a216:	9b07      	ldr	r3, [sp, #28]
 800a218:	4620      	mov	r0, r4
 800a21a:	6859      	ldr	r1, [r3, #4]
 800a21c:	f001 fe64 	bl	800bee8 <_Balloc>
 800a220:	9005      	str	r0, [sp, #20]
 800a222:	2800      	cmp	r0, #0
 800a224:	f43f af0c 	beq.w	800a040 <_strtod_l+0x490>
 800a228:	9b07      	ldr	r3, [sp, #28]
 800a22a:	691a      	ldr	r2, [r3, #16]
 800a22c:	3202      	adds	r2, #2
 800a22e:	f103 010c 	add.w	r1, r3, #12
 800a232:	0092      	lsls	r2, r2, #2
 800a234:	300c      	adds	r0, #12
 800a236:	f7fe fc94 	bl	8008b62 <memcpy>
 800a23a:	ec4b ab10 	vmov	d0, sl, fp
 800a23e:	aa1a      	add	r2, sp, #104	; 0x68
 800a240:	a919      	add	r1, sp, #100	; 0x64
 800a242:	4620      	mov	r0, r4
 800a244:	f002 fa3e 	bl	800c6c4 <__d2b>
 800a248:	ec4b ab18 	vmov	d8, sl, fp
 800a24c:	9018      	str	r0, [sp, #96]	; 0x60
 800a24e:	2800      	cmp	r0, #0
 800a250:	f43f aef6 	beq.w	800a040 <_strtod_l+0x490>
 800a254:	2101      	movs	r1, #1
 800a256:	4620      	mov	r0, r4
 800a258:	f001 ff88 	bl	800c16c <__i2b>
 800a25c:	4606      	mov	r6, r0
 800a25e:	2800      	cmp	r0, #0
 800a260:	f43f aeee 	beq.w	800a040 <_strtod_l+0x490>
 800a264:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a266:	9904      	ldr	r1, [sp, #16]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	bfab      	itete	ge
 800a26c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800a26e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800a270:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a272:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800a276:	bfac      	ite	ge
 800a278:	eb03 0902 	addge.w	r9, r3, r2
 800a27c:	1ad7      	sublt	r7, r2, r3
 800a27e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a280:	eba3 0801 	sub.w	r8, r3, r1
 800a284:	4490      	add	r8, r2
 800a286:	4ba1      	ldr	r3, [pc, #644]	; (800a50c <_strtod_l+0x95c>)
 800a288:	f108 38ff 	add.w	r8, r8, #4294967295
 800a28c:	4598      	cmp	r8, r3
 800a28e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a292:	f280 80c7 	bge.w	800a424 <_strtod_l+0x874>
 800a296:	eba3 0308 	sub.w	r3, r3, r8
 800a29a:	2b1f      	cmp	r3, #31
 800a29c:	eba2 0203 	sub.w	r2, r2, r3
 800a2a0:	f04f 0101 	mov.w	r1, #1
 800a2a4:	f300 80b1 	bgt.w	800a40a <_strtod_l+0x85a>
 800a2a8:	fa01 f303 	lsl.w	r3, r1, r3
 800a2ac:	930d      	str	r3, [sp, #52]	; 0x34
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	9308      	str	r3, [sp, #32]
 800a2b2:	eb09 0802 	add.w	r8, r9, r2
 800a2b6:	9b04      	ldr	r3, [sp, #16]
 800a2b8:	45c1      	cmp	r9, r8
 800a2ba:	4417      	add	r7, r2
 800a2bc:	441f      	add	r7, r3
 800a2be:	464b      	mov	r3, r9
 800a2c0:	bfa8      	it	ge
 800a2c2:	4643      	movge	r3, r8
 800a2c4:	42bb      	cmp	r3, r7
 800a2c6:	bfa8      	it	ge
 800a2c8:	463b      	movge	r3, r7
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	bfc2      	ittt	gt
 800a2ce:	eba8 0803 	subgt.w	r8, r8, r3
 800a2d2:	1aff      	subgt	r7, r7, r3
 800a2d4:	eba9 0903 	subgt.w	r9, r9, r3
 800a2d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	dd17      	ble.n	800a30e <_strtod_l+0x75e>
 800a2de:	4631      	mov	r1, r6
 800a2e0:	461a      	mov	r2, r3
 800a2e2:	4620      	mov	r0, r4
 800a2e4:	f002 f802 	bl	800c2ec <__pow5mult>
 800a2e8:	4606      	mov	r6, r0
 800a2ea:	2800      	cmp	r0, #0
 800a2ec:	f43f aea8 	beq.w	800a040 <_strtod_l+0x490>
 800a2f0:	4601      	mov	r1, r0
 800a2f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a2f4:	4620      	mov	r0, r4
 800a2f6:	f001 ff4f 	bl	800c198 <__multiply>
 800a2fa:	900b      	str	r0, [sp, #44]	; 0x2c
 800a2fc:	2800      	cmp	r0, #0
 800a2fe:	f43f ae9f 	beq.w	800a040 <_strtod_l+0x490>
 800a302:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a304:	4620      	mov	r0, r4
 800a306:	f001 fe2f 	bl	800bf68 <_Bfree>
 800a30a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a30c:	9318      	str	r3, [sp, #96]	; 0x60
 800a30e:	f1b8 0f00 	cmp.w	r8, #0
 800a312:	f300 808c 	bgt.w	800a42e <_strtod_l+0x87e>
 800a316:	9b06      	ldr	r3, [sp, #24]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	dd08      	ble.n	800a32e <_strtod_l+0x77e>
 800a31c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a31e:	9905      	ldr	r1, [sp, #20]
 800a320:	4620      	mov	r0, r4
 800a322:	f001 ffe3 	bl	800c2ec <__pow5mult>
 800a326:	9005      	str	r0, [sp, #20]
 800a328:	2800      	cmp	r0, #0
 800a32a:	f43f ae89 	beq.w	800a040 <_strtod_l+0x490>
 800a32e:	2f00      	cmp	r7, #0
 800a330:	dd08      	ble.n	800a344 <_strtod_l+0x794>
 800a332:	9905      	ldr	r1, [sp, #20]
 800a334:	463a      	mov	r2, r7
 800a336:	4620      	mov	r0, r4
 800a338:	f002 f832 	bl	800c3a0 <__lshift>
 800a33c:	9005      	str	r0, [sp, #20]
 800a33e:	2800      	cmp	r0, #0
 800a340:	f43f ae7e 	beq.w	800a040 <_strtod_l+0x490>
 800a344:	f1b9 0f00 	cmp.w	r9, #0
 800a348:	dd08      	ble.n	800a35c <_strtod_l+0x7ac>
 800a34a:	4631      	mov	r1, r6
 800a34c:	464a      	mov	r2, r9
 800a34e:	4620      	mov	r0, r4
 800a350:	f002 f826 	bl	800c3a0 <__lshift>
 800a354:	4606      	mov	r6, r0
 800a356:	2800      	cmp	r0, #0
 800a358:	f43f ae72 	beq.w	800a040 <_strtod_l+0x490>
 800a35c:	9a05      	ldr	r2, [sp, #20]
 800a35e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a360:	4620      	mov	r0, r4
 800a362:	f002 f8a9 	bl	800c4b8 <__mdiff>
 800a366:	4605      	mov	r5, r0
 800a368:	2800      	cmp	r0, #0
 800a36a:	f43f ae69 	beq.w	800a040 <_strtod_l+0x490>
 800a36e:	68c3      	ldr	r3, [r0, #12]
 800a370:	930b      	str	r3, [sp, #44]	; 0x2c
 800a372:	2300      	movs	r3, #0
 800a374:	60c3      	str	r3, [r0, #12]
 800a376:	4631      	mov	r1, r6
 800a378:	f002 f882 	bl	800c480 <__mcmp>
 800a37c:	2800      	cmp	r0, #0
 800a37e:	da60      	bge.n	800a442 <_strtod_l+0x892>
 800a380:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a382:	ea53 030a 	orrs.w	r3, r3, sl
 800a386:	f040 8082 	bne.w	800a48e <_strtod_l+0x8de>
 800a38a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d17d      	bne.n	800a48e <_strtod_l+0x8de>
 800a392:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a396:	0d1b      	lsrs	r3, r3, #20
 800a398:	051b      	lsls	r3, r3, #20
 800a39a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a39e:	d976      	bls.n	800a48e <_strtod_l+0x8de>
 800a3a0:	696b      	ldr	r3, [r5, #20]
 800a3a2:	b913      	cbnz	r3, 800a3aa <_strtod_l+0x7fa>
 800a3a4:	692b      	ldr	r3, [r5, #16]
 800a3a6:	2b01      	cmp	r3, #1
 800a3a8:	dd71      	ble.n	800a48e <_strtod_l+0x8de>
 800a3aa:	4629      	mov	r1, r5
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	f001 fff6 	bl	800c3a0 <__lshift>
 800a3b4:	4631      	mov	r1, r6
 800a3b6:	4605      	mov	r5, r0
 800a3b8:	f002 f862 	bl	800c480 <__mcmp>
 800a3bc:	2800      	cmp	r0, #0
 800a3be:	dd66      	ble.n	800a48e <_strtod_l+0x8de>
 800a3c0:	9904      	ldr	r1, [sp, #16]
 800a3c2:	4a53      	ldr	r2, [pc, #332]	; (800a510 <_strtod_l+0x960>)
 800a3c4:	465b      	mov	r3, fp
 800a3c6:	2900      	cmp	r1, #0
 800a3c8:	f000 8081 	beq.w	800a4ce <_strtod_l+0x91e>
 800a3cc:	ea02 010b 	and.w	r1, r2, fp
 800a3d0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a3d4:	dc7b      	bgt.n	800a4ce <_strtod_l+0x91e>
 800a3d6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a3da:	f77f aea9 	ble.w	800a130 <_strtod_l+0x580>
 800a3de:	4b4d      	ldr	r3, [pc, #308]	; (800a514 <_strtod_l+0x964>)
 800a3e0:	4650      	mov	r0, sl
 800a3e2:	4659      	mov	r1, fp
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	f7f6 f90f 	bl	8000608 <__aeabi_dmul>
 800a3ea:	460b      	mov	r3, r1
 800a3ec:	4303      	orrs	r3, r0
 800a3ee:	bf08      	it	eq
 800a3f0:	2322      	moveq	r3, #34	; 0x22
 800a3f2:	4682      	mov	sl, r0
 800a3f4:	468b      	mov	fp, r1
 800a3f6:	bf08      	it	eq
 800a3f8:	6023      	streq	r3, [r4, #0]
 800a3fa:	e62b      	b.n	800a054 <_strtod_l+0x4a4>
 800a3fc:	f04f 32ff 	mov.w	r2, #4294967295
 800a400:	fa02 f303 	lsl.w	r3, r2, r3
 800a404:	ea03 0a0a 	and.w	sl, r3, sl
 800a408:	e6e3      	b.n	800a1d2 <_strtod_l+0x622>
 800a40a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a40e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a412:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a416:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a41a:	fa01 f308 	lsl.w	r3, r1, r8
 800a41e:	9308      	str	r3, [sp, #32]
 800a420:	910d      	str	r1, [sp, #52]	; 0x34
 800a422:	e746      	b.n	800a2b2 <_strtod_l+0x702>
 800a424:	2300      	movs	r3, #0
 800a426:	9308      	str	r3, [sp, #32]
 800a428:	2301      	movs	r3, #1
 800a42a:	930d      	str	r3, [sp, #52]	; 0x34
 800a42c:	e741      	b.n	800a2b2 <_strtod_l+0x702>
 800a42e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a430:	4642      	mov	r2, r8
 800a432:	4620      	mov	r0, r4
 800a434:	f001 ffb4 	bl	800c3a0 <__lshift>
 800a438:	9018      	str	r0, [sp, #96]	; 0x60
 800a43a:	2800      	cmp	r0, #0
 800a43c:	f47f af6b 	bne.w	800a316 <_strtod_l+0x766>
 800a440:	e5fe      	b.n	800a040 <_strtod_l+0x490>
 800a442:	465f      	mov	r7, fp
 800a444:	d16e      	bne.n	800a524 <_strtod_l+0x974>
 800a446:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a448:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a44c:	b342      	cbz	r2, 800a4a0 <_strtod_l+0x8f0>
 800a44e:	4a32      	ldr	r2, [pc, #200]	; (800a518 <_strtod_l+0x968>)
 800a450:	4293      	cmp	r3, r2
 800a452:	d128      	bne.n	800a4a6 <_strtod_l+0x8f6>
 800a454:	9b04      	ldr	r3, [sp, #16]
 800a456:	4651      	mov	r1, sl
 800a458:	b1eb      	cbz	r3, 800a496 <_strtod_l+0x8e6>
 800a45a:	4b2d      	ldr	r3, [pc, #180]	; (800a510 <_strtod_l+0x960>)
 800a45c:	403b      	ands	r3, r7
 800a45e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a462:	f04f 32ff 	mov.w	r2, #4294967295
 800a466:	d819      	bhi.n	800a49c <_strtod_l+0x8ec>
 800a468:	0d1b      	lsrs	r3, r3, #20
 800a46a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a46e:	fa02 f303 	lsl.w	r3, r2, r3
 800a472:	4299      	cmp	r1, r3
 800a474:	d117      	bne.n	800a4a6 <_strtod_l+0x8f6>
 800a476:	4b29      	ldr	r3, [pc, #164]	; (800a51c <_strtod_l+0x96c>)
 800a478:	429f      	cmp	r7, r3
 800a47a:	d102      	bne.n	800a482 <_strtod_l+0x8d2>
 800a47c:	3101      	adds	r1, #1
 800a47e:	f43f addf 	beq.w	800a040 <_strtod_l+0x490>
 800a482:	4b23      	ldr	r3, [pc, #140]	; (800a510 <_strtod_l+0x960>)
 800a484:	403b      	ands	r3, r7
 800a486:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a48a:	f04f 0a00 	mov.w	sl, #0
 800a48e:	9b04      	ldr	r3, [sp, #16]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d1a4      	bne.n	800a3de <_strtod_l+0x82e>
 800a494:	e5de      	b.n	800a054 <_strtod_l+0x4a4>
 800a496:	f04f 33ff 	mov.w	r3, #4294967295
 800a49a:	e7ea      	b.n	800a472 <_strtod_l+0x8c2>
 800a49c:	4613      	mov	r3, r2
 800a49e:	e7e8      	b.n	800a472 <_strtod_l+0x8c2>
 800a4a0:	ea53 030a 	orrs.w	r3, r3, sl
 800a4a4:	d08c      	beq.n	800a3c0 <_strtod_l+0x810>
 800a4a6:	9b08      	ldr	r3, [sp, #32]
 800a4a8:	b1db      	cbz	r3, 800a4e2 <_strtod_l+0x932>
 800a4aa:	423b      	tst	r3, r7
 800a4ac:	d0ef      	beq.n	800a48e <_strtod_l+0x8de>
 800a4ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4b0:	9a04      	ldr	r2, [sp, #16]
 800a4b2:	4650      	mov	r0, sl
 800a4b4:	4659      	mov	r1, fp
 800a4b6:	b1c3      	cbz	r3, 800a4ea <_strtod_l+0x93a>
 800a4b8:	f7ff fb5b 	bl	8009b72 <sulp>
 800a4bc:	4602      	mov	r2, r0
 800a4be:	460b      	mov	r3, r1
 800a4c0:	ec51 0b18 	vmov	r0, r1, d8
 800a4c4:	f7f5 feea 	bl	800029c <__adddf3>
 800a4c8:	4682      	mov	sl, r0
 800a4ca:	468b      	mov	fp, r1
 800a4cc:	e7df      	b.n	800a48e <_strtod_l+0x8de>
 800a4ce:	4013      	ands	r3, r2
 800a4d0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a4d4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a4d8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a4dc:	f04f 3aff 	mov.w	sl, #4294967295
 800a4e0:	e7d5      	b.n	800a48e <_strtod_l+0x8de>
 800a4e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4e4:	ea13 0f0a 	tst.w	r3, sl
 800a4e8:	e7e0      	b.n	800a4ac <_strtod_l+0x8fc>
 800a4ea:	f7ff fb42 	bl	8009b72 <sulp>
 800a4ee:	4602      	mov	r2, r0
 800a4f0:	460b      	mov	r3, r1
 800a4f2:	ec51 0b18 	vmov	r0, r1, d8
 800a4f6:	f7f5 fecf 	bl	8000298 <__aeabi_dsub>
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	4682      	mov	sl, r0
 800a500:	468b      	mov	fp, r1
 800a502:	f7f6 fae9 	bl	8000ad8 <__aeabi_dcmpeq>
 800a506:	2800      	cmp	r0, #0
 800a508:	d0c1      	beq.n	800a48e <_strtod_l+0x8de>
 800a50a:	e611      	b.n	800a130 <_strtod_l+0x580>
 800a50c:	fffffc02 	.word	0xfffffc02
 800a510:	7ff00000 	.word	0x7ff00000
 800a514:	39500000 	.word	0x39500000
 800a518:	000fffff 	.word	0x000fffff
 800a51c:	7fefffff 	.word	0x7fefffff
 800a520:	0800d518 	.word	0x0800d518
 800a524:	4631      	mov	r1, r6
 800a526:	4628      	mov	r0, r5
 800a528:	f002 f928 	bl	800c77c <__ratio>
 800a52c:	ec59 8b10 	vmov	r8, r9, d0
 800a530:	ee10 0a10 	vmov	r0, s0
 800a534:	2200      	movs	r2, #0
 800a536:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a53a:	4649      	mov	r1, r9
 800a53c:	f7f6 fae0 	bl	8000b00 <__aeabi_dcmple>
 800a540:	2800      	cmp	r0, #0
 800a542:	d07a      	beq.n	800a63a <_strtod_l+0xa8a>
 800a544:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a546:	2b00      	cmp	r3, #0
 800a548:	d04a      	beq.n	800a5e0 <_strtod_l+0xa30>
 800a54a:	4b95      	ldr	r3, [pc, #596]	; (800a7a0 <_strtod_l+0xbf0>)
 800a54c:	2200      	movs	r2, #0
 800a54e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a552:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a7a0 <_strtod_l+0xbf0>
 800a556:	f04f 0800 	mov.w	r8, #0
 800a55a:	4b92      	ldr	r3, [pc, #584]	; (800a7a4 <_strtod_l+0xbf4>)
 800a55c:	403b      	ands	r3, r7
 800a55e:	930d      	str	r3, [sp, #52]	; 0x34
 800a560:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a562:	4b91      	ldr	r3, [pc, #580]	; (800a7a8 <_strtod_l+0xbf8>)
 800a564:	429a      	cmp	r2, r3
 800a566:	f040 80b0 	bne.w	800a6ca <_strtod_l+0xb1a>
 800a56a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a56e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a572:	ec4b ab10 	vmov	d0, sl, fp
 800a576:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a57a:	f002 f827 	bl	800c5cc <__ulp>
 800a57e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a582:	ec53 2b10 	vmov	r2, r3, d0
 800a586:	f7f6 f83f 	bl	8000608 <__aeabi_dmul>
 800a58a:	4652      	mov	r2, sl
 800a58c:	465b      	mov	r3, fp
 800a58e:	f7f5 fe85 	bl	800029c <__adddf3>
 800a592:	460b      	mov	r3, r1
 800a594:	4983      	ldr	r1, [pc, #524]	; (800a7a4 <_strtod_l+0xbf4>)
 800a596:	4a85      	ldr	r2, [pc, #532]	; (800a7ac <_strtod_l+0xbfc>)
 800a598:	4019      	ands	r1, r3
 800a59a:	4291      	cmp	r1, r2
 800a59c:	4682      	mov	sl, r0
 800a59e:	d960      	bls.n	800a662 <_strtod_l+0xab2>
 800a5a0:	ee18 3a90 	vmov	r3, s17
 800a5a4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d104      	bne.n	800a5b6 <_strtod_l+0xa06>
 800a5ac:	ee18 3a10 	vmov	r3, s16
 800a5b0:	3301      	adds	r3, #1
 800a5b2:	f43f ad45 	beq.w	800a040 <_strtod_l+0x490>
 800a5b6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800a7b8 <_strtod_l+0xc08>
 800a5ba:	f04f 3aff 	mov.w	sl, #4294967295
 800a5be:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a5c0:	4620      	mov	r0, r4
 800a5c2:	f001 fcd1 	bl	800bf68 <_Bfree>
 800a5c6:	9905      	ldr	r1, [sp, #20]
 800a5c8:	4620      	mov	r0, r4
 800a5ca:	f001 fccd 	bl	800bf68 <_Bfree>
 800a5ce:	4631      	mov	r1, r6
 800a5d0:	4620      	mov	r0, r4
 800a5d2:	f001 fcc9 	bl	800bf68 <_Bfree>
 800a5d6:	4629      	mov	r1, r5
 800a5d8:	4620      	mov	r0, r4
 800a5da:	f001 fcc5 	bl	800bf68 <_Bfree>
 800a5de:	e61a      	b.n	800a216 <_strtod_l+0x666>
 800a5e0:	f1ba 0f00 	cmp.w	sl, #0
 800a5e4:	d11b      	bne.n	800a61e <_strtod_l+0xa6e>
 800a5e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a5ea:	b9f3      	cbnz	r3, 800a62a <_strtod_l+0xa7a>
 800a5ec:	4b6c      	ldr	r3, [pc, #432]	; (800a7a0 <_strtod_l+0xbf0>)
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	4640      	mov	r0, r8
 800a5f2:	4649      	mov	r1, r9
 800a5f4:	f7f6 fa7a 	bl	8000aec <__aeabi_dcmplt>
 800a5f8:	b9d0      	cbnz	r0, 800a630 <_strtod_l+0xa80>
 800a5fa:	4640      	mov	r0, r8
 800a5fc:	4649      	mov	r1, r9
 800a5fe:	4b6c      	ldr	r3, [pc, #432]	; (800a7b0 <_strtod_l+0xc00>)
 800a600:	2200      	movs	r2, #0
 800a602:	f7f6 f801 	bl	8000608 <__aeabi_dmul>
 800a606:	4680      	mov	r8, r0
 800a608:	4689      	mov	r9, r1
 800a60a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a60e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800a612:	9315      	str	r3, [sp, #84]	; 0x54
 800a614:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a618:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a61c:	e79d      	b.n	800a55a <_strtod_l+0x9aa>
 800a61e:	f1ba 0f01 	cmp.w	sl, #1
 800a622:	d102      	bne.n	800a62a <_strtod_l+0xa7a>
 800a624:	2f00      	cmp	r7, #0
 800a626:	f43f ad83 	beq.w	800a130 <_strtod_l+0x580>
 800a62a:	4b62      	ldr	r3, [pc, #392]	; (800a7b4 <_strtod_l+0xc04>)
 800a62c:	2200      	movs	r2, #0
 800a62e:	e78e      	b.n	800a54e <_strtod_l+0x99e>
 800a630:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a7b0 <_strtod_l+0xc00>
 800a634:	f04f 0800 	mov.w	r8, #0
 800a638:	e7e7      	b.n	800a60a <_strtod_l+0xa5a>
 800a63a:	4b5d      	ldr	r3, [pc, #372]	; (800a7b0 <_strtod_l+0xc00>)
 800a63c:	4640      	mov	r0, r8
 800a63e:	4649      	mov	r1, r9
 800a640:	2200      	movs	r2, #0
 800a642:	f7f5 ffe1 	bl	8000608 <__aeabi_dmul>
 800a646:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a648:	4680      	mov	r8, r0
 800a64a:	4689      	mov	r9, r1
 800a64c:	b933      	cbnz	r3, 800a65c <_strtod_l+0xaac>
 800a64e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a652:	900e      	str	r0, [sp, #56]	; 0x38
 800a654:	930f      	str	r3, [sp, #60]	; 0x3c
 800a656:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a65a:	e7dd      	b.n	800a618 <_strtod_l+0xa68>
 800a65c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800a660:	e7f9      	b.n	800a656 <_strtod_l+0xaa6>
 800a662:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a666:	9b04      	ldr	r3, [sp, #16]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d1a8      	bne.n	800a5be <_strtod_l+0xa0e>
 800a66c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a670:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a672:	0d1b      	lsrs	r3, r3, #20
 800a674:	051b      	lsls	r3, r3, #20
 800a676:	429a      	cmp	r2, r3
 800a678:	d1a1      	bne.n	800a5be <_strtod_l+0xa0e>
 800a67a:	4640      	mov	r0, r8
 800a67c:	4649      	mov	r1, r9
 800a67e:	f7f6 fb23 	bl	8000cc8 <__aeabi_d2lz>
 800a682:	f7f5 ff93 	bl	80005ac <__aeabi_l2d>
 800a686:	4602      	mov	r2, r0
 800a688:	460b      	mov	r3, r1
 800a68a:	4640      	mov	r0, r8
 800a68c:	4649      	mov	r1, r9
 800a68e:	f7f5 fe03 	bl	8000298 <__aeabi_dsub>
 800a692:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a694:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a698:	ea43 030a 	orr.w	r3, r3, sl
 800a69c:	4313      	orrs	r3, r2
 800a69e:	4680      	mov	r8, r0
 800a6a0:	4689      	mov	r9, r1
 800a6a2:	d055      	beq.n	800a750 <_strtod_l+0xba0>
 800a6a4:	a336      	add	r3, pc, #216	; (adr r3, 800a780 <_strtod_l+0xbd0>)
 800a6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6aa:	f7f6 fa1f 	bl	8000aec <__aeabi_dcmplt>
 800a6ae:	2800      	cmp	r0, #0
 800a6b0:	f47f acd0 	bne.w	800a054 <_strtod_l+0x4a4>
 800a6b4:	a334      	add	r3, pc, #208	; (adr r3, 800a788 <_strtod_l+0xbd8>)
 800a6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ba:	4640      	mov	r0, r8
 800a6bc:	4649      	mov	r1, r9
 800a6be:	f7f6 fa33 	bl	8000b28 <__aeabi_dcmpgt>
 800a6c2:	2800      	cmp	r0, #0
 800a6c4:	f43f af7b 	beq.w	800a5be <_strtod_l+0xa0e>
 800a6c8:	e4c4      	b.n	800a054 <_strtod_l+0x4a4>
 800a6ca:	9b04      	ldr	r3, [sp, #16]
 800a6cc:	b333      	cbz	r3, 800a71c <_strtod_l+0xb6c>
 800a6ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6d0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a6d4:	d822      	bhi.n	800a71c <_strtod_l+0xb6c>
 800a6d6:	a32e      	add	r3, pc, #184	; (adr r3, 800a790 <_strtod_l+0xbe0>)
 800a6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6dc:	4640      	mov	r0, r8
 800a6de:	4649      	mov	r1, r9
 800a6e0:	f7f6 fa0e 	bl	8000b00 <__aeabi_dcmple>
 800a6e4:	b1a0      	cbz	r0, 800a710 <_strtod_l+0xb60>
 800a6e6:	4649      	mov	r1, r9
 800a6e8:	4640      	mov	r0, r8
 800a6ea:	f7f6 fa65 	bl	8000bb8 <__aeabi_d2uiz>
 800a6ee:	2801      	cmp	r0, #1
 800a6f0:	bf38      	it	cc
 800a6f2:	2001      	movcc	r0, #1
 800a6f4:	f7f5 ff0e 	bl	8000514 <__aeabi_ui2d>
 800a6f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6fa:	4680      	mov	r8, r0
 800a6fc:	4689      	mov	r9, r1
 800a6fe:	bb23      	cbnz	r3, 800a74a <_strtod_l+0xb9a>
 800a700:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a704:	9010      	str	r0, [sp, #64]	; 0x40
 800a706:	9311      	str	r3, [sp, #68]	; 0x44
 800a708:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a70c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a712:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a714:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a718:	1a9b      	subs	r3, r3, r2
 800a71a:	9309      	str	r3, [sp, #36]	; 0x24
 800a71c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a720:	eeb0 0a48 	vmov.f32	s0, s16
 800a724:	eef0 0a68 	vmov.f32	s1, s17
 800a728:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a72c:	f001 ff4e 	bl	800c5cc <__ulp>
 800a730:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a734:	ec53 2b10 	vmov	r2, r3, d0
 800a738:	f7f5 ff66 	bl	8000608 <__aeabi_dmul>
 800a73c:	ec53 2b18 	vmov	r2, r3, d8
 800a740:	f7f5 fdac 	bl	800029c <__adddf3>
 800a744:	4682      	mov	sl, r0
 800a746:	468b      	mov	fp, r1
 800a748:	e78d      	b.n	800a666 <_strtod_l+0xab6>
 800a74a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800a74e:	e7db      	b.n	800a708 <_strtod_l+0xb58>
 800a750:	a311      	add	r3, pc, #68	; (adr r3, 800a798 <_strtod_l+0xbe8>)
 800a752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a756:	f7f6 f9c9 	bl	8000aec <__aeabi_dcmplt>
 800a75a:	e7b2      	b.n	800a6c2 <_strtod_l+0xb12>
 800a75c:	2300      	movs	r3, #0
 800a75e:	930a      	str	r3, [sp, #40]	; 0x28
 800a760:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a762:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a764:	6013      	str	r3, [r2, #0]
 800a766:	f7ff ba6b 	b.w	8009c40 <_strtod_l+0x90>
 800a76a:	2a65      	cmp	r2, #101	; 0x65
 800a76c:	f43f ab5f 	beq.w	8009e2e <_strtod_l+0x27e>
 800a770:	2a45      	cmp	r2, #69	; 0x45
 800a772:	f43f ab5c 	beq.w	8009e2e <_strtod_l+0x27e>
 800a776:	2301      	movs	r3, #1
 800a778:	f7ff bb94 	b.w	8009ea4 <_strtod_l+0x2f4>
 800a77c:	f3af 8000 	nop.w
 800a780:	94a03595 	.word	0x94a03595
 800a784:	3fdfffff 	.word	0x3fdfffff
 800a788:	35afe535 	.word	0x35afe535
 800a78c:	3fe00000 	.word	0x3fe00000
 800a790:	ffc00000 	.word	0xffc00000
 800a794:	41dfffff 	.word	0x41dfffff
 800a798:	94a03595 	.word	0x94a03595
 800a79c:	3fcfffff 	.word	0x3fcfffff
 800a7a0:	3ff00000 	.word	0x3ff00000
 800a7a4:	7ff00000 	.word	0x7ff00000
 800a7a8:	7fe00000 	.word	0x7fe00000
 800a7ac:	7c9fffff 	.word	0x7c9fffff
 800a7b0:	3fe00000 	.word	0x3fe00000
 800a7b4:	bff00000 	.word	0xbff00000
 800a7b8:	7fefffff 	.word	0x7fefffff

0800a7bc <_strtod_r>:
 800a7bc:	4b01      	ldr	r3, [pc, #4]	; (800a7c4 <_strtod_r+0x8>)
 800a7be:	f7ff b9f7 	b.w	8009bb0 <_strtod_l>
 800a7c2:	bf00      	nop
 800a7c4:	20000088 	.word	0x20000088

0800a7c8 <_strtol_l.constprop.0>:
 800a7c8:	2b01      	cmp	r3, #1
 800a7ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7ce:	d001      	beq.n	800a7d4 <_strtol_l.constprop.0+0xc>
 800a7d0:	2b24      	cmp	r3, #36	; 0x24
 800a7d2:	d906      	bls.n	800a7e2 <_strtol_l.constprop.0+0x1a>
 800a7d4:	f7fe f8a2 	bl	800891c <__errno>
 800a7d8:	2316      	movs	r3, #22
 800a7da:	6003      	str	r3, [r0, #0]
 800a7dc:	2000      	movs	r0, #0
 800a7de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7e2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a8c8 <_strtol_l.constprop.0+0x100>
 800a7e6:	460d      	mov	r5, r1
 800a7e8:	462e      	mov	r6, r5
 800a7ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7ee:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a7f2:	f017 0708 	ands.w	r7, r7, #8
 800a7f6:	d1f7      	bne.n	800a7e8 <_strtol_l.constprop.0+0x20>
 800a7f8:	2c2d      	cmp	r4, #45	; 0x2d
 800a7fa:	d132      	bne.n	800a862 <_strtol_l.constprop.0+0x9a>
 800a7fc:	782c      	ldrb	r4, [r5, #0]
 800a7fe:	2701      	movs	r7, #1
 800a800:	1cb5      	adds	r5, r6, #2
 800a802:	2b00      	cmp	r3, #0
 800a804:	d05b      	beq.n	800a8be <_strtol_l.constprop.0+0xf6>
 800a806:	2b10      	cmp	r3, #16
 800a808:	d109      	bne.n	800a81e <_strtol_l.constprop.0+0x56>
 800a80a:	2c30      	cmp	r4, #48	; 0x30
 800a80c:	d107      	bne.n	800a81e <_strtol_l.constprop.0+0x56>
 800a80e:	782c      	ldrb	r4, [r5, #0]
 800a810:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a814:	2c58      	cmp	r4, #88	; 0x58
 800a816:	d14d      	bne.n	800a8b4 <_strtol_l.constprop.0+0xec>
 800a818:	786c      	ldrb	r4, [r5, #1]
 800a81a:	2310      	movs	r3, #16
 800a81c:	3502      	adds	r5, #2
 800a81e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a822:	f108 38ff 	add.w	r8, r8, #4294967295
 800a826:	f04f 0c00 	mov.w	ip, #0
 800a82a:	fbb8 f9f3 	udiv	r9, r8, r3
 800a82e:	4666      	mov	r6, ip
 800a830:	fb03 8a19 	mls	sl, r3, r9, r8
 800a834:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a838:	f1be 0f09 	cmp.w	lr, #9
 800a83c:	d816      	bhi.n	800a86c <_strtol_l.constprop.0+0xa4>
 800a83e:	4674      	mov	r4, lr
 800a840:	42a3      	cmp	r3, r4
 800a842:	dd24      	ble.n	800a88e <_strtol_l.constprop.0+0xc6>
 800a844:	f1bc 0f00 	cmp.w	ip, #0
 800a848:	db1e      	blt.n	800a888 <_strtol_l.constprop.0+0xc0>
 800a84a:	45b1      	cmp	r9, r6
 800a84c:	d31c      	bcc.n	800a888 <_strtol_l.constprop.0+0xc0>
 800a84e:	d101      	bne.n	800a854 <_strtol_l.constprop.0+0x8c>
 800a850:	45a2      	cmp	sl, r4
 800a852:	db19      	blt.n	800a888 <_strtol_l.constprop.0+0xc0>
 800a854:	fb06 4603 	mla	r6, r6, r3, r4
 800a858:	f04f 0c01 	mov.w	ip, #1
 800a85c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a860:	e7e8      	b.n	800a834 <_strtol_l.constprop.0+0x6c>
 800a862:	2c2b      	cmp	r4, #43	; 0x2b
 800a864:	bf04      	itt	eq
 800a866:	782c      	ldrbeq	r4, [r5, #0]
 800a868:	1cb5      	addeq	r5, r6, #2
 800a86a:	e7ca      	b.n	800a802 <_strtol_l.constprop.0+0x3a>
 800a86c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a870:	f1be 0f19 	cmp.w	lr, #25
 800a874:	d801      	bhi.n	800a87a <_strtol_l.constprop.0+0xb2>
 800a876:	3c37      	subs	r4, #55	; 0x37
 800a878:	e7e2      	b.n	800a840 <_strtol_l.constprop.0+0x78>
 800a87a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a87e:	f1be 0f19 	cmp.w	lr, #25
 800a882:	d804      	bhi.n	800a88e <_strtol_l.constprop.0+0xc6>
 800a884:	3c57      	subs	r4, #87	; 0x57
 800a886:	e7db      	b.n	800a840 <_strtol_l.constprop.0+0x78>
 800a888:	f04f 3cff 	mov.w	ip, #4294967295
 800a88c:	e7e6      	b.n	800a85c <_strtol_l.constprop.0+0x94>
 800a88e:	f1bc 0f00 	cmp.w	ip, #0
 800a892:	da05      	bge.n	800a8a0 <_strtol_l.constprop.0+0xd8>
 800a894:	2322      	movs	r3, #34	; 0x22
 800a896:	6003      	str	r3, [r0, #0]
 800a898:	4646      	mov	r6, r8
 800a89a:	b942      	cbnz	r2, 800a8ae <_strtol_l.constprop.0+0xe6>
 800a89c:	4630      	mov	r0, r6
 800a89e:	e79e      	b.n	800a7de <_strtol_l.constprop.0+0x16>
 800a8a0:	b107      	cbz	r7, 800a8a4 <_strtol_l.constprop.0+0xdc>
 800a8a2:	4276      	negs	r6, r6
 800a8a4:	2a00      	cmp	r2, #0
 800a8a6:	d0f9      	beq.n	800a89c <_strtol_l.constprop.0+0xd4>
 800a8a8:	f1bc 0f00 	cmp.w	ip, #0
 800a8ac:	d000      	beq.n	800a8b0 <_strtol_l.constprop.0+0xe8>
 800a8ae:	1e69      	subs	r1, r5, #1
 800a8b0:	6011      	str	r1, [r2, #0]
 800a8b2:	e7f3      	b.n	800a89c <_strtol_l.constprop.0+0xd4>
 800a8b4:	2430      	movs	r4, #48	; 0x30
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d1b1      	bne.n	800a81e <_strtol_l.constprop.0+0x56>
 800a8ba:	2308      	movs	r3, #8
 800a8bc:	e7af      	b.n	800a81e <_strtol_l.constprop.0+0x56>
 800a8be:	2c30      	cmp	r4, #48	; 0x30
 800a8c0:	d0a5      	beq.n	800a80e <_strtol_l.constprop.0+0x46>
 800a8c2:	230a      	movs	r3, #10
 800a8c4:	e7ab      	b.n	800a81e <_strtol_l.constprop.0+0x56>
 800a8c6:	bf00      	nop
 800a8c8:	0800d541 	.word	0x0800d541

0800a8cc <_strtol_r>:
 800a8cc:	f7ff bf7c 	b.w	800a7c8 <_strtol_l.constprop.0>

0800a8d0 <_write_r>:
 800a8d0:	b538      	push	{r3, r4, r5, lr}
 800a8d2:	4d07      	ldr	r5, [pc, #28]	; (800a8f0 <_write_r+0x20>)
 800a8d4:	4604      	mov	r4, r0
 800a8d6:	4608      	mov	r0, r1
 800a8d8:	4611      	mov	r1, r2
 800a8da:	2200      	movs	r2, #0
 800a8dc:	602a      	str	r2, [r5, #0]
 800a8de:	461a      	mov	r2, r3
 800a8e0:	f7f8 fa0b 	bl	8002cfa <_write>
 800a8e4:	1c43      	adds	r3, r0, #1
 800a8e6:	d102      	bne.n	800a8ee <_write_r+0x1e>
 800a8e8:	682b      	ldr	r3, [r5, #0]
 800a8ea:	b103      	cbz	r3, 800a8ee <_write_r+0x1e>
 800a8ec:	6023      	str	r3, [r4, #0]
 800a8ee:	bd38      	pop	{r3, r4, r5, pc}
 800a8f0:	20004528 	.word	0x20004528

0800a8f4 <_close_r>:
 800a8f4:	b538      	push	{r3, r4, r5, lr}
 800a8f6:	4d06      	ldr	r5, [pc, #24]	; (800a910 <_close_r+0x1c>)
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	4604      	mov	r4, r0
 800a8fc:	4608      	mov	r0, r1
 800a8fe:	602b      	str	r3, [r5, #0]
 800a900:	f7f8 fa17 	bl	8002d32 <_close>
 800a904:	1c43      	adds	r3, r0, #1
 800a906:	d102      	bne.n	800a90e <_close_r+0x1a>
 800a908:	682b      	ldr	r3, [r5, #0]
 800a90a:	b103      	cbz	r3, 800a90e <_close_r+0x1a>
 800a90c:	6023      	str	r3, [r4, #0]
 800a90e:	bd38      	pop	{r3, r4, r5, pc}
 800a910:	20004528 	.word	0x20004528

0800a914 <quorem>:
 800a914:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a918:	6903      	ldr	r3, [r0, #16]
 800a91a:	690c      	ldr	r4, [r1, #16]
 800a91c:	42a3      	cmp	r3, r4
 800a91e:	4607      	mov	r7, r0
 800a920:	f2c0 8081 	blt.w	800aa26 <quorem+0x112>
 800a924:	3c01      	subs	r4, #1
 800a926:	f101 0814 	add.w	r8, r1, #20
 800a92a:	f100 0514 	add.w	r5, r0, #20
 800a92e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a932:	9301      	str	r3, [sp, #4]
 800a934:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a938:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a93c:	3301      	adds	r3, #1
 800a93e:	429a      	cmp	r2, r3
 800a940:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a944:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a948:	fbb2 f6f3 	udiv	r6, r2, r3
 800a94c:	d331      	bcc.n	800a9b2 <quorem+0x9e>
 800a94e:	f04f 0e00 	mov.w	lr, #0
 800a952:	4640      	mov	r0, r8
 800a954:	46ac      	mov	ip, r5
 800a956:	46f2      	mov	sl, lr
 800a958:	f850 2b04 	ldr.w	r2, [r0], #4
 800a95c:	b293      	uxth	r3, r2
 800a95e:	fb06 e303 	mla	r3, r6, r3, lr
 800a962:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a966:	b29b      	uxth	r3, r3
 800a968:	ebaa 0303 	sub.w	r3, sl, r3
 800a96c:	f8dc a000 	ldr.w	sl, [ip]
 800a970:	0c12      	lsrs	r2, r2, #16
 800a972:	fa13 f38a 	uxtah	r3, r3, sl
 800a976:	fb06 e202 	mla	r2, r6, r2, lr
 800a97a:	9300      	str	r3, [sp, #0]
 800a97c:	9b00      	ldr	r3, [sp, #0]
 800a97e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a982:	b292      	uxth	r2, r2
 800a984:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a988:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a98c:	f8bd 3000 	ldrh.w	r3, [sp]
 800a990:	4581      	cmp	r9, r0
 800a992:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a996:	f84c 3b04 	str.w	r3, [ip], #4
 800a99a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a99e:	d2db      	bcs.n	800a958 <quorem+0x44>
 800a9a0:	f855 300b 	ldr.w	r3, [r5, fp]
 800a9a4:	b92b      	cbnz	r3, 800a9b2 <quorem+0x9e>
 800a9a6:	9b01      	ldr	r3, [sp, #4]
 800a9a8:	3b04      	subs	r3, #4
 800a9aa:	429d      	cmp	r5, r3
 800a9ac:	461a      	mov	r2, r3
 800a9ae:	d32e      	bcc.n	800aa0e <quorem+0xfa>
 800a9b0:	613c      	str	r4, [r7, #16]
 800a9b2:	4638      	mov	r0, r7
 800a9b4:	f001 fd64 	bl	800c480 <__mcmp>
 800a9b8:	2800      	cmp	r0, #0
 800a9ba:	db24      	blt.n	800aa06 <quorem+0xf2>
 800a9bc:	3601      	adds	r6, #1
 800a9be:	4628      	mov	r0, r5
 800a9c0:	f04f 0c00 	mov.w	ip, #0
 800a9c4:	f858 2b04 	ldr.w	r2, [r8], #4
 800a9c8:	f8d0 e000 	ldr.w	lr, [r0]
 800a9cc:	b293      	uxth	r3, r2
 800a9ce:	ebac 0303 	sub.w	r3, ip, r3
 800a9d2:	0c12      	lsrs	r2, r2, #16
 800a9d4:	fa13 f38e 	uxtah	r3, r3, lr
 800a9d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a9dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a9e0:	b29b      	uxth	r3, r3
 800a9e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a9e6:	45c1      	cmp	r9, r8
 800a9e8:	f840 3b04 	str.w	r3, [r0], #4
 800a9ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a9f0:	d2e8      	bcs.n	800a9c4 <quorem+0xb0>
 800a9f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a9f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a9fa:	b922      	cbnz	r2, 800aa06 <quorem+0xf2>
 800a9fc:	3b04      	subs	r3, #4
 800a9fe:	429d      	cmp	r5, r3
 800aa00:	461a      	mov	r2, r3
 800aa02:	d30a      	bcc.n	800aa1a <quorem+0x106>
 800aa04:	613c      	str	r4, [r7, #16]
 800aa06:	4630      	mov	r0, r6
 800aa08:	b003      	add	sp, #12
 800aa0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa0e:	6812      	ldr	r2, [r2, #0]
 800aa10:	3b04      	subs	r3, #4
 800aa12:	2a00      	cmp	r2, #0
 800aa14:	d1cc      	bne.n	800a9b0 <quorem+0x9c>
 800aa16:	3c01      	subs	r4, #1
 800aa18:	e7c7      	b.n	800a9aa <quorem+0x96>
 800aa1a:	6812      	ldr	r2, [r2, #0]
 800aa1c:	3b04      	subs	r3, #4
 800aa1e:	2a00      	cmp	r2, #0
 800aa20:	d1f0      	bne.n	800aa04 <quorem+0xf0>
 800aa22:	3c01      	subs	r4, #1
 800aa24:	e7eb      	b.n	800a9fe <quorem+0xea>
 800aa26:	2000      	movs	r0, #0
 800aa28:	e7ee      	b.n	800aa08 <quorem+0xf4>
 800aa2a:	0000      	movs	r0, r0
 800aa2c:	0000      	movs	r0, r0
	...

0800aa30 <_dtoa_r>:
 800aa30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa34:	ed2d 8b04 	vpush	{d8-d9}
 800aa38:	ec57 6b10 	vmov	r6, r7, d0
 800aa3c:	b093      	sub	sp, #76	; 0x4c
 800aa3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aa40:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800aa44:	9106      	str	r1, [sp, #24]
 800aa46:	ee10 aa10 	vmov	sl, s0
 800aa4a:	4604      	mov	r4, r0
 800aa4c:	9209      	str	r2, [sp, #36]	; 0x24
 800aa4e:	930c      	str	r3, [sp, #48]	; 0x30
 800aa50:	46bb      	mov	fp, r7
 800aa52:	b975      	cbnz	r5, 800aa72 <_dtoa_r+0x42>
 800aa54:	2010      	movs	r0, #16
 800aa56:	f001 fa21 	bl	800be9c <malloc>
 800aa5a:	4602      	mov	r2, r0
 800aa5c:	6260      	str	r0, [r4, #36]	; 0x24
 800aa5e:	b920      	cbnz	r0, 800aa6a <_dtoa_r+0x3a>
 800aa60:	4ba7      	ldr	r3, [pc, #668]	; (800ad00 <_dtoa_r+0x2d0>)
 800aa62:	21ea      	movs	r1, #234	; 0xea
 800aa64:	48a7      	ldr	r0, [pc, #668]	; (800ad04 <_dtoa_r+0x2d4>)
 800aa66:	f002 f8fd 	bl	800cc64 <__assert_func>
 800aa6a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aa6e:	6005      	str	r5, [r0, #0]
 800aa70:	60c5      	str	r5, [r0, #12]
 800aa72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa74:	6819      	ldr	r1, [r3, #0]
 800aa76:	b151      	cbz	r1, 800aa8e <_dtoa_r+0x5e>
 800aa78:	685a      	ldr	r2, [r3, #4]
 800aa7a:	604a      	str	r2, [r1, #4]
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	4093      	lsls	r3, r2
 800aa80:	608b      	str	r3, [r1, #8]
 800aa82:	4620      	mov	r0, r4
 800aa84:	f001 fa70 	bl	800bf68 <_Bfree>
 800aa88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	601a      	str	r2, [r3, #0]
 800aa8e:	1e3b      	subs	r3, r7, #0
 800aa90:	bfaa      	itet	ge
 800aa92:	2300      	movge	r3, #0
 800aa94:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800aa98:	f8c8 3000 	strge.w	r3, [r8]
 800aa9c:	4b9a      	ldr	r3, [pc, #616]	; (800ad08 <_dtoa_r+0x2d8>)
 800aa9e:	bfbc      	itt	lt
 800aaa0:	2201      	movlt	r2, #1
 800aaa2:	f8c8 2000 	strlt.w	r2, [r8]
 800aaa6:	ea33 030b 	bics.w	r3, r3, fp
 800aaaa:	d11b      	bne.n	800aae4 <_dtoa_r+0xb4>
 800aaac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aaae:	f242 730f 	movw	r3, #9999	; 0x270f
 800aab2:	6013      	str	r3, [r2, #0]
 800aab4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aab8:	4333      	orrs	r3, r6
 800aaba:	f000 8592 	beq.w	800b5e2 <_dtoa_r+0xbb2>
 800aabe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aac0:	b963      	cbnz	r3, 800aadc <_dtoa_r+0xac>
 800aac2:	4b92      	ldr	r3, [pc, #584]	; (800ad0c <_dtoa_r+0x2dc>)
 800aac4:	e022      	b.n	800ab0c <_dtoa_r+0xdc>
 800aac6:	4b92      	ldr	r3, [pc, #584]	; (800ad10 <_dtoa_r+0x2e0>)
 800aac8:	9301      	str	r3, [sp, #4]
 800aaca:	3308      	adds	r3, #8
 800aacc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aace:	6013      	str	r3, [r2, #0]
 800aad0:	9801      	ldr	r0, [sp, #4]
 800aad2:	b013      	add	sp, #76	; 0x4c
 800aad4:	ecbd 8b04 	vpop	{d8-d9}
 800aad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aadc:	4b8b      	ldr	r3, [pc, #556]	; (800ad0c <_dtoa_r+0x2dc>)
 800aade:	9301      	str	r3, [sp, #4]
 800aae0:	3303      	adds	r3, #3
 800aae2:	e7f3      	b.n	800aacc <_dtoa_r+0x9c>
 800aae4:	2200      	movs	r2, #0
 800aae6:	2300      	movs	r3, #0
 800aae8:	4650      	mov	r0, sl
 800aaea:	4659      	mov	r1, fp
 800aaec:	f7f5 fff4 	bl	8000ad8 <__aeabi_dcmpeq>
 800aaf0:	ec4b ab19 	vmov	d9, sl, fp
 800aaf4:	4680      	mov	r8, r0
 800aaf6:	b158      	cbz	r0, 800ab10 <_dtoa_r+0xe0>
 800aaf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aafa:	2301      	movs	r3, #1
 800aafc:	6013      	str	r3, [r2, #0]
 800aafe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	f000 856b 	beq.w	800b5dc <_dtoa_r+0xbac>
 800ab06:	4883      	ldr	r0, [pc, #524]	; (800ad14 <_dtoa_r+0x2e4>)
 800ab08:	6018      	str	r0, [r3, #0]
 800ab0a:	1e43      	subs	r3, r0, #1
 800ab0c:	9301      	str	r3, [sp, #4]
 800ab0e:	e7df      	b.n	800aad0 <_dtoa_r+0xa0>
 800ab10:	ec4b ab10 	vmov	d0, sl, fp
 800ab14:	aa10      	add	r2, sp, #64	; 0x40
 800ab16:	a911      	add	r1, sp, #68	; 0x44
 800ab18:	4620      	mov	r0, r4
 800ab1a:	f001 fdd3 	bl	800c6c4 <__d2b>
 800ab1e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ab22:	ee08 0a10 	vmov	s16, r0
 800ab26:	2d00      	cmp	r5, #0
 800ab28:	f000 8084 	beq.w	800ac34 <_dtoa_r+0x204>
 800ab2c:	ee19 3a90 	vmov	r3, s19
 800ab30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab34:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ab38:	4656      	mov	r6, sl
 800ab3a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ab3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ab42:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ab46:	4b74      	ldr	r3, [pc, #464]	; (800ad18 <_dtoa_r+0x2e8>)
 800ab48:	2200      	movs	r2, #0
 800ab4a:	4630      	mov	r0, r6
 800ab4c:	4639      	mov	r1, r7
 800ab4e:	f7f5 fba3 	bl	8000298 <__aeabi_dsub>
 800ab52:	a365      	add	r3, pc, #404	; (adr r3, 800ace8 <_dtoa_r+0x2b8>)
 800ab54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab58:	f7f5 fd56 	bl	8000608 <__aeabi_dmul>
 800ab5c:	a364      	add	r3, pc, #400	; (adr r3, 800acf0 <_dtoa_r+0x2c0>)
 800ab5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab62:	f7f5 fb9b 	bl	800029c <__adddf3>
 800ab66:	4606      	mov	r6, r0
 800ab68:	4628      	mov	r0, r5
 800ab6a:	460f      	mov	r7, r1
 800ab6c:	f7f5 fce2 	bl	8000534 <__aeabi_i2d>
 800ab70:	a361      	add	r3, pc, #388	; (adr r3, 800acf8 <_dtoa_r+0x2c8>)
 800ab72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab76:	f7f5 fd47 	bl	8000608 <__aeabi_dmul>
 800ab7a:	4602      	mov	r2, r0
 800ab7c:	460b      	mov	r3, r1
 800ab7e:	4630      	mov	r0, r6
 800ab80:	4639      	mov	r1, r7
 800ab82:	f7f5 fb8b 	bl	800029c <__adddf3>
 800ab86:	4606      	mov	r6, r0
 800ab88:	460f      	mov	r7, r1
 800ab8a:	f7f5 ffed 	bl	8000b68 <__aeabi_d2iz>
 800ab8e:	2200      	movs	r2, #0
 800ab90:	9000      	str	r0, [sp, #0]
 800ab92:	2300      	movs	r3, #0
 800ab94:	4630      	mov	r0, r6
 800ab96:	4639      	mov	r1, r7
 800ab98:	f7f5 ffa8 	bl	8000aec <__aeabi_dcmplt>
 800ab9c:	b150      	cbz	r0, 800abb4 <_dtoa_r+0x184>
 800ab9e:	9800      	ldr	r0, [sp, #0]
 800aba0:	f7f5 fcc8 	bl	8000534 <__aeabi_i2d>
 800aba4:	4632      	mov	r2, r6
 800aba6:	463b      	mov	r3, r7
 800aba8:	f7f5 ff96 	bl	8000ad8 <__aeabi_dcmpeq>
 800abac:	b910      	cbnz	r0, 800abb4 <_dtoa_r+0x184>
 800abae:	9b00      	ldr	r3, [sp, #0]
 800abb0:	3b01      	subs	r3, #1
 800abb2:	9300      	str	r3, [sp, #0]
 800abb4:	9b00      	ldr	r3, [sp, #0]
 800abb6:	2b16      	cmp	r3, #22
 800abb8:	d85a      	bhi.n	800ac70 <_dtoa_r+0x240>
 800abba:	9a00      	ldr	r2, [sp, #0]
 800abbc:	4b57      	ldr	r3, [pc, #348]	; (800ad1c <_dtoa_r+0x2ec>)
 800abbe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc6:	ec51 0b19 	vmov	r0, r1, d9
 800abca:	f7f5 ff8f 	bl	8000aec <__aeabi_dcmplt>
 800abce:	2800      	cmp	r0, #0
 800abd0:	d050      	beq.n	800ac74 <_dtoa_r+0x244>
 800abd2:	9b00      	ldr	r3, [sp, #0]
 800abd4:	3b01      	subs	r3, #1
 800abd6:	9300      	str	r3, [sp, #0]
 800abd8:	2300      	movs	r3, #0
 800abda:	930b      	str	r3, [sp, #44]	; 0x2c
 800abdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800abde:	1b5d      	subs	r5, r3, r5
 800abe0:	1e6b      	subs	r3, r5, #1
 800abe2:	9305      	str	r3, [sp, #20]
 800abe4:	bf45      	ittet	mi
 800abe6:	f1c5 0301 	rsbmi	r3, r5, #1
 800abea:	9304      	strmi	r3, [sp, #16]
 800abec:	2300      	movpl	r3, #0
 800abee:	2300      	movmi	r3, #0
 800abf0:	bf4c      	ite	mi
 800abf2:	9305      	strmi	r3, [sp, #20]
 800abf4:	9304      	strpl	r3, [sp, #16]
 800abf6:	9b00      	ldr	r3, [sp, #0]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	db3d      	blt.n	800ac78 <_dtoa_r+0x248>
 800abfc:	9b05      	ldr	r3, [sp, #20]
 800abfe:	9a00      	ldr	r2, [sp, #0]
 800ac00:	920a      	str	r2, [sp, #40]	; 0x28
 800ac02:	4413      	add	r3, r2
 800ac04:	9305      	str	r3, [sp, #20]
 800ac06:	2300      	movs	r3, #0
 800ac08:	9307      	str	r3, [sp, #28]
 800ac0a:	9b06      	ldr	r3, [sp, #24]
 800ac0c:	2b09      	cmp	r3, #9
 800ac0e:	f200 8089 	bhi.w	800ad24 <_dtoa_r+0x2f4>
 800ac12:	2b05      	cmp	r3, #5
 800ac14:	bfc4      	itt	gt
 800ac16:	3b04      	subgt	r3, #4
 800ac18:	9306      	strgt	r3, [sp, #24]
 800ac1a:	9b06      	ldr	r3, [sp, #24]
 800ac1c:	f1a3 0302 	sub.w	r3, r3, #2
 800ac20:	bfcc      	ite	gt
 800ac22:	2500      	movgt	r5, #0
 800ac24:	2501      	movle	r5, #1
 800ac26:	2b03      	cmp	r3, #3
 800ac28:	f200 8087 	bhi.w	800ad3a <_dtoa_r+0x30a>
 800ac2c:	e8df f003 	tbb	[pc, r3]
 800ac30:	59383a2d 	.word	0x59383a2d
 800ac34:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ac38:	441d      	add	r5, r3
 800ac3a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ac3e:	2b20      	cmp	r3, #32
 800ac40:	bfc1      	itttt	gt
 800ac42:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ac46:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ac4a:	fa0b f303 	lslgt.w	r3, fp, r3
 800ac4e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ac52:	bfda      	itte	le
 800ac54:	f1c3 0320 	rsble	r3, r3, #32
 800ac58:	fa06 f003 	lslle.w	r0, r6, r3
 800ac5c:	4318      	orrgt	r0, r3
 800ac5e:	f7f5 fc59 	bl	8000514 <__aeabi_ui2d>
 800ac62:	2301      	movs	r3, #1
 800ac64:	4606      	mov	r6, r0
 800ac66:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ac6a:	3d01      	subs	r5, #1
 800ac6c:	930e      	str	r3, [sp, #56]	; 0x38
 800ac6e:	e76a      	b.n	800ab46 <_dtoa_r+0x116>
 800ac70:	2301      	movs	r3, #1
 800ac72:	e7b2      	b.n	800abda <_dtoa_r+0x1aa>
 800ac74:	900b      	str	r0, [sp, #44]	; 0x2c
 800ac76:	e7b1      	b.n	800abdc <_dtoa_r+0x1ac>
 800ac78:	9b04      	ldr	r3, [sp, #16]
 800ac7a:	9a00      	ldr	r2, [sp, #0]
 800ac7c:	1a9b      	subs	r3, r3, r2
 800ac7e:	9304      	str	r3, [sp, #16]
 800ac80:	4253      	negs	r3, r2
 800ac82:	9307      	str	r3, [sp, #28]
 800ac84:	2300      	movs	r3, #0
 800ac86:	930a      	str	r3, [sp, #40]	; 0x28
 800ac88:	e7bf      	b.n	800ac0a <_dtoa_r+0x1da>
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	9308      	str	r3, [sp, #32]
 800ac8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	dc55      	bgt.n	800ad40 <_dtoa_r+0x310>
 800ac94:	2301      	movs	r3, #1
 800ac96:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ac9a:	461a      	mov	r2, r3
 800ac9c:	9209      	str	r2, [sp, #36]	; 0x24
 800ac9e:	e00c      	b.n	800acba <_dtoa_r+0x28a>
 800aca0:	2301      	movs	r3, #1
 800aca2:	e7f3      	b.n	800ac8c <_dtoa_r+0x25c>
 800aca4:	2300      	movs	r3, #0
 800aca6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aca8:	9308      	str	r3, [sp, #32]
 800acaa:	9b00      	ldr	r3, [sp, #0]
 800acac:	4413      	add	r3, r2
 800acae:	9302      	str	r3, [sp, #8]
 800acb0:	3301      	adds	r3, #1
 800acb2:	2b01      	cmp	r3, #1
 800acb4:	9303      	str	r3, [sp, #12]
 800acb6:	bfb8      	it	lt
 800acb8:	2301      	movlt	r3, #1
 800acba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800acbc:	2200      	movs	r2, #0
 800acbe:	6042      	str	r2, [r0, #4]
 800acc0:	2204      	movs	r2, #4
 800acc2:	f102 0614 	add.w	r6, r2, #20
 800acc6:	429e      	cmp	r6, r3
 800acc8:	6841      	ldr	r1, [r0, #4]
 800acca:	d93d      	bls.n	800ad48 <_dtoa_r+0x318>
 800accc:	4620      	mov	r0, r4
 800acce:	f001 f90b 	bl	800bee8 <_Balloc>
 800acd2:	9001      	str	r0, [sp, #4]
 800acd4:	2800      	cmp	r0, #0
 800acd6:	d13b      	bne.n	800ad50 <_dtoa_r+0x320>
 800acd8:	4b11      	ldr	r3, [pc, #68]	; (800ad20 <_dtoa_r+0x2f0>)
 800acda:	4602      	mov	r2, r0
 800acdc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ace0:	e6c0      	b.n	800aa64 <_dtoa_r+0x34>
 800ace2:	2301      	movs	r3, #1
 800ace4:	e7df      	b.n	800aca6 <_dtoa_r+0x276>
 800ace6:	bf00      	nop
 800ace8:	636f4361 	.word	0x636f4361
 800acec:	3fd287a7 	.word	0x3fd287a7
 800acf0:	8b60c8b3 	.word	0x8b60c8b3
 800acf4:	3fc68a28 	.word	0x3fc68a28
 800acf8:	509f79fb 	.word	0x509f79fb
 800acfc:	3fd34413 	.word	0x3fd34413
 800ad00:	0800d64e 	.word	0x0800d64e
 800ad04:	0800d665 	.word	0x0800d665
 800ad08:	7ff00000 	.word	0x7ff00000
 800ad0c:	0800d64a 	.word	0x0800d64a
 800ad10:	0800d641 	.word	0x0800d641
 800ad14:	0800d4c1 	.word	0x0800d4c1
 800ad18:	3ff80000 	.word	0x3ff80000
 800ad1c:	0800d7d0 	.word	0x0800d7d0
 800ad20:	0800d6c0 	.word	0x0800d6c0
 800ad24:	2501      	movs	r5, #1
 800ad26:	2300      	movs	r3, #0
 800ad28:	9306      	str	r3, [sp, #24]
 800ad2a:	9508      	str	r5, [sp, #32]
 800ad2c:	f04f 33ff 	mov.w	r3, #4294967295
 800ad30:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ad34:	2200      	movs	r2, #0
 800ad36:	2312      	movs	r3, #18
 800ad38:	e7b0      	b.n	800ac9c <_dtoa_r+0x26c>
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	9308      	str	r3, [sp, #32]
 800ad3e:	e7f5      	b.n	800ad2c <_dtoa_r+0x2fc>
 800ad40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad42:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ad46:	e7b8      	b.n	800acba <_dtoa_r+0x28a>
 800ad48:	3101      	adds	r1, #1
 800ad4a:	6041      	str	r1, [r0, #4]
 800ad4c:	0052      	lsls	r2, r2, #1
 800ad4e:	e7b8      	b.n	800acc2 <_dtoa_r+0x292>
 800ad50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad52:	9a01      	ldr	r2, [sp, #4]
 800ad54:	601a      	str	r2, [r3, #0]
 800ad56:	9b03      	ldr	r3, [sp, #12]
 800ad58:	2b0e      	cmp	r3, #14
 800ad5a:	f200 809d 	bhi.w	800ae98 <_dtoa_r+0x468>
 800ad5e:	2d00      	cmp	r5, #0
 800ad60:	f000 809a 	beq.w	800ae98 <_dtoa_r+0x468>
 800ad64:	9b00      	ldr	r3, [sp, #0]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	dd32      	ble.n	800add0 <_dtoa_r+0x3a0>
 800ad6a:	4ab7      	ldr	r2, [pc, #732]	; (800b048 <_dtoa_r+0x618>)
 800ad6c:	f003 030f 	and.w	r3, r3, #15
 800ad70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ad74:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ad78:	9b00      	ldr	r3, [sp, #0]
 800ad7a:	05d8      	lsls	r0, r3, #23
 800ad7c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ad80:	d516      	bpl.n	800adb0 <_dtoa_r+0x380>
 800ad82:	4bb2      	ldr	r3, [pc, #712]	; (800b04c <_dtoa_r+0x61c>)
 800ad84:	ec51 0b19 	vmov	r0, r1, d9
 800ad88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ad8c:	f7f5 fd66 	bl	800085c <__aeabi_ddiv>
 800ad90:	f007 070f 	and.w	r7, r7, #15
 800ad94:	4682      	mov	sl, r0
 800ad96:	468b      	mov	fp, r1
 800ad98:	2503      	movs	r5, #3
 800ad9a:	4eac      	ldr	r6, [pc, #688]	; (800b04c <_dtoa_r+0x61c>)
 800ad9c:	b957      	cbnz	r7, 800adb4 <_dtoa_r+0x384>
 800ad9e:	4642      	mov	r2, r8
 800ada0:	464b      	mov	r3, r9
 800ada2:	4650      	mov	r0, sl
 800ada4:	4659      	mov	r1, fp
 800ada6:	f7f5 fd59 	bl	800085c <__aeabi_ddiv>
 800adaa:	4682      	mov	sl, r0
 800adac:	468b      	mov	fp, r1
 800adae:	e028      	b.n	800ae02 <_dtoa_r+0x3d2>
 800adb0:	2502      	movs	r5, #2
 800adb2:	e7f2      	b.n	800ad9a <_dtoa_r+0x36a>
 800adb4:	07f9      	lsls	r1, r7, #31
 800adb6:	d508      	bpl.n	800adca <_dtoa_r+0x39a>
 800adb8:	4640      	mov	r0, r8
 800adba:	4649      	mov	r1, r9
 800adbc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800adc0:	f7f5 fc22 	bl	8000608 <__aeabi_dmul>
 800adc4:	3501      	adds	r5, #1
 800adc6:	4680      	mov	r8, r0
 800adc8:	4689      	mov	r9, r1
 800adca:	107f      	asrs	r7, r7, #1
 800adcc:	3608      	adds	r6, #8
 800adce:	e7e5      	b.n	800ad9c <_dtoa_r+0x36c>
 800add0:	f000 809b 	beq.w	800af0a <_dtoa_r+0x4da>
 800add4:	9b00      	ldr	r3, [sp, #0]
 800add6:	4f9d      	ldr	r7, [pc, #628]	; (800b04c <_dtoa_r+0x61c>)
 800add8:	425e      	negs	r6, r3
 800adda:	4b9b      	ldr	r3, [pc, #620]	; (800b048 <_dtoa_r+0x618>)
 800addc:	f006 020f 	and.w	r2, r6, #15
 800ade0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ade4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade8:	ec51 0b19 	vmov	r0, r1, d9
 800adec:	f7f5 fc0c 	bl	8000608 <__aeabi_dmul>
 800adf0:	1136      	asrs	r6, r6, #4
 800adf2:	4682      	mov	sl, r0
 800adf4:	468b      	mov	fp, r1
 800adf6:	2300      	movs	r3, #0
 800adf8:	2502      	movs	r5, #2
 800adfa:	2e00      	cmp	r6, #0
 800adfc:	d17a      	bne.n	800aef4 <_dtoa_r+0x4c4>
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d1d3      	bne.n	800adaa <_dtoa_r+0x37a>
 800ae02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	f000 8082 	beq.w	800af0e <_dtoa_r+0x4de>
 800ae0a:	4b91      	ldr	r3, [pc, #580]	; (800b050 <_dtoa_r+0x620>)
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	4650      	mov	r0, sl
 800ae10:	4659      	mov	r1, fp
 800ae12:	f7f5 fe6b 	bl	8000aec <__aeabi_dcmplt>
 800ae16:	2800      	cmp	r0, #0
 800ae18:	d079      	beq.n	800af0e <_dtoa_r+0x4de>
 800ae1a:	9b03      	ldr	r3, [sp, #12]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d076      	beq.n	800af0e <_dtoa_r+0x4de>
 800ae20:	9b02      	ldr	r3, [sp, #8]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	dd36      	ble.n	800ae94 <_dtoa_r+0x464>
 800ae26:	9b00      	ldr	r3, [sp, #0]
 800ae28:	4650      	mov	r0, sl
 800ae2a:	4659      	mov	r1, fp
 800ae2c:	1e5f      	subs	r7, r3, #1
 800ae2e:	2200      	movs	r2, #0
 800ae30:	4b88      	ldr	r3, [pc, #544]	; (800b054 <_dtoa_r+0x624>)
 800ae32:	f7f5 fbe9 	bl	8000608 <__aeabi_dmul>
 800ae36:	9e02      	ldr	r6, [sp, #8]
 800ae38:	4682      	mov	sl, r0
 800ae3a:	468b      	mov	fp, r1
 800ae3c:	3501      	adds	r5, #1
 800ae3e:	4628      	mov	r0, r5
 800ae40:	f7f5 fb78 	bl	8000534 <__aeabi_i2d>
 800ae44:	4652      	mov	r2, sl
 800ae46:	465b      	mov	r3, fp
 800ae48:	f7f5 fbde 	bl	8000608 <__aeabi_dmul>
 800ae4c:	4b82      	ldr	r3, [pc, #520]	; (800b058 <_dtoa_r+0x628>)
 800ae4e:	2200      	movs	r2, #0
 800ae50:	f7f5 fa24 	bl	800029c <__adddf3>
 800ae54:	46d0      	mov	r8, sl
 800ae56:	46d9      	mov	r9, fp
 800ae58:	4682      	mov	sl, r0
 800ae5a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ae5e:	2e00      	cmp	r6, #0
 800ae60:	d158      	bne.n	800af14 <_dtoa_r+0x4e4>
 800ae62:	4b7e      	ldr	r3, [pc, #504]	; (800b05c <_dtoa_r+0x62c>)
 800ae64:	2200      	movs	r2, #0
 800ae66:	4640      	mov	r0, r8
 800ae68:	4649      	mov	r1, r9
 800ae6a:	f7f5 fa15 	bl	8000298 <__aeabi_dsub>
 800ae6e:	4652      	mov	r2, sl
 800ae70:	465b      	mov	r3, fp
 800ae72:	4680      	mov	r8, r0
 800ae74:	4689      	mov	r9, r1
 800ae76:	f7f5 fe57 	bl	8000b28 <__aeabi_dcmpgt>
 800ae7a:	2800      	cmp	r0, #0
 800ae7c:	f040 8295 	bne.w	800b3aa <_dtoa_r+0x97a>
 800ae80:	4652      	mov	r2, sl
 800ae82:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ae86:	4640      	mov	r0, r8
 800ae88:	4649      	mov	r1, r9
 800ae8a:	f7f5 fe2f 	bl	8000aec <__aeabi_dcmplt>
 800ae8e:	2800      	cmp	r0, #0
 800ae90:	f040 8289 	bne.w	800b3a6 <_dtoa_r+0x976>
 800ae94:	ec5b ab19 	vmov	sl, fp, d9
 800ae98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	f2c0 8148 	blt.w	800b130 <_dtoa_r+0x700>
 800aea0:	9a00      	ldr	r2, [sp, #0]
 800aea2:	2a0e      	cmp	r2, #14
 800aea4:	f300 8144 	bgt.w	800b130 <_dtoa_r+0x700>
 800aea8:	4b67      	ldr	r3, [pc, #412]	; (800b048 <_dtoa_r+0x618>)
 800aeaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aeae:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aeb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	f280 80d5 	bge.w	800b064 <_dtoa_r+0x634>
 800aeba:	9b03      	ldr	r3, [sp, #12]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	f300 80d1 	bgt.w	800b064 <_dtoa_r+0x634>
 800aec2:	f040 826f 	bne.w	800b3a4 <_dtoa_r+0x974>
 800aec6:	4b65      	ldr	r3, [pc, #404]	; (800b05c <_dtoa_r+0x62c>)
 800aec8:	2200      	movs	r2, #0
 800aeca:	4640      	mov	r0, r8
 800aecc:	4649      	mov	r1, r9
 800aece:	f7f5 fb9b 	bl	8000608 <__aeabi_dmul>
 800aed2:	4652      	mov	r2, sl
 800aed4:	465b      	mov	r3, fp
 800aed6:	f7f5 fe1d 	bl	8000b14 <__aeabi_dcmpge>
 800aeda:	9e03      	ldr	r6, [sp, #12]
 800aedc:	4637      	mov	r7, r6
 800aede:	2800      	cmp	r0, #0
 800aee0:	f040 8245 	bne.w	800b36e <_dtoa_r+0x93e>
 800aee4:	9d01      	ldr	r5, [sp, #4]
 800aee6:	2331      	movs	r3, #49	; 0x31
 800aee8:	f805 3b01 	strb.w	r3, [r5], #1
 800aeec:	9b00      	ldr	r3, [sp, #0]
 800aeee:	3301      	adds	r3, #1
 800aef0:	9300      	str	r3, [sp, #0]
 800aef2:	e240      	b.n	800b376 <_dtoa_r+0x946>
 800aef4:	07f2      	lsls	r2, r6, #31
 800aef6:	d505      	bpl.n	800af04 <_dtoa_r+0x4d4>
 800aef8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aefc:	f7f5 fb84 	bl	8000608 <__aeabi_dmul>
 800af00:	3501      	adds	r5, #1
 800af02:	2301      	movs	r3, #1
 800af04:	1076      	asrs	r6, r6, #1
 800af06:	3708      	adds	r7, #8
 800af08:	e777      	b.n	800adfa <_dtoa_r+0x3ca>
 800af0a:	2502      	movs	r5, #2
 800af0c:	e779      	b.n	800ae02 <_dtoa_r+0x3d2>
 800af0e:	9f00      	ldr	r7, [sp, #0]
 800af10:	9e03      	ldr	r6, [sp, #12]
 800af12:	e794      	b.n	800ae3e <_dtoa_r+0x40e>
 800af14:	9901      	ldr	r1, [sp, #4]
 800af16:	4b4c      	ldr	r3, [pc, #304]	; (800b048 <_dtoa_r+0x618>)
 800af18:	4431      	add	r1, r6
 800af1a:	910d      	str	r1, [sp, #52]	; 0x34
 800af1c:	9908      	ldr	r1, [sp, #32]
 800af1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800af22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800af26:	2900      	cmp	r1, #0
 800af28:	d043      	beq.n	800afb2 <_dtoa_r+0x582>
 800af2a:	494d      	ldr	r1, [pc, #308]	; (800b060 <_dtoa_r+0x630>)
 800af2c:	2000      	movs	r0, #0
 800af2e:	f7f5 fc95 	bl	800085c <__aeabi_ddiv>
 800af32:	4652      	mov	r2, sl
 800af34:	465b      	mov	r3, fp
 800af36:	f7f5 f9af 	bl	8000298 <__aeabi_dsub>
 800af3a:	9d01      	ldr	r5, [sp, #4]
 800af3c:	4682      	mov	sl, r0
 800af3e:	468b      	mov	fp, r1
 800af40:	4649      	mov	r1, r9
 800af42:	4640      	mov	r0, r8
 800af44:	f7f5 fe10 	bl	8000b68 <__aeabi_d2iz>
 800af48:	4606      	mov	r6, r0
 800af4a:	f7f5 faf3 	bl	8000534 <__aeabi_i2d>
 800af4e:	4602      	mov	r2, r0
 800af50:	460b      	mov	r3, r1
 800af52:	4640      	mov	r0, r8
 800af54:	4649      	mov	r1, r9
 800af56:	f7f5 f99f 	bl	8000298 <__aeabi_dsub>
 800af5a:	3630      	adds	r6, #48	; 0x30
 800af5c:	f805 6b01 	strb.w	r6, [r5], #1
 800af60:	4652      	mov	r2, sl
 800af62:	465b      	mov	r3, fp
 800af64:	4680      	mov	r8, r0
 800af66:	4689      	mov	r9, r1
 800af68:	f7f5 fdc0 	bl	8000aec <__aeabi_dcmplt>
 800af6c:	2800      	cmp	r0, #0
 800af6e:	d163      	bne.n	800b038 <_dtoa_r+0x608>
 800af70:	4642      	mov	r2, r8
 800af72:	464b      	mov	r3, r9
 800af74:	4936      	ldr	r1, [pc, #216]	; (800b050 <_dtoa_r+0x620>)
 800af76:	2000      	movs	r0, #0
 800af78:	f7f5 f98e 	bl	8000298 <__aeabi_dsub>
 800af7c:	4652      	mov	r2, sl
 800af7e:	465b      	mov	r3, fp
 800af80:	f7f5 fdb4 	bl	8000aec <__aeabi_dcmplt>
 800af84:	2800      	cmp	r0, #0
 800af86:	f040 80b5 	bne.w	800b0f4 <_dtoa_r+0x6c4>
 800af8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af8c:	429d      	cmp	r5, r3
 800af8e:	d081      	beq.n	800ae94 <_dtoa_r+0x464>
 800af90:	4b30      	ldr	r3, [pc, #192]	; (800b054 <_dtoa_r+0x624>)
 800af92:	2200      	movs	r2, #0
 800af94:	4650      	mov	r0, sl
 800af96:	4659      	mov	r1, fp
 800af98:	f7f5 fb36 	bl	8000608 <__aeabi_dmul>
 800af9c:	4b2d      	ldr	r3, [pc, #180]	; (800b054 <_dtoa_r+0x624>)
 800af9e:	4682      	mov	sl, r0
 800afa0:	468b      	mov	fp, r1
 800afa2:	4640      	mov	r0, r8
 800afa4:	4649      	mov	r1, r9
 800afa6:	2200      	movs	r2, #0
 800afa8:	f7f5 fb2e 	bl	8000608 <__aeabi_dmul>
 800afac:	4680      	mov	r8, r0
 800afae:	4689      	mov	r9, r1
 800afb0:	e7c6      	b.n	800af40 <_dtoa_r+0x510>
 800afb2:	4650      	mov	r0, sl
 800afb4:	4659      	mov	r1, fp
 800afb6:	f7f5 fb27 	bl	8000608 <__aeabi_dmul>
 800afba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afbc:	9d01      	ldr	r5, [sp, #4]
 800afbe:	930f      	str	r3, [sp, #60]	; 0x3c
 800afc0:	4682      	mov	sl, r0
 800afc2:	468b      	mov	fp, r1
 800afc4:	4649      	mov	r1, r9
 800afc6:	4640      	mov	r0, r8
 800afc8:	f7f5 fdce 	bl	8000b68 <__aeabi_d2iz>
 800afcc:	4606      	mov	r6, r0
 800afce:	f7f5 fab1 	bl	8000534 <__aeabi_i2d>
 800afd2:	3630      	adds	r6, #48	; 0x30
 800afd4:	4602      	mov	r2, r0
 800afd6:	460b      	mov	r3, r1
 800afd8:	4640      	mov	r0, r8
 800afda:	4649      	mov	r1, r9
 800afdc:	f7f5 f95c 	bl	8000298 <__aeabi_dsub>
 800afe0:	f805 6b01 	strb.w	r6, [r5], #1
 800afe4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afe6:	429d      	cmp	r5, r3
 800afe8:	4680      	mov	r8, r0
 800afea:	4689      	mov	r9, r1
 800afec:	f04f 0200 	mov.w	r2, #0
 800aff0:	d124      	bne.n	800b03c <_dtoa_r+0x60c>
 800aff2:	4b1b      	ldr	r3, [pc, #108]	; (800b060 <_dtoa_r+0x630>)
 800aff4:	4650      	mov	r0, sl
 800aff6:	4659      	mov	r1, fp
 800aff8:	f7f5 f950 	bl	800029c <__adddf3>
 800affc:	4602      	mov	r2, r0
 800affe:	460b      	mov	r3, r1
 800b000:	4640      	mov	r0, r8
 800b002:	4649      	mov	r1, r9
 800b004:	f7f5 fd90 	bl	8000b28 <__aeabi_dcmpgt>
 800b008:	2800      	cmp	r0, #0
 800b00a:	d173      	bne.n	800b0f4 <_dtoa_r+0x6c4>
 800b00c:	4652      	mov	r2, sl
 800b00e:	465b      	mov	r3, fp
 800b010:	4913      	ldr	r1, [pc, #76]	; (800b060 <_dtoa_r+0x630>)
 800b012:	2000      	movs	r0, #0
 800b014:	f7f5 f940 	bl	8000298 <__aeabi_dsub>
 800b018:	4602      	mov	r2, r0
 800b01a:	460b      	mov	r3, r1
 800b01c:	4640      	mov	r0, r8
 800b01e:	4649      	mov	r1, r9
 800b020:	f7f5 fd64 	bl	8000aec <__aeabi_dcmplt>
 800b024:	2800      	cmp	r0, #0
 800b026:	f43f af35 	beq.w	800ae94 <_dtoa_r+0x464>
 800b02a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b02c:	1e6b      	subs	r3, r5, #1
 800b02e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b030:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b034:	2b30      	cmp	r3, #48	; 0x30
 800b036:	d0f8      	beq.n	800b02a <_dtoa_r+0x5fa>
 800b038:	9700      	str	r7, [sp, #0]
 800b03a:	e049      	b.n	800b0d0 <_dtoa_r+0x6a0>
 800b03c:	4b05      	ldr	r3, [pc, #20]	; (800b054 <_dtoa_r+0x624>)
 800b03e:	f7f5 fae3 	bl	8000608 <__aeabi_dmul>
 800b042:	4680      	mov	r8, r0
 800b044:	4689      	mov	r9, r1
 800b046:	e7bd      	b.n	800afc4 <_dtoa_r+0x594>
 800b048:	0800d7d0 	.word	0x0800d7d0
 800b04c:	0800d7a8 	.word	0x0800d7a8
 800b050:	3ff00000 	.word	0x3ff00000
 800b054:	40240000 	.word	0x40240000
 800b058:	401c0000 	.word	0x401c0000
 800b05c:	40140000 	.word	0x40140000
 800b060:	3fe00000 	.word	0x3fe00000
 800b064:	9d01      	ldr	r5, [sp, #4]
 800b066:	4656      	mov	r6, sl
 800b068:	465f      	mov	r7, fp
 800b06a:	4642      	mov	r2, r8
 800b06c:	464b      	mov	r3, r9
 800b06e:	4630      	mov	r0, r6
 800b070:	4639      	mov	r1, r7
 800b072:	f7f5 fbf3 	bl	800085c <__aeabi_ddiv>
 800b076:	f7f5 fd77 	bl	8000b68 <__aeabi_d2iz>
 800b07a:	4682      	mov	sl, r0
 800b07c:	f7f5 fa5a 	bl	8000534 <__aeabi_i2d>
 800b080:	4642      	mov	r2, r8
 800b082:	464b      	mov	r3, r9
 800b084:	f7f5 fac0 	bl	8000608 <__aeabi_dmul>
 800b088:	4602      	mov	r2, r0
 800b08a:	460b      	mov	r3, r1
 800b08c:	4630      	mov	r0, r6
 800b08e:	4639      	mov	r1, r7
 800b090:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b094:	f7f5 f900 	bl	8000298 <__aeabi_dsub>
 800b098:	f805 6b01 	strb.w	r6, [r5], #1
 800b09c:	9e01      	ldr	r6, [sp, #4]
 800b09e:	9f03      	ldr	r7, [sp, #12]
 800b0a0:	1bae      	subs	r6, r5, r6
 800b0a2:	42b7      	cmp	r7, r6
 800b0a4:	4602      	mov	r2, r0
 800b0a6:	460b      	mov	r3, r1
 800b0a8:	d135      	bne.n	800b116 <_dtoa_r+0x6e6>
 800b0aa:	f7f5 f8f7 	bl	800029c <__adddf3>
 800b0ae:	4642      	mov	r2, r8
 800b0b0:	464b      	mov	r3, r9
 800b0b2:	4606      	mov	r6, r0
 800b0b4:	460f      	mov	r7, r1
 800b0b6:	f7f5 fd37 	bl	8000b28 <__aeabi_dcmpgt>
 800b0ba:	b9d0      	cbnz	r0, 800b0f2 <_dtoa_r+0x6c2>
 800b0bc:	4642      	mov	r2, r8
 800b0be:	464b      	mov	r3, r9
 800b0c0:	4630      	mov	r0, r6
 800b0c2:	4639      	mov	r1, r7
 800b0c4:	f7f5 fd08 	bl	8000ad8 <__aeabi_dcmpeq>
 800b0c8:	b110      	cbz	r0, 800b0d0 <_dtoa_r+0x6a0>
 800b0ca:	f01a 0f01 	tst.w	sl, #1
 800b0ce:	d110      	bne.n	800b0f2 <_dtoa_r+0x6c2>
 800b0d0:	4620      	mov	r0, r4
 800b0d2:	ee18 1a10 	vmov	r1, s16
 800b0d6:	f000 ff47 	bl	800bf68 <_Bfree>
 800b0da:	2300      	movs	r3, #0
 800b0dc:	9800      	ldr	r0, [sp, #0]
 800b0de:	702b      	strb	r3, [r5, #0]
 800b0e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0e2:	3001      	adds	r0, #1
 800b0e4:	6018      	str	r0, [r3, #0]
 800b0e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	f43f acf1 	beq.w	800aad0 <_dtoa_r+0xa0>
 800b0ee:	601d      	str	r5, [r3, #0]
 800b0f0:	e4ee      	b.n	800aad0 <_dtoa_r+0xa0>
 800b0f2:	9f00      	ldr	r7, [sp, #0]
 800b0f4:	462b      	mov	r3, r5
 800b0f6:	461d      	mov	r5, r3
 800b0f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0fc:	2a39      	cmp	r2, #57	; 0x39
 800b0fe:	d106      	bne.n	800b10e <_dtoa_r+0x6de>
 800b100:	9a01      	ldr	r2, [sp, #4]
 800b102:	429a      	cmp	r2, r3
 800b104:	d1f7      	bne.n	800b0f6 <_dtoa_r+0x6c6>
 800b106:	9901      	ldr	r1, [sp, #4]
 800b108:	2230      	movs	r2, #48	; 0x30
 800b10a:	3701      	adds	r7, #1
 800b10c:	700a      	strb	r2, [r1, #0]
 800b10e:	781a      	ldrb	r2, [r3, #0]
 800b110:	3201      	adds	r2, #1
 800b112:	701a      	strb	r2, [r3, #0]
 800b114:	e790      	b.n	800b038 <_dtoa_r+0x608>
 800b116:	4ba6      	ldr	r3, [pc, #664]	; (800b3b0 <_dtoa_r+0x980>)
 800b118:	2200      	movs	r2, #0
 800b11a:	f7f5 fa75 	bl	8000608 <__aeabi_dmul>
 800b11e:	2200      	movs	r2, #0
 800b120:	2300      	movs	r3, #0
 800b122:	4606      	mov	r6, r0
 800b124:	460f      	mov	r7, r1
 800b126:	f7f5 fcd7 	bl	8000ad8 <__aeabi_dcmpeq>
 800b12a:	2800      	cmp	r0, #0
 800b12c:	d09d      	beq.n	800b06a <_dtoa_r+0x63a>
 800b12e:	e7cf      	b.n	800b0d0 <_dtoa_r+0x6a0>
 800b130:	9a08      	ldr	r2, [sp, #32]
 800b132:	2a00      	cmp	r2, #0
 800b134:	f000 80d7 	beq.w	800b2e6 <_dtoa_r+0x8b6>
 800b138:	9a06      	ldr	r2, [sp, #24]
 800b13a:	2a01      	cmp	r2, #1
 800b13c:	f300 80ba 	bgt.w	800b2b4 <_dtoa_r+0x884>
 800b140:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b142:	2a00      	cmp	r2, #0
 800b144:	f000 80b2 	beq.w	800b2ac <_dtoa_r+0x87c>
 800b148:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b14c:	9e07      	ldr	r6, [sp, #28]
 800b14e:	9d04      	ldr	r5, [sp, #16]
 800b150:	9a04      	ldr	r2, [sp, #16]
 800b152:	441a      	add	r2, r3
 800b154:	9204      	str	r2, [sp, #16]
 800b156:	9a05      	ldr	r2, [sp, #20]
 800b158:	2101      	movs	r1, #1
 800b15a:	441a      	add	r2, r3
 800b15c:	4620      	mov	r0, r4
 800b15e:	9205      	str	r2, [sp, #20]
 800b160:	f001 f804 	bl	800c16c <__i2b>
 800b164:	4607      	mov	r7, r0
 800b166:	2d00      	cmp	r5, #0
 800b168:	dd0c      	ble.n	800b184 <_dtoa_r+0x754>
 800b16a:	9b05      	ldr	r3, [sp, #20]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	dd09      	ble.n	800b184 <_dtoa_r+0x754>
 800b170:	42ab      	cmp	r3, r5
 800b172:	9a04      	ldr	r2, [sp, #16]
 800b174:	bfa8      	it	ge
 800b176:	462b      	movge	r3, r5
 800b178:	1ad2      	subs	r2, r2, r3
 800b17a:	9204      	str	r2, [sp, #16]
 800b17c:	9a05      	ldr	r2, [sp, #20]
 800b17e:	1aed      	subs	r5, r5, r3
 800b180:	1ad3      	subs	r3, r2, r3
 800b182:	9305      	str	r3, [sp, #20]
 800b184:	9b07      	ldr	r3, [sp, #28]
 800b186:	b31b      	cbz	r3, 800b1d0 <_dtoa_r+0x7a0>
 800b188:	9b08      	ldr	r3, [sp, #32]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	f000 80af 	beq.w	800b2ee <_dtoa_r+0x8be>
 800b190:	2e00      	cmp	r6, #0
 800b192:	dd13      	ble.n	800b1bc <_dtoa_r+0x78c>
 800b194:	4639      	mov	r1, r7
 800b196:	4632      	mov	r2, r6
 800b198:	4620      	mov	r0, r4
 800b19a:	f001 f8a7 	bl	800c2ec <__pow5mult>
 800b19e:	ee18 2a10 	vmov	r2, s16
 800b1a2:	4601      	mov	r1, r0
 800b1a4:	4607      	mov	r7, r0
 800b1a6:	4620      	mov	r0, r4
 800b1a8:	f000 fff6 	bl	800c198 <__multiply>
 800b1ac:	ee18 1a10 	vmov	r1, s16
 800b1b0:	4680      	mov	r8, r0
 800b1b2:	4620      	mov	r0, r4
 800b1b4:	f000 fed8 	bl	800bf68 <_Bfree>
 800b1b8:	ee08 8a10 	vmov	s16, r8
 800b1bc:	9b07      	ldr	r3, [sp, #28]
 800b1be:	1b9a      	subs	r2, r3, r6
 800b1c0:	d006      	beq.n	800b1d0 <_dtoa_r+0x7a0>
 800b1c2:	ee18 1a10 	vmov	r1, s16
 800b1c6:	4620      	mov	r0, r4
 800b1c8:	f001 f890 	bl	800c2ec <__pow5mult>
 800b1cc:	ee08 0a10 	vmov	s16, r0
 800b1d0:	2101      	movs	r1, #1
 800b1d2:	4620      	mov	r0, r4
 800b1d4:	f000 ffca 	bl	800c16c <__i2b>
 800b1d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	4606      	mov	r6, r0
 800b1de:	f340 8088 	ble.w	800b2f2 <_dtoa_r+0x8c2>
 800b1e2:	461a      	mov	r2, r3
 800b1e4:	4601      	mov	r1, r0
 800b1e6:	4620      	mov	r0, r4
 800b1e8:	f001 f880 	bl	800c2ec <__pow5mult>
 800b1ec:	9b06      	ldr	r3, [sp, #24]
 800b1ee:	2b01      	cmp	r3, #1
 800b1f0:	4606      	mov	r6, r0
 800b1f2:	f340 8081 	ble.w	800b2f8 <_dtoa_r+0x8c8>
 800b1f6:	f04f 0800 	mov.w	r8, #0
 800b1fa:	6933      	ldr	r3, [r6, #16]
 800b1fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b200:	6918      	ldr	r0, [r3, #16]
 800b202:	f000 ff63 	bl	800c0cc <__hi0bits>
 800b206:	f1c0 0020 	rsb	r0, r0, #32
 800b20a:	9b05      	ldr	r3, [sp, #20]
 800b20c:	4418      	add	r0, r3
 800b20e:	f010 001f 	ands.w	r0, r0, #31
 800b212:	f000 8092 	beq.w	800b33a <_dtoa_r+0x90a>
 800b216:	f1c0 0320 	rsb	r3, r0, #32
 800b21a:	2b04      	cmp	r3, #4
 800b21c:	f340 808a 	ble.w	800b334 <_dtoa_r+0x904>
 800b220:	f1c0 001c 	rsb	r0, r0, #28
 800b224:	9b04      	ldr	r3, [sp, #16]
 800b226:	4403      	add	r3, r0
 800b228:	9304      	str	r3, [sp, #16]
 800b22a:	9b05      	ldr	r3, [sp, #20]
 800b22c:	4403      	add	r3, r0
 800b22e:	4405      	add	r5, r0
 800b230:	9305      	str	r3, [sp, #20]
 800b232:	9b04      	ldr	r3, [sp, #16]
 800b234:	2b00      	cmp	r3, #0
 800b236:	dd07      	ble.n	800b248 <_dtoa_r+0x818>
 800b238:	ee18 1a10 	vmov	r1, s16
 800b23c:	461a      	mov	r2, r3
 800b23e:	4620      	mov	r0, r4
 800b240:	f001 f8ae 	bl	800c3a0 <__lshift>
 800b244:	ee08 0a10 	vmov	s16, r0
 800b248:	9b05      	ldr	r3, [sp, #20]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	dd05      	ble.n	800b25a <_dtoa_r+0x82a>
 800b24e:	4631      	mov	r1, r6
 800b250:	461a      	mov	r2, r3
 800b252:	4620      	mov	r0, r4
 800b254:	f001 f8a4 	bl	800c3a0 <__lshift>
 800b258:	4606      	mov	r6, r0
 800b25a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d06e      	beq.n	800b33e <_dtoa_r+0x90e>
 800b260:	ee18 0a10 	vmov	r0, s16
 800b264:	4631      	mov	r1, r6
 800b266:	f001 f90b 	bl	800c480 <__mcmp>
 800b26a:	2800      	cmp	r0, #0
 800b26c:	da67      	bge.n	800b33e <_dtoa_r+0x90e>
 800b26e:	9b00      	ldr	r3, [sp, #0]
 800b270:	3b01      	subs	r3, #1
 800b272:	ee18 1a10 	vmov	r1, s16
 800b276:	9300      	str	r3, [sp, #0]
 800b278:	220a      	movs	r2, #10
 800b27a:	2300      	movs	r3, #0
 800b27c:	4620      	mov	r0, r4
 800b27e:	f000 fe95 	bl	800bfac <__multadd>
 800b282:	9b08      	ldr	r3, [sp, #32]
 800b284:	ee08 0a10 	vmov	s16, r0
 800b288:	2b00      	cmp	r3, #0
 800b28a:	f000 81b1 	beq.w	800b5f0 <_dtoa_r+0xbc0>
 800b28e:	2300      	movs	r3, #0
 800b290:	4639      	mov	r1, r7
 800b292:	220a      	movs	r2, #10
 800b294:	4620      	mov	r0, r4
 800b296:	f000 fe89 	bl	800bfac <__multadd>
 800b29a:	9b02      	ldr	r3, [sp, #8]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	4607      	mov	r7, r0
 800b2a0:	f300 808e 	bgt.w	800b3c0 <_dtoa_r+0x990>
 800b2a4:	9b06      	ldr	r3, [sp, #24]
 800b2a6:	2b02      	cmp	r3, #2
 800b2a8:	dc51      	bgt.n	800b34e <_dtoa_r+0x91e>
 800b2aa:	e089      	b.n	800b3c0 <_dtoa_r+0x990>
 800b2ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b2ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b2b2:	e74b      	b.n	800b14c <_dtoa_r+0x71c>
 800b2b4:	9b03      	ldr	r3, [sp, #12]
 800b2b6:	1e5e      	subs	r6, r3, #1
 800b2b8:	9b07      	ldr	r3, [sp, #28]
 800b2ba:	42b3      	cmp	r3, r6
 800b2bc:	bfbf      	itttt	lt
 800b2be:	9b07      	ldrlt	r3, [sp, #28]
 800b2c0:	9607      	strlt	r6, [sp, #28]
 800b2c2:	1af2      	sublt	r2, r6, r3
 800b2c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b2c6:	bfb6      	itet	lt
 800b2c8:	189b      	addlt	r3, r3, r2
 800b2ca:	1b9e      	subge	r6, r3, r6
 800b2cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b2ce:	9b03      	ldr	r3, [sp, #12]
 800b2d0:	bfb8      	it	lt
 800b2d2:	2600      	movlt	r6, #0
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	bfb7      	itett	lt
 800b2d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b2dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b2e0:	1a9d      	sublt	r5, r3, r2
 800b2e2:	2300      	movlt	r3, #0
 800b2e4:	e734      	b.n	800b150 <_dtoa_r+0x720>
 800b2e6:	9e07      	ldr	r6, [sp, #28]
 800b2e8:	9d04      	ldr	r5, [sp, #16]
 800b2ea:	9f08      	ldr	r7, [sp, #32]
 800b2ec:	e73b      	b.n	800b166 <_dtoa_r+0x736>
 800b2ee:	9a07      	ldr	r2, [sp, #28]
 800b2f0:	e767      	b.n	800b1c2 <_dtoa_r+0x792>
 800b2f2:	9b06      	ldr	r3, [sp, #24]
 800b2f4:	2b01      	cmp	r3, #1
 800b2f6:	dc18      	bgt.n	800b32a <_dtoa_r+0x8fa>
 800b2f8:	f1ba 0f00 	cmp.w	sl, #0
 800b2fc:	d115      	bne.n	800b32a <_dtoa_r+0x8fa>
 800b2fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b302:	b993      	cbnz	r3, 800b32a <_dtoa_r+0x8fa>
 800b304:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b308:	0d1b      	lsrs	r3, r3, #20
 800b30a:	051b      	lsls	r3, r3, #20
 800b30c:	b183      	cbz	r3, 800b330 <_dtoa_r+0x900>
 800b30e:	9b04      	ldr	r3, [sp, #16]
 800b310:	3301      	adds	r3, #1
 800b312:	9304      	str	r3, [sp, #16]
 800b314:	9b05      	ldr	r3, [sp, #20]
 800b316:	3301      	adds	r3, #1
 800b318:	9305      	str	r3, [sp, #20]
 800b31a:	f04f 0801 	mov.w	r8, #1
 800b31e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b320:	2b00      	cmp	r3, #0
 800b322:	f47f af6a 	bne.w	800b1fa <_dtoa_r+0x7ca>
 800b326:	2001      	movs	r0, #1
 800b328:	e76f      	b.n	800b20a <_dtoa_r+0x7da>
 800b32a:	f04f 0800 	mov.w	r8, #0
 800b32e:	e7f6      	b.n	800b31e <_dtoa_r+0x8ee>
 800b330:	4698      	mov	r8, r3
 800b332:	e7f4      	b.n	800b31e <_dtoa_r+0x8ee>
 800b334:	f43f af7d 	beq.w	800b232 <_dtoa_r+0x802>
 800b338:	4618      	mov	r0, r3
 800b33a:	301c      	adds	r0, #28
 800b33c:	e772      	b.n	800b224 <_dtoa_r+0x7f4>
 800b33e:	9b03      	ldr	r3, [sp, #12]
 800b340:	2b00      	cmp	r3, #0
 800b342:	dc37      	bgt.n	800b3b4 <_dtoa_r+0x984>
 800b344:	9b06      	ldr	r3, [sp, #24]
 800b346:	2b02      	cmp	r3, #2
 800b348:	dd34      	ble.n	800b3b4 <_dtoa_r+0x984>
 800b34a:	9b03      	ldr	r3, [sp, #12]
 800b34c:	9302      	str	r3, [sp, #8]
 800b34e:	9b02      	ldr	r3, [sp, #8]
 800b350:	b96b      	cbnz	r3, 800b36e <_dtoa_r+0x93e>
 800b352:	4631      	mov	r1, r6
 800b354:	2205      	movs	r2, #5
 800b356:	4620      	mov	r0, r4
 800b358:	f000 fe28 	bl	800bfac <__multadd>
 800b35c:	4601      	mov	r1, r0
 800b35e:	4606      	mov	r6, r0
 800b360:	ee18 0a10 	vmov	r0, s16
 800b364:	f001 f88c 	bl	800c480 <__mcmp>
 800b368:	2800      	cmp	r0, #0
 800b36a:	f73f adbb 	bgt.w	800aee4 <_dtoa_r+0x4b4>
 800b36e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b370:	9d01      	ldr	r5, [sp, #4]
 800b372:	43db      	mvns	r3, r3
 800b374:	9300      	str	r3, [sp, #0]
 800b376:	f04f 0800 	mov.w	r8, #0
 800b37a:	4631      	mov	r1, r6
 800b37c:	4620      	mov	r0, r4
 800b37e:	f000 fdf3 	bl	800bf68 <_Bfree>
 800b382:	2f00      	cmp	r7, #0
 800b384:	f43f aea4 	beq.w	800b0d0 <_dtoa_r+0x6a0>
 800b388:	f1b8 0f00 	cmp.w	r8, #0
 800b38c:	d005      	beq.n	800b39a <_dtoa_r+0x96a>
 800b38e:	45b8      	cmp	r8, r7
 800b390:	d003      	beq.n	800b39a <_dtoa_r+0x96a>
 800b392:	4641      	mov	r1, r8
 800b394:	4620      	mov	r0, r4
 800b396:	f000 fde7 	bl	800bf68 <_Bfree>
 800b39a:	4639      	mov	r1, r7
 800b39c:	4620      	mov	r0, r4
 800b39e:	f000 fde3 	bl	800bf68 <_Bfree>
 800b3a2:	e695      	b.n	800b0d0 <_dtoa_r+0x6a0>
 800b3a4:	2600      	movs	r6, #0
 800b3a6:	4637      	mov	r7, r6
 800b3a8:	e7e1      	b.n	800b36e <_dtoa_r+0x93e>
 800b3aa:	9700      	str	r7, [sp, #0]
 800b3ac:	4637      	mov	r7, r6
 800b3ae:	e599      	b.n	800aee4 <_dtoa_r+0x4b4>
 800b3b0:	40240000 	.word	0x40240000
 800b3b4:	9b08      	ldr	r3, [sp, #32]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	f000 80ca 	beq.w	800b550 <_dtoa_r+0xb20>
 800b3bc:	9b03      	ldr	r3, [sp, #12]
 800b3be:	9302      	str	r3, [sp, #8]
 800b3c0:	2d00      	cmp	r5, #0
 800b3c2:	dd05      	ble.n	800b3d0 <_dtoa_r+0x9a0>
 800b3c4:	4639      	mov	r1, r7
 800b3c6:	462a      	mov	r2, r5
 800b3c8:	4620      	mov	r0, r4
 800b3ca:	f000 ffe9 	bl	800c3a0 <__lshift>
 800b3ce:	4607      	mov	r7, r0
 800b3d0:	f1b8 0f00 	cmp.w	r8, #0
 800b3d4:	d05b      	beq.n	800b48e <_dtoa_r+0xa5e>
 800b3d6:	6879      	ldr	r1, [r7, #4]
 800b3d8:	4620      	mov	r0, r4
 800b3da:	f000 fd85 	bl	800bee8 <_Balloc>
 800b3de:	4605      	mov	r5, r0
 800b3e0:	b928      	cbnz	r0, 800b3ee <_dtoa_r+0x9be>
 800b3e2:	4b87      	ldr	r3, [pc, #540]	; (800b600 <_dtoa_r+0xbd0>)
 800b3e4:	4602      	mov	r2, r0
 800b3e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b3ea:	f7ff bb3b 	b.w	800aa64 <_dtoa_r+0x34>
 800b3ee:	693a      	ldr	r2, [r7, #16]
 800b3f0:	3202      	adds	r2, #2
 800b3f2:	0092      	lsls	r2, r2, #2
 800b3f4:	f107 010c 	add.w	r1, r7, #12
 800b3f8:	300c      	adds	r0, #12
 800b3fa:	f7fd fbb2 	bl	8008b62 <memcpy>
 800b3fe:	2201      	movs	r2, #1
 800b400:	4629      	mov	r1, r5
 800b402:	4620      	mov	r0, r4
 800b404:	f000 ffcc 	bl	800c3a0 <__lshift>
 800b408:	9b01      	ldr	r3, [sp, #4]
 800b40a:	f103 0901 	add.w	r9, r3, #1
 800b40e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b412:	4413      	add	r3, r2
 800b414:	9305      	str	r3, [sp, #20]
 800b416:	f00a 0301 	and.w	r3, sl, #1
 800b41a:	46b8      	mov	r8, r7
 800b41c:	9304      	str	r3, [sp, #16]
 800b41e:	4607      	mov	r7, r0
 800b420:	4631      	mov	r1, r6
 800b422:	ee18 0a10 	vmov	r0, s16
 800b426:	f7ff fa75 	bl	800a914 <quorem>
 800b42a:	4641      	mov	r1, r8
 800b42c:	9002      	str	r0, [sp, #8]
 800b42e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b432:	ee18 0a10 	vmov	r0, s16
 800b436:	f001 f823 	bl	800c480 <__mcmp>
 800b43a:	463a      	mov	r2, r7
 800b43c:	9003      	str	r0, [sp, #12]
 800b43e:	4631      	mov	r1, r6
 800b440:	4620      	mov	r0, r4
 800b442:	f001 f839 	bl	800c4b8 <__mdiff>
 800b446:	68c2      	ldr	r2, [r0, #12]
 800b448:	f109 3bff 	add.w	fp, r9, #4294967295
 800b44c:	4605      	mov	r5, r0
 800b44e:	bb02      	cbnz	r2, 800b492 <_dtoa_r+0xa62>
 800b450:	4601      	mov	r1, r0
 800b452:	ee18 0a10 	vmov	r0, s16
 800b456:	f001 f813 	bl	800c480 <__mcmp>
 800b45a:	4602      	mov	r2, r0
 800b45c:	4629      	mov	r1, r5
 800b45e:	4620      	mov	r0, r4
 800b460:	9207      	str	r2, [sp, #28]
 800b462:	f000 fd81 	bl	800bf68 <_Bfree>
 800b466:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b46a:	ea43 0102 	orr.w	r1, r3, r2
 800b46e:	9b04      	ldr	r3, [sp, #16]
 800b470:	430b      	orrs	r3, r1
 800b472:	464d      	mov	r5, r9
 800b474:	d10f      	bne.n	800b496 <_dtoa_r+0xa66>
 800b476:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b47a:	d02a      	beq.n	800b4d2 <_dtoa_r+0xaa2>
 800b47c:	9b03      	ldr	r3, [sp, #12]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	dd02      	ble.n	800b488 <_dtoa_r+0xa58>
 800b482:	9b02      	ldr	r3, [sp, #8]
 800b484:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b488:	f88b a000 	strb.w	sl, [fp]
 800b48c:	e775      	b.n	800b37a <_dtoa_r+0x94a>
 800b48e:	4638      	mov	r0, r7
 800b490:	e7ba      	b.n	800b408 <_dtoa_r+0x9d8>
 800b492:	2201      	movs	r2, #1
 800b494:	e7e2      	b.n	800b45c <_dtoa_r+0xa2c>
 800b496:	9b03      	ldr	r3, [sp, #12]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	db04      	blt.n	800b4a6 <_dtoa_r+0xa76>
 800b49c:	9906      	ldr	r1, [sp, #24]
 800b49e:	430b      	orrs	r3, r1
 800b4a0:	9904      	ldr	r1, [sp, #16]
 800b4a2:	430b      	orrs	r3, r1
 800b4a4:	d122      	bne.n	800b4ec <_dtoa_r+0xabc>
 800b4a6:	2a00      	cmp	r2, #0
 800b4a8:	ddee      	ble.n	800b488 <_dtoa_r+0xa58>
 800b4aa:	ee18 1a10 	vmov	r1, s16
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	4620      	mov	r0, r4
 800b4b2:	f000 ff75 	bl	800c3a0 <__lshift>
 800b4b6:	4631      	mov	r1, r6
 800b4b8:	ee08 0a10 	vmov	s16, r0
 800b4bc:	f000 ffe0 	bl	800c480 <__mcmp>
 800b4c0:	2800      	cmp	r0, #0
 800b4c2:	dc03      	bgt.n	800b4cc <_dtoa_r+0xa9c>
 800b4c4:	d1e0      	bne.n	800b488 <_dtoa_r+0xa58>
 800b4c6:	f01a 0f01 	tst.w	sl, #1
 800b4ca:	d0dd      	beq.n	800b488 <_dtoa_r+0xa58>
 800b4cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b4d0:	d1d7      	bne.n	800b482 <_dtoa_r+0xa52>
 800b4d2:	2339      	movs	r3, #57	; 0x39
 800b4d4:	f88b 3000 	strb.w	r3, [fp]
 800b4d8:	462b      	mov	r3, r5
 800b4da:	461d      	mov	r5, r3
 800b4dc:	3b01      	subs	r3, #1
 800b4de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b4e2:	2a39      	cmp	r2, #57	; 0x39
 800b4e4:	d071      	beq.n	800b5ca <_dtoa_r+0xb9a>
 800b4e6:	3201      	adds	r2, #1
 800b4e8:	701a      	strb	r2, [r3, #0]
 800b4ea:	e746      	b.n	800b37a <_dtoa_r+0x94a>
 800b4ec:	2a00      	cmp	r2, #0
 800b4ee:	dd07      	ble.n	800b500 <_dtoa_r+0xad0>
 800b4f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b4f4:	d0ed      	beq.n	800b4d2 <_dtoa_r+0xaa2>
 800b4f6:	f10a 0301 	add.w	r3, sl, #1
 800b4fa:	f88b 3000 	strb.w	r3, [fp]
 800b4fe:	e73c      	b.n	800b37a <_dtoa_r+0x94a>
 800b500:	9b05      	ldr	r3, [sp, #20]
 800b502:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b506:	4599      	cmp	r9, r3
 800b508:	d047      	beq.n	800b59a <_dtoa_r+0xb6a>
 800b50a:	ee18 1a10 	vmov	r1, s16
 800b50e:	2300      	movs	r3, #0
 800b510:	220a      	movs	r2, #10
 800b512:	4620      	mov	r0, r4
 800b514:	f000 fd4a 	bl	800bfac <__multadd>
 800b518:	45b8      	cmp	r8, r7
 800b51a:	ee08 0a10 	vmov	s16, r0
 800b51e:	f04f 0300 	mov.w	r3, #0
 800b522:	f04f 020a 	mov.w	r2, #10
 800b526:	4641      	mov	r1, r8
 800b528:	4620      	mov	r0, r4
 800b52a:	d106      	bne.n	800b53a <_dtoa_r+0xb0a>
 800b52c:	f000 fd3e 	bl	800bfac <__multadd>
 800b530:	4680      	mov	r8, r0
 800b532:	4607      	mov	r7, r0
 800b534:	f109 0901 	add.w	r9, r9, #1
 800b538:	e772      	b.n	800b420 <_dtoa_r+0x9f0>
 800b53a:	f000 fd37 	bl	800bfac <__multadd>
 800b53e:	4639      	mov	r1, r7
 800b540:	4680      	mov	r8, r0
 800b542:	2300      	movs	r3, #0
 800b544:	220a      	movs	r2, #10
 800b546:	4620      	mov	r0, r4
 800b548:	f000 fd30 	bl	800bfac <__multadd>
 800b54c:	4607      	mov	r7, r0
 800b54e:	e7f1      	b.n	800b534 <_dtoa_r+0xb04>
 800b550:	9b03      	ldr	r3, [sp, #12]
 800b552:	9302      	str	r3, [sp, #8]
 800b554:	9d01      	ldr	r5, [sp, #4]
 800b556:	ee18 0a10 	vmov	r0, s16
 800b55a:	4631      	mov	r1, r6
 800b55c:	f7ff f9da 	bl	800a914 <quorem>
 800b560:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b564:	9b01      	ldr	r3, [sp, #4]
 800b566:	f805 ab01 	strb.w	sl, [r5], #1
 800b56a:	1aea      	subs	r2, r5, r3
 800b56c:	9b02      	ldr	r3, [sp, #8]
 800b56e:	4293      	cmp	r3, r2
 800b570:	dd09      	ble.n	800b586 <_dtoa_r+0xb56>
 800b572:	ee18 1a10 	vmov	r1, s16
 800b576:	2300      	movs	r3, #0
 800b578:	220a      	movs	r2, #10
 800b57a:	4620      	mov	r0, r4
 800b57c:	f000 fd16 	bl	800bfac <__multadd>
 800b580:	ee08 0a10 	vmov	s16, r0
 800b584:	e7e7      	b.n	800b556 <_dtoa_r+0xb26>
 800b586:	9b02      	ldr	r3, [sp, #8]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	bfc8      	it	gt
 800b58c:	461d      	movgt	r5, r3
 800b58e:	9b01      	ldr	r3, [sp, #4]
 800b590:	bfd8      	it	le
 800b592:	2501      	movle	r5, #1
 800b594:	441d      	add	r5, r3
 800b596:	f04f 0800 	mov.w	r8, #0
 800b59a:	ee18 1a10 	vmov	r1, s16
 800b59e:	2201      	movs	r2, #1
 800b5a0:	4620      	mov	r0, r4
 800b5a2:	f000 fefd 	bl	800c3a0 <__lshift>
 800b5a6:	4631      	mov	r1, r6
 800b5a8:	ee08 0a10 	vmov	s16, r0
 800b5ac:	f000 ff68 	bl	800c480 <__mcmp>
 800b5b0:	2800      	cmp	r0, #0
 800b5b2:	dc91      	bgt.n	800b4d8 <_dtoa_r+0xaa8>
 800b5b4:	d102      	bne.n	800b5bc <_dtoa_r+0xb8c>
 800b5b6:	f01a 0f01 	tst.w	sl, #1
 800b5ba:	d18d      	bne.n	800b4d8 <_dtoa_r+0xaa8>
 800b5bc:	462b      	mov	r3, r5
 800b5be:	461d      	mov	r5, r3
 800b5c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b5c4:	2a30      	cmp	r2, #48	; 0x30
 800b5c6:	d0fa      	beq.n	800b5be <_dtoa_r+0xb8e>
 800b5c8:	e6d7      	b.n	800b37a <_dtoa_r+0x94a>
 800b5ca:	9a01      	ldr	r2, [sp, #4]
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	d184      	bne.n	800b4da <_dtoa_r+0xaaa>
 800b5d0:	9b00      	ldr	r3, [sp, #0]
 800b5d2:	3301      	adds	r3, #1
 800b5d4:	9300      	str	r3, [sp, #0]
 800b5d6:	2331      	movs	r3, #49	; 0x31
 800b5d8:	7013      	strb	r3, [r2, #0]
 800b5da:	e6ce      	b.n	800b37a <_dtoa_r+0x94a>
 800b5dc:	4b09      	ldr	r3, [pc, #36]	; (800b604 <_dtoa_r+0xbd4>)
 800b5de:	f7ff ba95 	b.w	800ab0c <_dtoa_r+0xdc>
 800b5e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	f47f aa6e 	bne.w	800aac6 <_dtoa_r+0x96>
 800b5ea:	4b07      	ldr	r3, [pc, #28]	; (800b608 <_dtoa_r+0xbd8>)
 800b5ec:	f7ff ba8e 	b.w	800ab0c <_dtoa_r+0xdc>
 800b5f0:	9b02      	ldr	r3, [sp, #8]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	dcae      	bgt.n	800b554 <_dtoa_r+0xb24>
 800b5f6:	9b06      	ldr	r3, [sp, #24]
 800b5f8:	2b02      	cmp	r3, #2
 800b5fa:	f73f aea8 	bgt.w	800b34e <_dtoa_r+0x91e>
 800b5fe:	e7a9      	b.n	800b554 <_dtoa_r+0xb24>
 800b600:	0800d6c0 	.word	0x0800d6c0
 800b604:	0800d4c0 	.word	0x0800d4c0
 800b608:	0800d641 	.word	0x0800d641

0800b60c <__sflush_r>:
 800b60c:	898a      	ldrh	r2, [r1, #12]
 800b60e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b612:	4605      	mov	r5, r0
 800b614:	0710      	lsls	r0, r2, #28
 800b616:	460c      	mov	r4, r1
 800b618:	d458      	bmi.n	800b6cc <__sflush_r+0xc0>
 800b61a:	684b      	ldr	r3, [r1, #4]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	dc05      	bgt.n	800b62c <__sflush_r+0x20>
 800b620:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b622:	2b00      	cmp	r3, #0
 800b624:	dc02      	bgt.n	800b62c <__sflush_r+0x20>
 800b626:	2000      	movs	r0, #0
 800b628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b62c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b62e:	2e00      	cmp	r6, #0
 800b630:	d0f9      	beq.n	800b626 <__sflush_r+0x1a>
 800b632:	2300      	movs	r3, #0
 800b634:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b638:	682f      	ldr	r7, [r5, #0]
 800b63a:	602b      	str	r3, [r5, #0]
 800b63c:	d032      	beq.n	800b6a4 <__sflush_r+0x98>
 800b63e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b640:	89a3      	ldrh	r3, [r4, #12]
 800b642:	075a      	lsls	r2, r3, #29
 800b644:	d505      	bpl.n	800b652 <__sflush_r+0x46>
 800b646:	6863      	ldr	r3, [r4, #4]
 800b648:	1ac0      	subs	r0, r0, r3
 800b64a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b64c:	b10b      	cbz	r3, 800b652 <__sflush_r+0x46>
 800b64e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b650:	1ac0      	subs	r0, r0, r3
 800b652:	2300      	movs	r3, #0
 800b654:	4602      	mov	r2, r0
 800b656:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b658:	6a21      	ldr	r1, [r4, #32]
 800b65a:	4628      	mov	r0, r5
 800b65c:	47b0      	blx	r6
 800b65e:	1c43      	adds	r3, r0, #1
 800b660:	89a3      	ldrh	r3, [r4, #12]
 800b662:	d106      	bne.n	800b672 <__sflush_r+0x66>
 800b664:	6829      	ldr	r1, [r5, #0]
 800b666:	291d      	cmp	r1, #29
 800b668:	d82c      	bhi.n	800b6c4 <__sflush_r+0xb8>
 800b66a:	4a2a      	ldr	r2, [pc, #168]	; (800b714 <__sflush_r+0x108>)
 800b66c:	40ca      	lsrs	r2, r1
 800b66e:	07d6      	lsls	r6, r2, #31
 800b670:	d528      	bpl.n	800b6c4 <__sflush_r+0xb8>
 800b672:	2200      	movs	r2, #0
 800b674:	6062      	str	r2, [r4, #4]
 800b676:	04d9      	lsls	r1, r3, #19
 800b678:	6922      	ldr	r2, [r4, #16]
 800b67a:	6022      	str	r2, [r4, #0]
 800b67c:	d504      	bpl.n	800b688 <__sflush_r+0x7c>
 800b67e:	1c42      	adds	r2, r0, #1
 800b680:	d101      	bne.n	800b686 <__sflush_r+0x7a>
 800b682:	682b      	ldr	r3, [r5, #0]
 800b684:	b903      	cbnz	r3, 800b688 <__sflush_r+0x7c>
 800b686:	6560      	str	r0, [r4, #84]	; 0x54
 800b688:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b68a:	602f      	str	r7, [r5, #0]
 800b68c:	2900      	cmp	r1, #0
 800b68e:	d0ca      	beq.n	800b626 <__sflush_r+0x1a>
 800b690:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b694:	4299      	cmp	r1, r3
 800b696:	d002      	beq.n	800b69e <__sflush_r+0x92>
 800b698:	4628      	mov	r0, r5
 800b69a:	f001 f8fd 	bl	800c898 <_free_r>
 800b69e:	2000      	movs	r0, #0
 800b6a0:	6360      	str	r0, [r4, #52]	; 0x34
 800b6a2:	e7c1      	b.n	800b628 <__sflush_r+0x1c>
 800b6a4:	6a21      	ldr	r1, [r4, #32]
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	4628      	mov	r0, r5
 800b6aa:	47b0      	blx	r6
 800b6ac:	1c41      	adds	r1, r0, #1
 800b6ae:	d1c7      	bne.n	800b640 <__sflush_r+0x34>
 800b6b0:	682b      	ldr	r3, [r5, #0]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d0c4      	beq.n	800b640 <__sflush_r+0x34>
 800b6b6:	2b1d      	cmp	r3, #29
 800b6b8:	d001      	beq.n	800b6be <__sflush_r+0xb2>
 800b6ba:	2b16      	cmp	r3, #22
 800b6bc:	d101      	bne.n	800b6c2 <__sflush_r+0xb6>
 800b6be:	602f      	str	r7, [r5, #0]
 800b6c0:	e7b1      	b.n	800b626 <__sflush_r+0x1a>
 800b6c2:	89a3      	ldrh	r3, [r4, #12]
 800b6c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6c8:	81a3      	strh	r3, [r4, #12]
 800b6ca:	e7ad      	b.n	800b628 <__sflush_r+0x1c>
 800b6cc:	690f      	ldr	r7, [r1, #16]
 800b6ce:	2f00      	cmp	r7, #0
 800b6d0:	d0a9      	beq.n	800b626 <__sflush_r+0x1a>
 800b6d2:	0793      	lsls	r3, r2, #30
 800b6d4:	680e      	ldr	r6, [r1, #0]
 800b6d6:	bf08      	it	eq
 800b6d8:	694b      	ldreq	r3, [r1, #20]
 800b6da:	600f      	str	r7, [r1, #0]
 800b6dc:	bf18      	it	ne
 800b6de:	2300      	movne	r3, #0
 800b6e0:	eba6 0807 	sub.w	r8, r6, r7
 800b6e4:	608b      	str	r3, [r1, #8]
 800b6e6:	f1b8 0f00 	cmp.w	r8, #0
 800b6ea:	dd9c      	ble.n	800b626 <__sflush_r+0x1a>
 800b6ec:	6a21      	ldr	r1, [r4, #32]
 800b6ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b6f0:	4643      	mov	r3, r8
 800b6f2:	463a      	mov	r2, r7
 800b6f4:	4628      	mov	r0, r5
 800b6f6:	47b0      	blx	r6
 800b6f8:	2800      	cmp	r0, #0
 800b6fa:	dc06      	bgt.n	800b70a <__sflush_r+0xfe>
 800b6fc:	89a3      	ldrh	r3, [r4, #12]
 800b6fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b702:	81a3      	strh	r3, [r4, #12]
 800b704:	f04f 30ff 	mov.w	r0, #4294967295
 800b708:	e78e      	b.n	800b628 <__sflush_r+0x1c>
 800b70a:	4407      	add	r7, r0
 800b70c:	eba8 0800 	sub.w	r8, r8, r0
 800b710:	e7e9      	b.n	800b6e6 <__sflush_r+0xda>
 800b712:	bf00      	nop
 800b714:	20400001 	.word	0x20400001

0800b718 <_fflush_r>:
 800b718:	b538      	push	{r3, r4, r5, lr}
 800b71a:	690b      	ldr	r3, [r1, #16]
 800b71c:	4605      	mov	r5, r0
 800b71e:	460c      	mov	r4, r1
 800b720:	b913      	cbnz	r3, 800b728 <_fflush_r+0x10>
 800b722:	2500      	movs	r5, #0
 800b724:	4628      	mov	r0, r5
 800b726:	bd38      	pop	{r3, r4, r5, pc}
 800b728:	b118      	cbz	r0, 800b732 <_fflush_r+0x1a>
 800b72a:	6983      	ldr	r3, [r0, #24]
 800b72c:	b90b      	cbnz	r3, 800b732 <_fflush_r+0x1a>
 800b72e:	f7fd f953 	bl	80089d8 <__sinit>
 800b732:	4b14      	ldr	r3, [pc, #80]	; (800b784 <_fflush_r+0x6c>)
 800b734:	429c      	cmp	r4, r3
 800b736:	d11b      	bne.n	800b770 <_fflush_r+0x58>
 800b738:	686c      	ldr	r4, [r5, #4]
 800b73a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d0ef      	beq.n	800b722 <_fflush_r+0xa>
 800b742:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b744:	07d0      	lsls	r0, r2, #31
 800b746:	d404      	bmi.n	800b752 <_fflush_r+0x3a>
 800b748:	0599      	lsls	r1, r3, #22
 800b74a:	d402      	bmi.n	800b752 <_fflush_r+0x3a>
 800b74c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b74e:	f7fd fa06 	bl	8008b5e <__retarget_lock_acquire_recursive>
 800b752:	4628      	mov	r0, r5
 800b754:	4621      	mov	r1, r4
 800b756:	f7ff ff59 	bl	800b60c <__sflush_r>
 800b75a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b75c:	07da      	lsls	r2, r3, #31
 800b75e:	4605      	mov	r5, r0
 800b760:	d4e0      	bmi.n	800b724 <_fflush_r+0xc>
 800b762:	89a3      	ldrh	r3, [r4, #12]
 800b764:	059b      	lsls	r3, r3, #22
 800b766:	d4dd      	bmi.n	800b724 <_fflush_r+0xc>
 800b768:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b76a:	f7fd f9f9 	bl	8008b60 <__retarget_lock_release_recursive>
 800b76e:	e7d9      	b.n	800b724 <_fflush_r+0xc>
 800b770:	4b05      	ldr	r3, [pc, #20]	; (800b788 <_fflush_r+0x70>)
 800b772:	429c      	cmp	r4, r3
 800b774:	d101      	bne.n	800b77a <_fflush_r+0x62>
 800b776:	68ac      	ldr	r4, [r5, #8]
 800b778:	e7df      	b.n	800b73a <_fflush_r+0x22>
 800b77a:	4b04      	ldr	r3, [pc, #16]	; (800b78c <_fflush_r+0x74>)
 800b77c:	429c      	cmp	r4, r3
 800b77e:	bf08      	it	eq
 800b780:	68ec      	ldreq	r4, [r5, #12]
 800b782:	e7da      	b.n	800b73a <_fflush_r+0x22>
 800b784:	0800d46c 	.word	0x0800d46c
 800b788:	0800d48c 	.word	0x0800d48c
 800b78c:	0800d44c 	.word	0x0800d44c

0800b790 <rshift>:
 800b790:	6903      	ldr	r3, [r0, #16]
 800b792:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b796:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b79a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b79e:	f100 0414 	add.w	r4, r0, #20
 800b7a2:	dd45      	ble.n	800b830 <rshift+0xa0>
 800b7a4:	f011 011f 	ands.w	r1, r1, #31
 800b7a8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b7ac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b7b0:	d10c      	bne.n	800b7cc <rshift+0x3c>
 800b7b2:	f100 0710 	add.w	r7, r0, #16
 800b7b6:	4629      	mov	r1, r5
 800b7b8:	42b1      	cmp	r1, r6
 800b7ba:	d334      	bcc.n	800b826 <rshift+0x96>
 800b7bc:	1a9b      	subs	r3, r3, r2
 800b7be:	009b      	lsls	r3, r3, #2
 800b7c0:	1eea      	subs	r2, r5, #3
 800b7c2:	4296      	cmp	r6, r2
 800b7c4:	bf38      	it	cc
 800b7c6:	2300      	movcc	r3, #0
 800b7c8:	4423      	add	r3, r4
 800b7ca:	e015      	b.n	800b7f8 <rshift+0x68>
 800b7cc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b7d0:	f1c1 0820 	rsb	r8, r1, #32
 800b7d4:	40cf      	lsrs	r7, r1
 800b7d6:	f105 0e04 	add.w	lr, r5, #4
 800b7da:	46a1      	mov	r9, r4
 800b7dc:	4576      	cmp	r6, lr
 800b7de:	46f4      	mov	ip, lr
 800b7e0:	d815      	bhi.n	800b80e <rshift+0x7e>
 800b7e2:	1a9a      	subs	r2, r3, r2
 800b7e4:	0092      	lsls	r2, r2, #2
 800b7e6:	3a04      	subs	r2, #4
 800b7e8:	3501      	adds	r5, #1
 800b7ea:	42ae      	cmp	r6, r5
 800b7ec:	bf38      	it	cc
 800b7ee:	2200      	movcc	r2, #0
 800b7f0:	18a3      	adds	r3, r4, r2
 800b7f2:	50a7      	str	r7, [r4, r2]
 800b7f4:	b107      	cbz	r7, 800b7f8 <rshift+0x68>
 800b7f6:	3304      	adds	r3, #4
 800b7f8:	1b1a      	subs	r2, r3, r4
 800b7fa:	42a3      	cmp	r3, r4
 800b7fc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b800:	bf08      	it	eq
 800b802:	2300      	moveq	r3, #0
 800b804:	6102      	str	r2, [r0, #16]
 800b806:	bf08      	it	eq
 800b808:	6143      	streq	r3, [r0, #20]
 800b80a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b80e:	f8dc c000 	ldr.w	ip, [ip]
 800b812:	fa0c fc08 	lsl.w	ip, ip, r8
 800b816:	ea4c 0707 	orr.w	r7, ip, r7
 800b81a:	f849 7b04 	str.w	r7, [r9], #4
 800b81e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b822:	40cf      	lsrs	r7, r1
 800b824:	e7da      	b.n	800b7dc <rshift+0x4c>
 800b826:	f851 cb04 	ldr.w	ip, [r1], #4
 800b82a:	f847 cf04 	str.w	ip, [r7, #4]!
 800b82e:	e7c3      	b.n	800b7b8 <rshift+0x28>
 800b830:	4623      	mov	r3, r4
 800b832:	e7e1      	b.n	800b7f8 <rshift+0x68>

0800b834 <__hexdig_fun>:
 800b834:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b838:	2b09      	cmp	r3, #9
 800b83a:	d802      	bhi.n	800b842 <__hexdig_fun+0xe>
 800b83c:	3820      	subs	r0, #32
 800b83e:	b2c0      	uxtb	r0, r0
 800b840:	4770      	bx	lr
 800b842:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b846:	2b05      	cmp	r3, #5
 800b848:	d801      	bhi.n	800b84e <__hexdig_fun+0x1a>
 800b84a:	3847      	subs	r0, #71	; 0x47
 800b84c:	e7f7      	b.n	800b83e <__hexdig_fun+0xa>
 800b84e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b852:	2b05      	cmp	r3, #5
 800b854:	d801      	bhi.n	800b85a <__hexdig_fun+0x26>
 800b856:	3827      	subs	r0, #39	; 0x27
 800b858:	e7f1      	b.n	800b83e <__hexdig_fun+0xa>
 800b85a:	2000      	movs	r0, #0
 800b85c:	4770      	bx	lr
	...

0800b860 <__gethex>:
 800b860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b864:	ed2d 8b02 	vpush	{d8}
 800b868:	b089      	sub	sp, #36	; 0x24
 800b86a:	ee08 0a10 	vmov	s16, r0
 800b86e:	9304      	str	r3, [sp, #16]
 800b870:	4bb4      	ldr	r3, [pc, #720]	; (800bb44 <__gethex+0x2e4>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	9301      	str	r3, [sp, #4]
 800b876:	4618      	mov	r0, r3
 800b878:	468b      	mov	fp, r1
 800b87a:	4690      	mov	r8, r2
 800b87c:	f7f4 fcb0 	bl	80001e0 <strlen>
 800b880:	9b01      	ldr	r3, [sp, #4]
 800b882:	f8db 2000 	ldr.w	r2, [fp]
 800b886:	4403      	add	r3, r0
 800b888:	4682      	mov	sl, r0
 800b88a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b88e:	9305      	str	r3, [sp, #20]
 800b890:	1c93      	adds	r3, r2, #2
 800b892:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b896:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b89a:	32fe      	adds	r2, #254	; 0xfe
 800b89c:	18d1      	adds	r1, r2, r3
 800b89e:	461f      	mov	r7, r3
 800b8a0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b8a4:	9100      	str	r1, [sp, #0]
 800b8a6:	2830      	cmp	r0, #48	; 0x30
 800b8a8:	d0f8      	beq.n	800b89c <__gethex+0x3c>
 800b8aa:	f7ff ffc3 	bl	800b834 <__hexdig_fun>
 800b8ae:	4604      	mov	r4, r0
 800b8b0:	2800      	cmp	r0, #0
 800b8b2:	d13a      	bne.n	800b92a <__gethex+0xca>
 800b8b4:	9901      	ldr	r1, [sp, #4]
 800b8b6:	4652      	mov	r2, sl
 800b8b8:	4638      	mov	r0, r7
 800b8ba:	f001 f9b1 	bl	800cc20 <strncmp>
 800b8be:	4605      	mov	r5, r0
 800b8c0:	2800      	cmp	r0, #0
 800b8c2:	d168      	bne.n	800b996 <__gethex+0x136>
 800b8c4:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b8c8:	eb07 060a 	add.w	r6, r7, sl
 800b8cc:	f7ff ffb2 	bl	800b834 <__hexdig_fun>
 800b8d0:	2800      	cmp	r0, #0
 800b8d2:	d062      	beq.n	800b99a <__gethex+0x13a>
 800b8d4:	4633      	mov	r3, r6
 800b8d6:	7818      	ldrb	r0, [r3, #0]
 800b8d8:	2830      	cmp	r0, #48	; 0x30
 800b8da:	461f      	mov	r7, r3
 800b8dc:	f103 0301 	add.w	r3, r3, #1
 800b8e0:	d0f9      	beq.n	800b8d6 <__gethex+0x76>
 800b8e2:	f7ff ffa7 	bl	800b834 <__hexdig_fun>
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	fab0 f480 	clz	r4, r0
 800b8ec:	0964      	lsrs	r4, r4, #5
 800b8ee:	4635      	mov	r5, r6
 800b8f0:	9300      	str	r3, [sp, #0]
 800b8f2:	463a      	mov	r2, r7
 800b8f4:	4616      	mov	r6, r2
 800b8f6:	3201      	adds	r2, #1
 800b8f8:	7830      	ldrb	r0, [r6, #0]
 800b8fa:	f7ff ff9b 	bl	800b834 <__hexdig_fun>
 800b8fe:	2800      	cmp	r0, #0
 800b900:	d1f8      	bne.n	800b8f4 <__gethex+0x94>
 800b902:	9901      	ldr	r1, [sp, #4]
 800b904:	4652      	mov	r2, sl
 800b906:	4630      	mov	r0, r6
 800b908:	f001 f98a 	bl	800cc20 <strncmp>
 800b90c:	b980      	cbnz	r0, 800b930 <__gethex+0xd0>
 800b90e:	b94d      	cbnz	r5, 800b924 <__gethex+0xc4>
 800b910:	eb06 050a 	add.w	r5, r6, sl
 800b914:	462a      	mov	r2, r5
 800b916:	4616      	mov	r6, r2
 800b918:	3201      	adds	r2, #1
 800b91a:	7830      	ldrb	r0, [r6, #0]
 800b91c:	f7ff ff8a 	bl	800b834 <__hexdig_fun>
 800b920:	2800      	cmp	r0, #0
 800b922:	d1f8      	bne.n	800b916 <__gethex+0xb6>
 800b924:	1bad      	subs	r5, r5, r6
 800b926:	00ad      	lsls	r5, r5, #2
 800b928:	e004      	b.n	800b934 <__gethex+0xd4>
 800b92a:	2400      	movs	r4, #0
 800b92c:	4625      	mov	r5, r4
 800b92e:	e7e0      	b.n	800b8f2 <__gethex+0x92>
 800b930:	2d00      	cmp	r5, #0
 800b932:	d1f7      	bne.n	800b924 <__gethex+0xc4>
 800b934:	7833      	ldrb	r3, [r6, #0]
 800b936:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b93a:	2b50      	cmp	r3, #80	; 0x50
 800b93c:	d13b      	bne.n	800b9b6 <__gethex+0x156>
 800b93e:	7873      	ldrb	r3, [r6, #1]
 800b940:	2b2b      	cmp	r3, #43	; 0x2b
 800b942:	d02c      	beq.n	800b99e <__gethex+0x13e>
 800b944:	2b2d      	cmp	r3, #45	; 0x2d
 800b946:	d02e      	beq.n	800b9a6 <__gethex+0x146>
 800b948:	1c71      	adds	r1, r6, #1
 800b94a:	f04f 0900 	mov.w	r9, #0
 800b94e:	7808      	ldrb	r0, [r1, #0]
 800b950:	f7ff ff70 	bl	800b834 <__hexdig_fun>
 800b954:	1e43      	subs	r3, r0, #1
 800b956:	b2db      	uxtb	r3, r3
 800b958:	2b18      	cmp	r3, #24
 800b95a:	d82c      	bhi.n	800b9b6 <__gethex+0x156>
 800b95c:	f1a0 0210 	sub.w	r2, r0, #16
 800b960:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b964:	f7ff ff66 	bl	800b834 <__hexdig_fun>
 800b968:	1e43      	subs	r3, r0, #1
 800b96a:	b2db      	uxtb	r3, r3
 800b96c:	2b18      	cmp	r3, #24
 800b96e:	d91d      	bls.n	800b9ac <__gethex+0x14c>
 800b970:	f1b9 0f00 	cmp.w	r9, #0
 800b974:	d000      	beq.n	800b978 <__gethex+0x118>
 800b976:	4252      	negs	r2, r2
 800b978:	4415      	add	r5, r2
 800b97a:	f8cb 1000 	str.w	r1, [fp]
 800b97e:	b1e4      	cbz	r4, 800b9ba <__gethex+0x15a>
 800b980:	9b00      	ldr	r3, [sp, #0]
 800b982:	2b00      	cmp	r3, #0
 800b984:	bf14      	ite	ne
 800b986:	2700      	movne	r7, #0
 800b988:	2706      	moveq	r7, #6
 800b98a:	4638      	mov	r0, r7
 800b98c:	b009      	add	sp, #36	; 0x24
 800b98e:	ecbd 8b02 	vpop	{d8}
 800b992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b996:	463e      	mov	r6, r7
 800b998:	4625      	mov	r5, r4
 800b99a:	2401      	movs	r4, #1
 800b99c:	e7ca      	b.n	800b934 <__gethex+0xd4>
 800b99e:	f04f 0900 	mov.w	r9, #0
 800b9a2:	1cb1      	adds	r1, r6, #2
 800b9a4:	e7d3      	b.n	800b94e <__gethex+0xee>
 800b9a6:	f04f 0901 	mov.w	r9, #1
 800b9aa:	e7fa      	b.n	800b9a2 <__gethex+0x142>
 800b9ac:	230a      	movs	r3, #10
 800b9ae:	fb03 0202 	mla	r2, r3, r2, r0
 800b9b2:	3a10      	subs	r2, #16
 800b9b4:	e7d4      	b.n	800b960 <__gethex+0x100>
 800b9b6:	4631      	mov	r1, r6
 800b9b8:	e7df      	b.n	800b97a <__gethex+0x11a>
 800b9ba:	1bf3      	subs	r3, r6, r7
 800b9bc:	3b01      	subs	r3, #1
 800b9be:	4621      	mov	r1, r4
 800b9c0:	2b07      	cmp	r3, #7
 800b9c2:	dc0b      	bgt.n	800b9dc <__gethex+0x17c>
 800b9c4:	ee18 0a10 	vmov	r0, s16
 800b9c8:	f000 fa8e 	bl	800bee8 <_Balloc>
 800b9cc:	4604      	mov	r4, r0
 800b9ce:	b940      	cbnz	r0, 800b9e2 <__gethex+0x182>
 800b9d0:	4b5d      	ldr	r3, [pc, #372]	; (800bb48 <__gethex+0x2e8>)
 800b9d2:	4602      	mov	r2, r0
 800b9d4:	21de      	movs	r1, #222	; 0xde
 800b9d6:	485d      	ldr	r0, [pc, #372]	; (800bb4c <__gethex+0x2ec>)
 800b9d8:	f001 f944 	bl	800cc64 <__assert_func>
 800b9dc:	3101      	adds	r1, #1
 800b9de:	105b      	asrs	r3, r3, #1
 800b9e0:	e7ee      	b.n	800b9c0 <__gethex+0x160>
 800b9e2:	f100 0914 	add.w	r9, r0, #20
 800b9e6:	f04f 0b00 	mov.w	fp, #0
 800b9ea:	f1ca 0301 	rsb	r3, sl, #1
 800b9ee:	f8cd 9008 	str.w	r9, [sp, #8]
 800b9f2:	f8cd b000 	str.w	fp, [sp]
 800b9f6:	9306      	str	r3, [sp, #24]
 800b9f8:	42b7      	cmp	r7, r6
 800b9fa:	d340      	bcc.n	800ba7e <__gethex+0x21e>
 800b9fc:	9802      	ldr	r0, [sp, #8]
 800b9fe:	9b00      	ldr	r3, [sp, #0]
 800ba00:	f840 3b04 	str.w	r3, [r0], #4
 800ba04:	eba0 0009 	sub.w	r0, r0, r9
 800ba08:	1080      	asrs	r0, r0, #2
 800ba0a:	0146      	lsls	r6, r0, #5
 800ba0c:	6120      	str	r0, [r4, #16]
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f000 fb5c 	bl	800c0cc <__hi0bits>
 800ba14:	1a30      	subs	r0, r6, r0
 800ba16:	f8d8 6000 	ldr.w	r6, [r8]
 800ba1a:	42b0      	cmp	r0, r6
 800ba1c:	dd63      	ble.n	800bae6 <__gethex+0x286>
 800ba1e:	1b87      	subs	r7, r0, r6
 800ba20:	4639      	mov	r1, r7
 800ba22:	4620      	mov	r0, r4
 800ba24:	f000 ff00 	bl	800c828 <__any_on>
 800ba28:	4682      	mov	sl, r0
 800ba2a:	b1a8      	cbz	r0, 800ba58 <__gethex+0x1f8>
 800ba2c:	1e7b      	subs	r3, r7, #1
 800ba2e:	1159      	asrs	r1, r3, #5
 800ba30:	f003 021f 	and.w	r2, r3, #31
 800ba34:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ba38:	f04f 0a01 	mov.w	sl, #1
 800ba3c:	fa0a f202 	lsl.w	r2, sl, r2
 800ba40:	420a      	tst	r2, r1
 800ba42:	d009      	beq.n	800ba58 <__gethex+0x1f8>
 800ba44:	4553      	cmp	r3, sl
 800ba46:	dd05      	ble.n	800ba54 <__gethex+0x1f4>
 800ba48:	1eb9      	subs	r1, r7, #2
 800ba4a:	4620      	mov	r0, r4
 800ba4c:	f000 feec 	bl	800c828 <__any_on>
 800ba50:	2800      	cmp	r0, #0
 800ba52:	d145      	bne.n	800bae0 <__gethex+0x280>
 800ba54:	f04f 0a02 	mov.w	sl, #2
 800ba58:	4639      	mov	r1, r7
 800ba5a:	4620      	mov	r0, r4
 800ba5c:	f7ff fe98 	bl	800b790 <rshift>
 800ba60:	443d      	add	r5, r7
 800ba62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ba66:	42ab      	cmp	r3, r5
 800ba68:	da4c      	bge.n	800bb04 <__gethex+0x2a4>
 800ba6a:	ee18 0a10 	vmov	r0, s16
 800ba6e:	4621      	mov	r1, r4
 800ba70:	f000 fa7a 	bl	800bf68 <_Bfree>
 800ba74:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ba76:	2300      	movs	r3, #0
 800ba78:	6013      	str	r3, [r2, #0]
 800ba7a:	27a3      	movs	r7, #163	; 0xa3
 800ba7c:	e785      	b.n	800b98a <__gethex+0x12a>
 800ba7e:	1e73      	subs	r3, r6, #1
 800ba80:	9a05      	ldr	r2, [sp, #20]
 800ba82:	9303      	str	r3, [sp, #12]
 800ba84:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ba88:	4293      	cmp	r3, r2
 800ba8a:	d019      	beq.n	800bac0 <__gethex+0x260>
 800ba8c:	f1bb 0f20 	cmp.w	fp, #32
 800ba90:	d107      	bne.n	800baa2 <__gethex+0x242>
 800ba92:	9b02      	ldr	r3, [sp, #8]
 800ba94:	9a00      	ldr	r2, [sp, #0]
 800ba96:	f843 2b04 	str.w	r2, [r3], #4
 800ba9a:	9302      	str	r3, [sp, #8]
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	9300      	str	r3, [sp, #0]
 800baa0:	469b      	mov	fp, r3
 800baa2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800baa6:	f7ff fec5 	bl	800b834 <__hexdig_fun>
 800baaa:	9b00      	ldr	r3, [sp, #0]
 800baac:	f000 000f 	and.w	r0, r0, #15
 800bab0:	fa00 f00b 	lsl.w	r0, r0, fp
 800bab4:	4303      	orrs	r3, r0
 800bab6:	9300      	str	r3, [sp, #0]
 800bab8:	f10b 0b04 	add.w	fp, fp, #4
 800babc:	9b03      	ldr	r3, [sp, #12]
 800babe:	e00d      	b.n	800badc <__gethex+0x27c>
 800bac0:	9b03      	ldr	r3, [sp, #12]
 800bac2:	9a06      	ldr	r2, [sp, #24]
 800bac4:	4413      	add	r3, r2
 800bac6:	42bb      	cmp	r3, r7
 800bac8:	d3e0      	bcc.n	800ba8c <__gethex+0x22c>
 800baca:	4618      	mov	r0, r3
 800bacc:	9901      	ldr	r1, [sp, #4]
 800bace:	9307      	str	r3, [sp, #28]
 800bad0:	4652      	mov	r2, sl
 800bad2:	f001 f8a5 	bl	800cc20 <strncmp>
 800bad6:	9b07      	ldr	r3, [sp, #28]
 800bad8:	2800      	cmp	r0, #0
 800bada:	d1d7      	bne.n	800ba8c <__gethex+0x22c>
 800badc:	461e      	mov	r6, r3
 800bade:	e78b      	b.n	800b9f8 <__gethex+0x198>
 800bae0:	f04f 0a03 	mov.w	sl, #3
 800bae4:	e7b8      	b.n	800ba58 <__gethex+0x1f8>
 800bae6:	da0a      	bge.n	800bafe <__gethex+0x29e>
 800bae8:	1a37      	subs	r7, r6, r0
 800baea:	4621      	mov	r1, r4
 800baec:	ee18 0a10 	vmov	r0, s16
 800baf0:	463a      	mov	r2, r7
 800baf2:	f000 fc55 	bl	800c3a0 <__lshift>
 800baf6:	1bed      	subs	r5, r5, r7
 800baf8:	4604      	mov	r4, r0
 800bafa:	f100 0914 	add.w	r9, r0, #20
 800bafe:	f04f 0a00 	mov.w	sl, #0
 800bb02:	e7ae      	b.n	800ba62 <__gethex+0x202>
 800bb04:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bb08:	42a8      	cmp	r0, r5
 800bb0a:	dd72      	ble.n	800bbf2 <__gethex+0x392>
 800bb0c:	1b45      	subs	r5, r0, r5
 800bb0e:	42ae      	cmp	r6, r5
 800bb10:	dc36      	bgt.n	800bb80 <__gethex+0x320>
 800bb12:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bb16:	2b02      	cmp	r3, #2
 800bb18:	d02a      	beq.n	800bb70 <__gethex+0x310>
 800bb1a:	2b03      	cmp	r3, #3
 800bb1c:	d02c      	beq.n	800bb78 <__gethex+0x318>
 800bb1e:	2b01      	cmp	r3, #1
 800bb20:	d11c      	bne.n	800bb5c <__gethex+0x2fc>
 800bb22:	42ae      	cmp	r6, r5
 800bb24:	d11a      	bne.n	800bb5c <__gethex+0x2fc>
 800bb26:	2e01      	cmp	r6, #1
 800bb28:	d112      	bne.n	800bb50 <__gethex+0x2f0>
 800bb2a:	9a04      	ldr	r2, [sp, #16]
 800bb2c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bb30:	6013      	str	r3, [r2, #0]
 800bb32:	2301      	movs	r3, #1
 800bb34:	6123      	str	r3, [r4, #16]
 800bb36:	f8c9 3000 	str.w	r3, [r9]
 800bb3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bb3c:	2762      	movs	r7, #98	; 0x62
 800bb3e:	601c      	str	r4, [r3, #0]
 800bb40:	e723      	b.n	800b98a <__gethex+0x12a>
 800bb42:	bf00      	nop
 800bb44:	0800d738 	.word	0x0800d738
 800bb48:	0800d6c0 	.word	0x0800d6c0
 800bb4c:	0800d6d1 	.word	0x0800d6d1
 800bb50:	1e71      	subs	r1, r6, #1
 800bb52:	4620      	mov	r0, r4
 800bb54:	f000 fe68 	bl	800c828 <__any_on>
 800bb58:	2800      	cmp	r0, #0
 800bb5a:	d1e6      	bne.n	800bb2a <__gethex+0x2ca>
 800bb5c:	ee18 0a10 	vmov	r0, s16
 800bb60:	4621      	mov	r1, r4
 800bb62:	f000 fa01 	bl	800bf68 <_Bfree>
 800bb66:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bb68:	2300      	movs	r3, #0
 800bb6a:	6013      	str	r3, [r2, #0]
 800bb6c:	2750      	movs	r7, #80	; 0x50
 800bb6e:	e70c      	b.n	800b98a <__gethex+0x12a>
 800bb70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d1f2      	bne.n	800bb5c <__gethex+0x2fc>
 800bb76:	e7d8      	b.n	800bb2a <__gethex+0x2ca>
 800bb78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d1d5      	bne.n	800bb2a <__gethex+0x2ca>
 800bb7e:	e7ed      	b.n	800bb5c <__gethex+0x2fc>
 800bb80:	1e6f      	subs	r7, r5, #1
 800bb82:	f1ba 0f00 	cmp.w	sl, #0
 800bb86:	d131      	bne.n	800bbec <__gethex+0x38c>
 800bb88:	b127      	cbz	r7, 800bb94 <__gethex+0x334>
 800bb8a:	4639      	mov	r1, r7
 800bb8c:	4620      	mov	r0, r4
 800bb8e:	f000 fe4b 	bl	800c828 <__any_on>
 800bb92:	4682      	mov	sl, r0
 800bb94:	117b      	asrs	r3, r7, #5
 800bb96:	2101      	movs	r1, #1
 800bb98:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800bb9c:	f007 071f 	and.w	r7, r7, #31
 800bba0:	fa01 f707 	lsl.w	r7, r1, r7
 800bba4:	421f      	tst	r7, r3
 800bba6:	4629      	mov	r1, r5
 800bba8:	4620      	mov	r0, r4
 800bbaa:	bf18      	it	ne
 800bbac:	f04a 0a02 	orrne.w	sl, sl, #2
 800bbb0:	1b76      	subs	r6, r6, r5
 800bbb2:	f7ff fded 	bl	800b790 <rshift>
 800bbb6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bbba:	2702      	movs	r7, #2
 800bbbc:	f1ba 0f00 	cmp.w	sl, #0
 800bbc0:	d048      	beq.n	800bc54 <__gethex+0x3f4>
 800bbc2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bbc6:	2b02      	cmp	r3, #2
 800bbc8:	d015      	beq.n	800bbf6 <__gethex+0x396>
 800bbca:	2b03      	cmp	r3, #3
 800bbcc:	d017      	beq.n	800bbfe <__gethex+0x39e>
 800bbce:	2b01      	cmp	r3, #1
 800bbd0:	d109      	bne.n	800bbe6 <__gethex+0x386>
 800bbd2:	f01a 0f02 	tst.w	sl, #2
 800bbd6:	d006      	beq.n	800bbe6 <__gethex+0x386>
 800bbd8:	f8d9 0000 	ldr.w	r0, [r9]
 800bbdc:	ea4a 0a00 	orr.w	sl, sl, r0
 800bbe0:	f01a 0f01 	tst.w	sl, #1
 800bbe4:	d10e      	bne.n	800bc04 <__gethex+0x3a4>
 800bbe6:	f047 0710 	orr.w	r7, r7, #16
 800bbea:	e033      	b.n	800bc54 <__gethex+0x3f4>
 800bbec:	f04f 0a01 	mov.w	sl, #1
 800bbf0:	e7d0      	b.n	800bb94 <__gethex+0x334>
 800bbf2:	2701      	movs	r7, #1
 800bbf4:	e7e2      	b.n	800bbbc <__gethex+0x35c>
 800bbf6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bbf8:	f1c3 0301 	rsb	r3, r3, #1
 800bbfc:	9315      	str	r3, [sp, #84]	; 0x54
 800bbfe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d0f0      	beq.n	800bbe6 <__gethex+0x386>
 800bc04:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bc08:	f104 0314 	add.w	r3, r4, #20
 800bc0c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bc10:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bc14:	f04f 0c00 	mov.w	ip, #0
 800bc18:	4618      	mov	r0, r3
 800bc1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc1e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bc22:	d01c      	beq.n	800bc5e <__gethex+0x3fe>
 800bc24:	3201      	adds	r2, #1
 800bc26:	6002      	str	r2, [r0, #0]
 800bc28:	2f02      	cmp	r7, #2
 800bc2a:	f104 0314 	add.w	r3, r4, #20
 800bc2e:	d13f      	bne.n	800bcb0 <__gethex+0x450>
 800bc30:	f8d8 2000 	ldr.w	r2, [r8]
 800bc34:	3a01      	subs	r2, #1
 800bc36:	42b2      	cmp	r2, r6
 800bc38:	d10a      	bne.n	800bc50 <__gethex+0x3f0>
 800bc3a:	1171      	asrs	r1, r6, #5
 800bc3c:	2201      	movs	r2, #1
 800bc3e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bc42:	f006 061f 	and.w	r6, r6, #31
 800bc46:	fa02 f606 	lsl.w	r6, r2, r6
 800bc4a:	421e      	tst	r6, r3
 800bc4c:	bf18      	it	ne
 800bc4e:	4617      	movne	r7, r2
 800bc50:	f047 0720 	orr.w	r7, r7, #32
 800bc54:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bc56:	601c      	str	r4, [r3, #0]
 800bc58:	9b04      	ldr	r3, [sp, #16]
 800bc5a:	601d      	str	r5, [r3, #0]
 800bc5c:	e695      	b.n	800b98a <__gethex+0x12a>
 800bc5e:	4299      	cmp	r1, r3
 800bc60:	f843 cc04 	str.w	ip, [r3, #-4]
 800bc64:	d8d8      	bhi.n	800bc18 <__gethex+0x3b8>
 800bc66:	68a3      	ldr	r3, [r4, #8]
 800bc68:	459b      	cmp	fp, r3
 800bc6a:	db19      	blt.n	800bca0 <__gethex+0x440>
 800bc6c:	6861      	ldr	r1, [r4, #4]
 800bc6e:	ee18 0a10 	vmov	r0, s16
 800bc72:	3101      	adds	r1, #1
 800bc74:	f000 f938 	bl	800bee8 <_Balloc>
 800bc78:	4681      	mov	r9, r0
 800bc7a:	b918      	cbnz	r0, 800bc84 <__gethex+0x424>
 800bc7c:	4b1a      	ldr	r3, [pc, #104]	; (800bce8 <__gethex+0x488>)
 800bc7e:	4602      	mov	r2, r0
 800bc80:	2184      	movs	r1, #132	; 0x84
 800bc82:	e6a8      	b.n	800b9d6 <__gethex+0x176>
 800bc84:	6922      	ldr	r2, [r4, #16]
 800bc86:	3202      	adds	r2, #2
 800bc88:	f104 010c 	add.w	r1, r4, #12
 800bc8c:	0092      	lsls	r2, r2, #2
 800bc8e:	300c      	adds	r0, #12
 800bc90:	f7fc ff67 	bl	8008b62 <memcpy>
 800bc94:	4621      	mov	r1, r4
 800bc96:	ee18 0a10 	vmov	r0, s16
 800bc9a:	f000 f965 	bl	800bf68 <_Bfree>
 800bc9e:	464c      	mov	r4, r9
 800bca0:	6923      	ldr	r3, [r4, #16]
 800bca2:	1c5a      	adds	r2, r3, #1
 800bca4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bca8:	6122      	str	r2, [r4, #16]
 800bcaa:	2201      	movs	r2, #1
 800bcac:	615a      	str	r2, [r3, #20]
 800bcae:	e7bb      	b.n	800bc28 <__gethex+0x3c8>
 800bcb0:	6922      	ldr	r2, [r4, #16]
 800bcb2:	455a      	cmp	r2, fp
 800bcb4:	dd0b      	ble.n	800bcce <__gethex+0x46e>
 800bcb6:	2101      	movs	r1, #1
 800bcb8:	4620      	mov	r0, r4
 800bcba:	f7ff fd69 	bl	800b790 <rshift>
 800bcbe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bcc2:	3501      	adds	r5, #1
 800bcc4:	42ab      	cmp	r3, r5
 800bcc6:	f6ff aed0 	blt.w	800ba6a <__gethex+0x20a>
 800bcca:	2701      	movs	r7, #1
 800bccc:	e7c0      	b.n	800bc50 <__gethex+0x3f0>
 800bcce:	f016 061f 	ands.w	r6, r6, #31
 800bcd2:	d0fa      	beq.n	800bcca <__gethex+0x46a>
 800bcd4:	4453      	add	r3, sl
 800bcd6:	f1c6 0620 	rsb	r6, r6, #32
 800bcda:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bcde:	f000 f9f5 	bl	800c0cc <__hi0bits>
 800bce2:	42b0      	cmp	r0, r6
 800bce4:	dbe7      	blt.n	800bcb6 <__gethex+0x456>
 800bce6:	e7f0      	b.n	800bcca <__gethex+0x46a>
 800bce8:	0800d6c0 	.word	0x0800d6c0

0800bcec <L_shift>:
 800bcec:	f1c2 0208 	rsb	r2, r2, #8
 800bcf0:	0092      	lsls	r2, r2, #2
 800bcf2:	b570      	push	{r4, r5, r6, lr}
 800bcf4:	f1c2 0620 	rsb	r6, r2, #32
 800bcf8:	6843      	ldr	r3, [r0, #4]
 800bcfa:	6804      	ldr	r4, [r0, #0]
 800bcfc:	fa03 f506 	lsl.w	r5, r3, r6
 800bd00:	432c      	orrs	r4, r5
 800bd02:	40d3      	lsrs	r3, r2
 800bd04:	6004      	str	r4, [r0, #0]
 800bd06:	f840 3f04 	str.w	r3, [r0, #4]!
 800bd0a:	4288      	cmp	r0, r1
 800bd0c:	d3f4      	bcc.n	800bcf8 <L_shift+0xc>
 800bd0e:	bd70      	pop	{r4, r5, r6, pc}

0800bd10 <__match>:
 800bd10:	b530      	push	{r4, r5, lr}
 800bd12:	6803      	ldr	r3, [r0, #0]
 800bd14:	3301      	adds	r3, #1
 800bd16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd1a:	b914      	cbnz	r4, 800bd22 <__match+0x12>
 800bd1c:	6003      	str	r3, [r0, #0]
 800bd1e:	2001      	movs	r0, #1
 800bd20:	bd30      	pop	{r4, r5, pc}
 800bd22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd26:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bd2a:	2d19      	cmp	r5, #25
 800bd2c:	bf98      	it	ls
 800bd2e:	3220      	addls	r2, #32
 800bd30:	42a2      	cmp	r2, r4
 800bd32:	d0f0      	beq.n	800bd16 <__match+0x6>
 800bd34:	2000      	movs	r0, #0
 800bd36:	e7f3      	b.n	800bd20 <__match+0x10>

0800bd38 <__hexnan>:
 800bd38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd3c:	680b      	ldr	r3, [r1, #0]
 800bd3e:	115e      	asrs	r6, r3, #5
 800bd40:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bd44:	f013 031f 	ands.w	r3, r3, #31
 800bd48:	b087      	sub	sp, #28
 800bd4a:	bf18      	it	ne
 800bd4c:	3604      	addne	r6, #4
 800bd4e:	2500      	movs	r5, #0
 800bd50:	1f37      	subs	r7, r6, #4
 800bd52:	4690      	mov	r8, r2
 800bd54:	6802      	ldr	r2, [r0, #0]
 800bd56:	9301      	str	r3, [sp, #4]
 800bd58:	4682      	mov	sl, r0
 800bd5a:	f846 5c04 	str.w	r5, [r6, #-4]
 800bd5e:	46b9      	mov	r9, r7
 800bd60:	463c      	mov	r4, r7
 800bd62:	9502      	str	r5, [sp, #8]
 800bd64:	46ab      	mov	fp, r5
 800bd66:	7851      	ldrb	r1, [r2, #1]
 800bd68:	1c53      	adds	r3, r2, #1
 800bd6a:	9303      	str	r3, [sp, #12]
 800bd6c:	b341      	cbz	r1, 800bdc0 <__hexnan+0x88>
 800bd6e:	4608      	mov	r0, r1
 800bd70:	9205      	str	r2, [sp, #20]
 800bd72:	9104      	str	r1, [sp, #16]
 800bd74:	f7ff fd5e 	bl	800b834 <__hexdig_fun>
 800bd78:	2800      	cmp	r0, #0
 800bd7a:	d14f      	bne.n	800be1c <__hexnan+0xe4>
 800bd7c:	9904      	ldr	r1, [sp, #16]
 800bd7e:	9a05      	ldr	r2, [sp, #20]
 800bd80:	2920      	cmp	r1, #32
 800bd82:	d818      	bhi.n	800bdb6 <__hexnan+0x7e>
 800bd84:	9b02      	ldr	r3, [sp, #8]
 800bd86:	459b      	cmp	fp, r3
 800bd88:	dd13      	ble.n	800bdb2 <__hexnan+0x7a>
 800bd8a:	454c      	cmp	r4, r9
 800bd8c:	d206      	bcs.n	800bd9c <__hexnan+0x64>
 800bd8e:	2d07      	cmp	r5, #7
 800bd90:	dc04      	bgt.n	800bd9c <__hexnan+0x64>
 800bd92:	462a      	mov	r2, r5
 800bd94:	4649      	mov	r1, r9
 800bd96:	4620      	mov	r0, r4
 800bd98:	f7ff ffa8 	bl	800bcec <L_shift>
 800bd9c:	4544      	cmp	r4, r8
 800bd9e:	d950      	bls.n	800be42 <__hexnan+0x10a>
 800bda0:	2300      	movs	r3, #0
 800bda2:	f1a4 0904 	sub.w	r9, r4, #4
 800bda6:	f844 3c04 	str.w	r3, [r4, #-4]
 800bdaa:	f8cd b008 	str.w	fp, [sp, #8]
 800bdae:	464c      	mov	r4, r9
 800bdb0:	461d      	mov	r5, r3
 800bdb2:	9a03      	ldr	r2, [sp, #12]
 800bdb4:	e7d7      	b.n	800bd66 <__hexnan+0x2e>
 800bdb6:	2929      	cmp	r1, #41	; 0x29
 800bdb8:	d156      	bne.n	800be68 <__hexnan+0x130>
 800bdba:	3202      	adds	r2, #2
 800bdbc:	f8ca 2000 	str.w	r2, [sl]
 800bdc0:	f1bb 0f00 	cmp.w	fp, #0
 800bdc4:	d050      	beq.n	800be68 <__hexnan+0x130>
 800bdc6:	454c      	cmp	r4, r9
 800bdc8:	d206      	bcs.n	800bdd8 <__hexnan+0xa0>
 800bdca:	2d07      	cmp	r5, #7
 800bdcc:	dc04      	bgt.n	800bdd8 <__hexnan+0xa0>
 800bdce:	462a      	mov	r2, r5
 800bdd0:	4649      	mov	r1, r9
 800bdd2:	4620      	mov	r0, r4
 800bdd4:	f7ff ff8a 	bl	800bcec <L_shift>
 800bdd8:	4544      	cmp	r4, r8
 800bdda:	d934      	bls.n	800be46 <__hexnan+0x10e>
 800bddc:	f1a8 0204 	sub.w	r2, r8, #4
 800bde0:	4623      	mov	r3, r4
 800bde2:	f853 1b04 	ldr.w	r1, [r3], #4
 800bde6:	f842 1f04 	str.w	r1, [r2, #4]!
 800bdea:	429f      	cmp	r7, r3
 800bdec:	d2f9      	bcs.n	800bde2 <__hexnan+0xaa>
 800bdee:	1b3b      	subs	r3, r7, r4
 800bdf0:	f023 0303 	bic.w	r3, r3, #3
 800bdf4:	3304      	adds	r3, #4
 800bdf6:	3401      	adds	r4, #1
 800bdf8:	3e03      	subs	r6, #3
 800bdfa:	42b4      	cmp	r4, r6
 800bdfc:	bf88      	it	hi
 800bdfe:	2304      	movhi	r3, #4
 800be00:	4443      	add	r3, r8
 800be02:	2200      	movs	r2, #0
 800be04:	f843 2b04 	str.w	r2, [r3], #4
 800be08:	429f      	cmp	r7, r3
 800be0a:	d2fb      	bcs.n	800be04 <__hexnan+0xcc>
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	b91b      	cbnz	r3, 800be18 <__hexnan+0xe0>
 800be10:	4547      	cmp	r7, r8
 800be12:	d127      	bne.n	800be64 <__hexnan+0x12c>
 800be14:	2301      	movs	r3, #1
 800be16:	603b      	str	r3, [r7, #0]
 800be18:	2005      	movs	r0, #5
 800be1a:	e026      	b.n	800be6a <__hexnan+0x132>
 800be1c:	3501      	adds	r5, #1
 800be1e:	2d08      	cmp	r5, #8
 800be20:	f10b 0b01 	add.w	fp, fp, #1
 800be24:	dd06      	ble.n	800be34 <__hexnan+0xfc>
 800be26:	4544      	cmp	r4, r8
 800be28:	d9c3      	bls.n	800bdb2 <__hexnan+0x7a>
 800be2a:	2300      	movs	r3, #0
 800be2c:	f844 3c04 	str.w	r3, [r4, #-4]
 800be30:	2501      	movs	r5, #1
 800be32:	3c04      	subs	r4, #4
 800be34:	6822      	ldr	r2, [r4, #0]
 800be36:	f000 000f 	and.w	r0, r0, #15
 800be3a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800be3e:	6022      	str	r2, [r4, #0]
 800be40:	e7b7      	b.n	800bdb2 <__hexnan+0x7a>
 800be42:	2508      	movs	r5, #8
 800be44:	e7b5      	b.n	800bdb2 <__hexnan+0x7a>
 800be46:	9b01      	ldr	r3, [sp, #4]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d0df      	beq.n	800be0c <__hexnan+0xd4>
 800be4c:	f04f 32ff 	mov.w	r2, #4294967295
 800be50:	f1c3 0320 	rsb	r3, r3, #32
 800be54:	fa22 f303 	lsr.w	r3, r2, r3
 800be58:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800be5c:	401a      	ands	r2, r3
 800be5e:	f846 2c04 	str.w	r2, [r6, #-4]
 800be62:	e7d3      	b.n	800be0c <__hexnan+0xd4>
 800be64:	3f04      	subs	r7, #4
 800be66:	e7d1      	b.n	800be0c <__hexnan+0xd4>
 800be68:	2004      	movs	r0, #4
 800be6a:	b007      	add	sp, #28
 800be6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800be70 <_localeconv_r>:
 800be70:	4800      	ldr	r0, [pc, #0]	; (800be74 <_localeconv_r+0x4>)
 800be72:	4770      	bx	lr
 800be74:	20000178 	.word	0x20000178

0800be78 <_lseek_r>:
 800be78:	b538      	push	{r3, r4, r5, lr}
 800be7a:	4d07      	ldr	r5, [pc, #28]	; (800be98 <_lseek_r+0x20>)
 800be7c:	4604      	mov	r4, r0
 800be7e:	4608      	mov	r0, r1
 800be80:	4611      	mov	r1, r2
 800be82:	2200      	movs	r2, #0
 800be84:	602a      	str	r2, [r5, #0]
 800be86:	461a      	mov	r2, r3
 800be88:	f7f6 ff7a 	bl	8002d80 <_lseek>
 800be8c:	1c43      	adds	r3, r0, #1
 800be8e:	d102      	bne.n	800be96 <_lseek_r+0x1e>
 800be90:	682b      	ldr	r3, [r5, #0]
 800be92:	b103      	cbz	r3, 800be96 <_lseek_r+0x1e>
 800be94:	6023      	str	r3, [r4, #0]
 800be96:	bd38      	pop	{r3, r4, r5, pc}
 800be98:	20004528 	.word	0x20004528

0800be9c <malloc>:
 800be9c:	4b02      	ldr	r3, [pc, #8]	; (800bea8 <malloc+0xc>)
 800be9e:	4601      	mov	r1, r0
 800bea0:	6818      	ldr	r0, [r3, #0]
 800bea2:	f7fc be95 	b.w	8008bd0 <_malloc_r>
 800bea6:	bf00      	nop
 800bea8:	20000020 	.word	0x20000020

0800beac <__ascii_mbtowc>:
 800beac:	b082      	sub	sp, #8
 800beae:	b901      	cbnz	r1, 800beb2 <__ascii_mbtowc+0x6>
 800beb0:	a901      	add	r1, sp, #4
 800beb2:	b142      	cbz	r2, 800bec6 <__ascii_mbtowc+0x1a>
 800beb4:	b14b      	cbz	r3, 800beca <__ascii_mbtowc+0x1e>
 800beb6:	7813      	ldrb	r3, [r2, #0]
 800beb8:	600b      	str	r3, [r1, #0]
 800beba:	7812      	ldrb	r2, [r2, #0]
 800bebc:	1e10      	subs	r0, r2, #0
 800bebe:	bf18      	it	ne
 800bec0:	2001      	movne	r0, #1
 800bec2:	b002      	add	sp, #8
 800bec4:	4770      	bx	lr
 800bec6:	4610      	mov	r0, r2
 800bec8:	e7fb      	b.n	800bec2 <__ascii_mbtowc+0x16>
 800beca:	f06f 0001 	mvn.w	r0, #1
 800bece:	e7f8      	b.n	800bec2 <__ascii_mbtowc+0x16>

0800bed0 <__malloc_lock>:
 800bed0:	4801      	ldr	r0, [pc, #4]	; (800bed8 <__malloc_lock+0x8>)
 800bed2:	f7fc be44 	b.w	8008b5e <__retarget_lock_acquire_recursive>
 800bed6:	bf00      	nop
 800bed8:	2000451c 	.word	0x2000451c

0800bedc <__malloc_unlock>:
 800bedc:	4801      	ldr	r0, [pc, #4]	; (800bee4 <__malloc_unlock+0x8>)
 800bede:	f7fc be3f 	b.w	8008b60 <__retarget_lock_release_recursive>
 800bee2:	bf00      	nop
 800bee4:	2000451c 	.word	0x2000451c

0800bee8 <_Balloc>:
 800bee8:	b570      	push	{r4, r5, r6, lr}
 800beea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800beec:	4604      	mov	r4, r0
 800beee:	460d      	mov	r5, r1
 800bef0:	b976      	cbnz	r6, 800bf10 <_Balloc+0x28>
 800bef2:	2010      	movs	r0, #16
 800bef4:	f7ff ffd2 	bl	800be9c <malloc>
 800bef8:	4602      	mov	r2, r0
 800befa:	6260      	str	r0, [r4, #36]	; 0x24
 800befc:	b920      	cbnz	r0, 800bf08 <_Balloc+0x20>
 800befe:	4b18      	ldr	r3, [pc, #96]	; (800bf60 <_Balloc+0x78>)
 800bf00:	4818      	ldr	r0, [pc, #96]	; (800bf64 <_Balloc+0x7c>)
 800bf02:	2166      	movs	r1, #102	; 0x66
 800bf04:	f000 feae 	bl	800cc64 <__assert_func>
 800bf08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf0c:	6006      	str	r6, [r0, #0]
 800bf0e:	60c6      	str	r6, [r0, #12]
 800bf10:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bf12:	68f3      	ldr	r3, [r6, #12]
 800bf14:	b183      	cbz	r3, 800bf38 <_Balloc+0x50>
 800bf16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf18:	68db      	ldr	r3, [r3, #12]
 800bf1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bf1e:	b9b8      	cbnz	r0, 800bf50 <_Balloc+0x68>
 800bf20:	2101      	movs	r1, #1
 800bf22:	fa01 f605 	lsl.w	r6, r1, r5
 800bf26:	1d72      	adds	r2, r6, #5
 800bf28:	0092      	lsls	r2, r2, #2
 800bf2a:	4620      	mov	r0, r4
 800bf2c:	f000 fc9d 	bl	800c86a <_calloc_r>
 800bf30:	b160      	cbz	r0, 800bf4c <_Balloc+0x64>
 800bf32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bf36:	e00e      	b.n	800bf56 <_Balloc+0x6e>
 800bf38:	2221      	movs	r2, #33	; 0x21
 800bf3a:	2104      	movs	r1, #4
 800bf3c:	4620      	mov	r0, r4
 800bf3e:	f000 fc94 	bl	800c86a <_calloc_r>
 800bf42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf44:	60f0      	str	r0, [r6, #12]
 800bf46:	68db      	ldr	r3, [r3, #12]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d1e4      	bne.n	800bf16 <_Balloc+0x2e>
 800bf4c:	2000      	movs	r0, #0
 800bf4e:	bd70      	pop	{r4, r5, r6, pc}
 800bf50:	6802      	ldr	r2, [r0, #0]
 800bf52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bf56:	2300      	movs	r3, #0
 800bf58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bf5c:	e7f7      	b.n	800bf4e <_Balloc+0x66>
 800bf5e:	bf00      	nop
 800bf60:	0800d64e 	.word	0x0800d64e
 800bf64:	0800d74c 	.word	0x0800d74c

0800bf68 <_Bfree>:
 800bf68:	b570      	push	{r4, r5, r6, lr}
 800bf6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bf6c:	4605      	mov	r5, r0
 800bf6e:	460c      	mov	r4, r1
 800bf70:	b976      	cbnz	r6, 800bf90 <_Bfree+0x28>
 800bf72:	2010      	movs	r0, #16
 800bf74:	f7ff ff92 	bl	800be9c <malloc>
 800bf78:	4602      	mov	r2, r0
 800bf7a:	6268      	str	r0, [r5, #36]	; 0x24
 800bf7c:	b920      	cbnz	r0, 800bf88 <_Bfree+0x20>
 800bf7e:	4b09      	ldr	r3, [pc, #36]	; (800bfa4 <_Bfree+0x3c>)
 800bf80:	4809      	ldr	r0, [pc, #36]	; (800bfa8 <_Bfree+0x40>)
 800bf82:	218a      	movs	r1, #138	; 0x8a
 800bf84:	f000 fe6e 	bl	800cc64 <__assert_func>
 800bf88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf8c:	6006      	str	r6, [r0, #0]
 800bf8e:	60c6      	str	r6, [r0, #12]
 800bf90:	b13c      	cbz	r4, 800bfa2 <_Bfree+0x3a>
 800bf92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bf94:	6862      	ldr	r2, [r4, #4]
 800bf96:	68db      	ldr	r3, [r3, #12]
 800bf98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bf9c:	6021      	str	r1, [r4, #0]
 800bf9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bfa2:	bd70      	pop	{r4, r5, r6, pc}
 800bfa4:	0800d64e 	.word	0x0800d64e
 800bfa8:	0800d74c 	.word	0x0800d74c

0800bfac <__multadd>:
 800bfac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfb0:	690d      	ldr	r5, [r1, #16]
 800bfb2:	4607      	mov	r7, r0
 800bfb4:	460c      	mov	r4, r1
 800bfb6:	461e      	mov	r6, r3
 800bfb8:	f101 0c14 	add.w	ip, r1, #20
 800bfbc:	2000      	movs	r0, #0
 800bfbe:	f8dc 3000 	ldr.w	r3, [ip]
 800bfc2:	b299      	uxth	r1, r3
 800bfc4:	fb02 6101 	mla	r1, r2, r1, r6
 800bfc8:	0c1e      	lsrs	r6, r3, #16
 800bfca:	0c0b      	lsrs	r3, r1, #16
 800bfcc:	fb02 3306 	mla	r3, r2, r6, r3
 800bfd0:	b289      	uxth	r1, r1
 800bfd2:	3001      	adds	r0, #1
 800bfd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bfd8:	4285      	cmp	r5, r0
 800bfda:	f84c 1b04 	str.w	r1, [ip], #4
 800bfde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bfe2:	dcec      	bgt.n	800bfbe <__multadd+0x12>
 800bfe4:	b30e      	cbz	r6, 800c02a <__multadd+0x7e>
 800bfe6:	68a3      	ldr	r3, [r4, #8]
 800bfe8:	42ab      	cmp	r3, r5
 800bfea:	dc19      	bgt.n	800c020 <__multadd+0x74>
 800bfec:	6861      	ldr	r1, [r4, #4]
 800bfee:	4638      	mov	r0, r7
 800bff0:	3101      	adds	r1, #1
 800bff2:	f7ff ff79 	bl	800bee8 <_Balloc>
 800bff6:	4680      	mov	r8, r0
 800bff8:	b928      	cbnz	r0, 800c006 <__multadd+0x5a>
 800bffa:	4602      	mov	r2, r0
 800bffc:	4b0c      	ldr	r3, [pc, #48]	; (800c030 <__multadd+0x84>)
 800bffe:	480d      	ldr	r0, [pc, #52]	; (800c034 <__multadd+0x88>)
 800c000:	21b5      	movs	r1, #181	; 0xb5
 800c002:	f000 fe2f 	bl	800cc64 <__assert_func>
 800c006:	6922      	ldr	r2, [r4, #16]
 800c008:	3202      	adds	r2, #2
 800c00a:	f104 010c 	add.w	r1, r4, #12
 800c00e:	0092      	lsls	r2, r2, #2
 800c010:	300c      	adds	r0, #12
 800c012:	f7fc fda6 	bl	8008b62 <memcpy>
 800c016:	4621      	mov	r1, r4
 800c018:	4638      	mov	r0, r7
 800c01a:	f7ff ffa5 	bl	800bf68 <_Bfree>
 800c01e:	4644      	mov	r4, r8
 800c020:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c024:	3501      	adds	r5, #1
 800c026:	615e      	str	r6, [r3, #20]
 800c028:	6125      	str	r5, [r4, #16]
 800c02a:	4620      	mov	r0, r4
 800c02c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c030:	0800d6c0 	.word	0x0800d6c0
 800c034:	0800d74c 	.word	0x0800d74c

0800c038 <__s2b>:
 800c038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c03c:	460c      	mov	r4, r1
 800c03e:	4615      	mov	r5, r2
 800c040:	461f      	mov	r7, r3
 800c042:	2209      	movs	r2, #9
 800c044:	3308      	adds	r3, #8
 800c046:	4606      	mov	r6, r0
 800c048:	fb93 f3f2 	sdiv	r3, r3, r2
 800c04c:	2100      	movs	r1, #0
 800c04e:	2201      	movs	r2, #1
 800c050:	429a      	cmp	r2, r3
 800c052:	db09      	blt.n	800c068 <__s2b+0x30>
 800c054:	4630      	mov	r0, r6
 800c056:	f7ff ff47 	bl	800bee8 <_Balloc>
 800c05a:	b940      	cbnz	r0, 800c06e <__s2b+0x36>
 800c05c:	4602      	mov	r2, r0
 800c05e:	4b19      	ldr	r3, [pc, #100]	; (800c0c4 <__s2b+0x8c>)
 800c060:	4819      	ldr	r0, [pc, #100]	; (800c0c8 <__s2b+0x90>)
 800c062:	21ce      	movs	r1, #206	; 0xce
 800c064:	f000 fdfe 	bl	800cc64 <__assert_func>
 800c068:	0052      	lsls	r2, r2, #1
 800c06a:	3101      	adds	r1, #1
 800c06c:	e7f0      	b.n	800c050 <__s2b+0x18>
 800c06e:	9b08      	ldr	r3, [sp, #32]
 800c070:	6143      	str	r3, [r0, #20]
 800c072:	2d09      	cmp	r5, #9
 800c074:	f04f 0301 	mov.w	r3, #1
 800c078:	6103      	str	r3, [r0, #16]
 800c07a:	dd16      	ble.n	800c0aa <__s2b+0x72>
 800c07c:	f104 0909 	add.w	r9, r4, #9
 800c080:	46c8      	mov	r8, r9
 800c082:	442c      	add	r4, r5
 800c084:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c088:	4601      	mov	r1, r0
 800c08a:	3b30      	subs	r3, #48	; 0x30
 800c08c:	220a      	movs	r2, #10
 800c08e:	4630      	mov	r0, r6
 800c090:	f7ff ff8c 	bl	800bfac <__multadd>
 800c094:	45a0      	cmp	r8, r4
 800c096:	d1f5      	bne.n	800c084 <__s2b+0x4c>
 800c098:	f1a5 0408 	sub.w	r4, r5, #8
 800c09c:	444c      	add	r4, r9
 800c09e:	1b2d      	subs	r5, r5, r4
 800c0a0:	1963      	adds	r3, r4, r5
 800c0a2:	42bb      	cmp	r3, r7
 800c0a4:	db04      	blt.n	800c0b0 <__s2b+0x78>
 800c0a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0aa:	340a      	adds	r4, #10
 800c0ac:	2509      	movs	r5, #9
 800c0ae:	e7f6      	b.n	800c09e <__s2b+0x66>
 800c0b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c0b4:	4601      	mov	r1, r0
 800c0b6:	3b30      	subs	r3, #48	; 0x30
 800c0b8:	220a      	movs	r2, #10
 800c0ba:	4630      	mov	r0, r6
 800c0bc:	f7ff ff76 	bl	800bfac <__multadd>
 800c0c0:	e7ee      	b.n	800c0a0 <__s2b+0x68>
 800c0c2:	bf00      	nop
 800c0c4:	0800d6c0 	.word	0x0800d6c0
 800c0c8:	0800d74c 	.word	0x0800d74c

0800c0cc <__hi0bits>:
 800c0cc:	0c03      	lsrs	r3, r0, #16
 800c0ce:	041b      	lsls	r3, r3, #16
 800c0d0:	b9d3      	cbnz	r3, 800c108 <__hi0bits+0x3c>
 800c0d2:	0400      	lsls	r0, r0, #16
 800c0d4:	2310      	movs	r3, #16
 800c0d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c0da:	bf04      	itt	eq
 800c0dc:	0200      	lsleq	r0, r0, #8
 800c0de:	3308      	addeq	r3, #8
 800c0e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c0e4:	bf04      	itt	eq
 800c0e6:	0100      	lsleq	r0, r0, #4
 800c0e8:	3304      	addeq	r3, #4
 800c0ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c0ee:	bf04      	itt	eq
 800c0f0:	0080      	lsleq	r0, r0, #2
 800c0f2:	3302      	addeq	r3, #2
 800c0f4:	2800      	cmp	r0, #0
 800c0f6:	db05      	blt.n	800c104 <__hi0bits+0x38>
 800c0f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c0fc:	f103 0301 	add.w	r3, r3, #1
 800c100:	bf08      	it	eq
 800c102:	2320      	moveq	r3, #32
 800c104:	4618      	mov	r0, r3
 800c106:	4770      	bx	lr
 800c108:	2300      	movs	r3, #0
 800c10a:	e7e4      	b.n	800c0d6 <__hi0bits+0xa>

0800c10c <__lo0bits>:
 800c10c:	6803      	ldr	r3, [r0, #0]
 800c10e:	f013 0207 	ands.w	r2, r3, #7
 800c112:	4601      	mov	r1, r0
 800c114:	d00b      	beq.n	800c12e <__lo0bits+0x22>
 800c116:	07da      	lsls	r2, r3, #31
 800c118:	d423      	bmi.n	800c162 <__lo0bits+0x56>
 800c11a:	0798      	lsls	r0, r3, #30
 800c11c:	bf49      	itett	mi
 800c11e:	085b      	lsrmi	r3, r3, #1
 800c120:	089b      	lsrpl	r3, r3, #2
 800c122:	2001      	movmi	r0, #1
 800c124:	600b      	strmi	r3, [r1, #0]
 800c126:	bf5c      	itt	pl
 800c128:	600b      	strpl	r3, [r1, #0]
 800c12a:	2002      	movpl	r0, #2
 800c12c:	4770      	bx	lr
 800c12e:	b298      	uxth	r0, r3
 800c130:	b9a8      	cbnz	r0, 800c15e <__lo0bits+0x52>
 800c132:	0c1b      	lsrs	r3, r3, #16
 800c134:	2010      	movs	r0, #16
 800c136:	b2da      	uxtb	r2, r3
 800c138:	b90a      	cbnz	r2, 800c13e <__lo0bits+0x32>
 800c13a:	3008      	adds	r0, #8
 800c13c:	0a1b      	lsrs	r3, r3, #8
 800c13e:	071a      	lsls	r2, r3, #28
 800c140:	bf04      	itt	eq
 800c142:	091b      	lsreq	r3, r3, #4
 800c144:	3004      	addeq	r0, #4
 800c146:	079a      	lsls	r2, r3, #30
 800c148:	bf04      	itt	eq
 800c14a:	089b      	lsreq	r3, r3, #2
 800c14c:	3002      	addeq	r0, #2
 800c14e:	07da      	lsls	r2, r3, #31
 800c150:	d403      	bmi.n	800c15a <__lo0bits+0x4e>
 800c152:	085b      	lsrs	r3, r3, #1
 800c154:	f100 0001 	add.w	r0, r0, #1
 800c158:	d005      	beq.n	800c166 <__lo0bits+0x5a>
 800c15a:	600b      	str	r3, [r1, #0]
 800c15c:	4770      	bx	lr
 800c15e:	4610      	mov	r0, r2
 800c160:	e7e9      	b.n	800c136 <__lo0bits+0x2a>
 800c162:	2000      	movs	r0, #0
 800c164:	4770      	bx	lr
 800c166:	2020      	movs	r0, #32
 800c168:	4770      	bx	lr
	...

0800c16c <__i2b>:
 800c16c:	b510      	push	{r4, lr}
 800c16e:	460c      	mov	r4, r1
 800c170:	2101      	movs	r1, #1
 800c172:	f7ff feb9 	bl	800bee8 <_Balloc>
 800c176:	4602      	mov	r2, r0
 800c178:	b928      	cbnz	r0, 800c186 <__i2b+0x1a>
 800c17a:	4b05      	ldr	r3, [pc, #20]	; (800c190 <__i2b+0x24>)
 800c17c:	4805      	ldr	r0, [pc, #20]	; (800c194 <__i2b+0x28>)
 800c17e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c182:	f000 fd6f 	bl	800cc64 <__assert_func>
 800c186:	2301      	movs	r3, #1
 800c188:	6144      	str	r4, [r0, #20]
 800c18a:	6103      	str	r3, [r0, #16]
 800c18c:	bd10      	pop	{r4, pc}
 800c18e:	bf00      	nop
 800c190:	0800d6c0 	.word	0x0800d6c0
 800c194:	0800d74c 	.word	0x0800d74c

0800c198 <__multiply>:
 800c198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c19c:	4691      	mov	r9, r2
 800c19e:	690a      	ldr	r2, [r1, #16]
 800c1a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c1a4:	429a      	cmp	r2, r3
 800c1a6:	bfb8      	it	lt
 800c1a8:	460b      	movlt	r3, r1
 800c1aa:	460c      	mov	r4, r1
 800c1ac:	bfbc      	itt	lt
 800c1ae:	464c      	movlt	r4, r9
 800c1b0:	4699      	movlt	r9, r3
 800c1b2:	6927      	ldr	r7, [r4, #16]
 800c1b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c1b8:	68a3      	ldr	r3, [r4, #8]
 800c1ba:	6861      	ldr	r1, [r4, #4]
 800c1bc:	eb07 060a 	add.w	r6, r7, sl
 800c1c0:	42b3      	cmp	r3, r6
 800c1c2:	b085      	sub	sp, #20
 800c1c4:	bfb8      	it	lt
 800c1c6:	3101      	addlt	r1, #1
 800c1c8:	f7ff fe8e 	bl	800bee8 <_Balloc>
 800c1cc:	b930      	cbnz	r0, 800c1dc <__multiply+0x44>
 800c1ce:	4602      	mov	r2, r0
 800c1d0:	4b44      	ldr	r3, [pc, #272]	; (800c2e4 <__multiply+0x14c>)
 800c1d2:	4845      	ldr	r0, [pc, #276]	; (800c2e8 <__multiply+0x150>)
 800c1d4:	f240 115d 	movw	r1, #349	; 0x15d
 800c1d8:	f000 fd44 	bl	800cc64 <__assert_func>
 800c1dc:	f100 0514 	add.w	r5, r0, #20
 800c1e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c1e4:	462b      	mov	r3, r5
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	4543      	cmp	r3, r8
 800c1ea:	d321      	bcc.n	800c230 <__multiply+0x98>
 800c1ec:	f104 0314 	add.w	r3, r4, #20
 800c1f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c1f4:	f109 0314 	add.w	r3, r9, #20
 800c1f8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c1fc:	9202      	str	r2, [sp, #8]
 800c1fe:	1b3a      	subs	r2, r7, r4
 800c200:	3a15      	subs	r2, #21
 800c202:	f022 0203 	bic.w	r2, r2, #3
 800c206:	3204      	adds	r2, #4
 800c208:	f104 0115 	add.w	r1, r4, #21
 800c20c:	428f      	cmp	r7, r1
 800c20e:	bf38      	it	cc
 800c210:	2204      	movcc	r2, #4
 800c212:	9201      	str	r2, [sp, #4]
 800c214:	9a02      	ldr	r2, [sp, #8]
 800c216:	9303      	str	r3, [sp, #12]
 800c218:	429a      	cmp	r2, r3
 800c21a:	d80c      	bhi.n	800c236 <__multiply+0x9e>
 800c21c:	2e00      	cmp	r6, #0
 800c21e:	dd03      	ble.n	800c228 <__multiply+0x90>
 800c220:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c224:	2b00      	cmp	r3, #0
 800c226:	d05a      	beq.n	800c2de <__multiply+0x146>
 800c228:	6106      	str	r6, [r0, #16]
 800c22a:	b005      	add	sp, #20
 800c22c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c230:	f843 2b04 	str.w	r2, [r3], #4
 800c234:	e7d8      	b.n	800c1e8 <__multiply+0x50>
 800c236:	f8b3 a000 	ldrh.w	sl, [r3]
 800c23a:	f1ba 0f00 	cmp.w	sl, #0
 800c23e:	d024      	beq.n	800c28a <__multiply+0xf2>
 800c240:	f104 0e14 	add.w	lr, r4, #20
 800c244:	46a9      	mov	r9, r5
 800c246:	f04f 0c00 	mov.w	ip, #0
 800c24a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c24e:	f8d9 1000 	ldr.w	r1, [r9]
 800c252:	fa1f fb82 	uxth.w	fp, r2
 800c256:	b289      	uxth	r1, r1
 800c258:	fb0a 110b 	mla	r1, sl, fp, r1
 800c25c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c260:	f8d9 2000 	ldr.w	r2, [r9]
 800c264:	4461      	add	r1, ip
 800c266:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c26a:	fb0a c20b 	mla	r2, sl, fp, ip
 800c26e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c272:	b289      	uxth	r1, r1
 800c274:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c278:	4577      	cmp	r7, lr
 800c27a:	f849 1b04 	str.w	r1, [r9], #4
 800c27e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c282:	d8e2      	bhi.n	800c24a <__multiply+0xb2>
 800c284:	9a01      	ldr	r2, [sp, #4]
 800c286:	f845 c002 	str.w	ip, [r5, r2]
 800c28a:	9a03      	ldr	r2, [sp, #12]
 800c28c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c290:	3304      	adds	r3, #4
 800c292:	f1b9 0f00 	cmp.w	r9, #0
 800c296:	d020      	beq.n	800c2da <__multiply+0x142>
 800c298:	6829      	ldr	r1, [r5, #0]
 800c29a:	f104 0c14 	add.w	ip, r4, #20
 800c29e:	46ae      	mov	lr, r5
 800c2a0:	f04f 0a00 	mov.w	sl, #0
 800c2a4:	f8bc b000 	ldrh.w	fp, [ip]
 800c2a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c2ac:	fb09 220b 	mla	r2, r9, fp, r2
 800c2b0:	4492      	add	sl, r2
 800c2b2:	b289      	uxth	r1, r1
 800c2b4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c2b8:	f84e 1b04 	str.w	r1, [lr], #4
 800c2bc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c2c0:	f8be 1000 	ldrh.w	r1, [lr]
 800c2c4:	0c12      	lsrs	r2, r2, #16
 800c2c6:	fb09 1102 	mla	r1, r9, r2, r1
 800c2ca:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c2ce:	4567      	cmp	r7, ip
 800c2d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c2d4:	d8e6      	bhi.n	800c2a4 <__multiply+0x10c>
 800c2d6:	9a01      	ldr	r2, [sp, #4]
 800c2d8:	50a9      	str	r1, [r5, r2]
 800c2da:	3504      	adds	r5, #4
 800c2dc:	e79a      	b.n	800c214 <__multiply+0x7c>
 800c2de:	3e01      	subs	r6, #1
 800c2e0:	e79c      	b.n	800c21c <__multiply+0x84>
 800c2e2:	bf00      	nop
 800c2e4:	0800d6c0 	.word	0x0800d6c0
 800c2e8:	0800d74c 	.word	0x0800d74c

0800c2ec <__pow5mult>:
 800c2ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2f0:	4615      	mov	r5, r2
 800c2f2:	f012 0203 	ands.w	r2, r2, #3
 800c2f6:	4606      	mov	r6, r0
 800c2f8:	460f      	mov	r7, r1
 800c2fa:	d007      	beq.n	800c30c <__pow5mult+0x20>
 800c2fc:	4c25      	ldr	r4, [pc, #148]	; (800c394 <__pow5mult+0xa8>)
 800c2fe:	3a01      	subs	r2, #1
 800c300:	2300      	movs	r3, #0
 800c302:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c306:	f7ff fe51 	bl	800bfac <__multadd>
 800c30a:	4607      	mov	r7, r0
 800c30c:	10ad      	asrs	r5, r5, #2
 800c30e:	d03d      	beq.n	800c38c <__pow5mult+0xa0>
 800c310:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c312:	b97c      	cbnz	r4, 800c334 <__pow5mult+0x48>
 800c314:	2010      	movs	r0, #16
 800c316:	f7ff fdc1 	bl	800be9c <malloc>
 800c31a:	4602      	mov	r2, r0
 800c31c:	6270      	str	r0, [r6, #36]	; 0x24
 800c31e:	b928      	cbnz	r0, 800c32c <__pow5mult+0x40>
 800c320:	4b1d      	ldr	r3, [pc, #116]	; (800c398 <__pow5mult+0xac>)
 800c322:	481e      	ldr	r0, [pc, #120]	; (800c39c <__pow5mult+0xb0>)
 800c324:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c328:	f000 fc9c 	bl	800cc64 <__assert_func>
 800c32c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c330:	6004      	str	r4, [r0, #0]
 800c332:	60c4      	str	r4, [r0, #12]
 800c334:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c338:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c33c:	b94c      	cbnz	r4, 800c352 <__pow5mult+0x66>
 800c33e:	f240 2171 	movw	r1, #625	; 0x271
 800c342:	4630      	mov	r0, r6
 800c344:	f7ff ff12 	bl	800c16c <__i2b>
 800c348:	2300      	movs	r3, #0
 800c34a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c34e:	4604      	mov	r4, r0
 800c350:	6003      	str	r3, [r0, #0]
 800c352:	f04f 0900 	mov.w	r9, #0
 800c356:	07eb      	lsls	r3, r5, #31
 800c358:	d50a      	bpl.n	800c370 <__pow5mult+0x84>
 800c35a:	4639      	mov	r1, r7
 800c35c:	4622      	mov	r2, r4
 800c35e:	4630      	mov	r0, r6
 800c360:	f7ff ff1a 	bl	800c198 <__multiply>
 800c364:	4639      	mov	r1, r7
 800c366:	4680      	mov	r8, r0
 800c368:	4630      	mov	r0, r6
 800c36a:	f7ff fdfd 	bl	800bf68 <_Bfree>
 800c36e:	4647      	mov	r7, r8
 800c370:	106d      	asrs	r5, r5, #1
 800c372:	d00b      	beq.n	800c38c <__pow5mult+0xa0>
 800c374:	6820      	ldr	r0, [r4, #0]
 800c376:	b938      	cbnz	r0, 800c388 <__pow5mult+0x9c>
 800c378:	4622      	mov	r2, r4
 800c37a:	4621      	mov	r1, r4
 800c37c:	4630      	mov	r0, r6
 800c37e:	f7ff ff0b 	bl	800c198 <__multiply>
 800c382:	6020      	str	r0, [r4, #0]
 800c384:	f8c0 9000 	str.w	r9, [r0]
 800c388:	4604      	mov	r4, r0
 800c38a:	e7e4      	b.n	800c356 <__pow5mult+0x6a>
 800c38c:	4638      	mov	r0, r7
 800c38e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c392:	bf00      	nop
 800c394:	0800d898 	.word	0x0800d898
 800c398:	0800d64e 	.word	0x0800d64e
 800c39c:	0800d74c 	.word	0x0800d74c

0800c3a0 <__lshift>:
 800c3a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3a4:	460c      	mov	r4, r1
 800c3a6:	6849      	ldr	r1, [r1, #4]
 800c3a8:	6923      	ldr	r3, [r4, #16]
 800c3aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c3ae:	68a3      	ldr	r3, [r4, #8]
 800c3b0:	4607      	mov	r7, r0
 800c3b2:	4691      	mov	r9, r2
 800c3b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c3b8:	f108 0601 	add.w	r6, r8, #1
 800c3bc:	42b3      	cmp	r3, r6
 800c3be:	db0b      	blt.n	800c3d8 <__lshift+0x38>
 800c3c0:	4638      	mov	r0, r7
 800c3c2:	f7ff fd91 	bl	800bee8 <_Balloc>
 800c3c6:	4605      	mov	r5, r0
 800c3c8:	b948      	cbnz	r0, 800c3de <__lshift+0x3e>
 800c3ca:	4602      	mov	r2, r0
 800c3cc:	4b2a      	ldr	r3, [pc, #168]	; (800c478 <__lshift+0xd8>)
 800c3ce:	482b      	ldr	r0, [pc, #172]	; (800c47c <__lshift+0xdc>)
 800c3d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c3d4:	f000 fc46 	bl	800cc64 <__assert_func>
 800c3d8:	3101      	adds	r1, #1
 800c3da:	005b      	lsls	r3, r3, #1
 800c3dc:	e7ee      	b.n	800c3bc <__lshift+0x1c>
 800c3de:	2300      	movs	r3, #0
 800c3e0:	f100 0114 	add.w	r1, r0, #20
 800c3e4:	f100 0210 	add.w	r2, r0, #16
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	4553      	cmp	r3, sl
 800c3ec:	db37      	blt.n	800c45e <__lshift+0xbe>
 800c3ee:	6920      	ldr	r0, [r4, #16]
 800c3f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c3f4:	f104 0314 	add.w	r3, r4, #20
 800c3f8:	f019 091f 	ands.w	r9, r9, #31
 800c3fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c400:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c404:	d02f      	beq.n	800c466 <__lshift+0xc6>
 800c406:	f1c9 0e20 	rsb	lr, r9, #32
 800c40a:	468a      	mov	sl, r1
 800c40c:	f04f 0c00 	mov.w	ip, #0
 800c410:	681a      	ldr	r2, [r3, #0]
 800c412:	fa02 f209 	lsl.w	r2, r2, r9
 800c416:	ea42 020c 	orr.w	r2, r2, ip
 800c41a:	f84a 2b04 	str.w	r2, [sl], #4
 800c41e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c422:	4298      	cmp	r0, r3
 800c424:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c428:	d8f2      	bhi.n	800c410 <__lshift+0x70>
 800c42a:	1b03      	subs	r3, r0, r4
 800c42c:	3b15      	subs	r3, #21
 800c42e:	f023 0303 	bic.w	r3, r3, #3
 800c432:	3304      	adds	r3, #4
 800c434:	f104 0215 	add.w	r2, r4, #21
 800c438:	4290      	cmp	r0, r2
 800c43a:	bf38      	it	cc
 800c43c:	2304      	movcc	r3, #4
 800c43e:	f841 c003 	str.w	ip, [r1, r3]
 800c442:	f1bc 0f00 	cmp.w	ip, #0
 800c446:	d001      	beq.n	800c44c <__lshift+0xac>
 800c448:	f108 0602 	add.w	r6, r8, #2
 800c44c:	3e01      	subs	r6, #1
 800c44e:	4638      	mov	r0, r7
 800c450:	612e      	str	r6, [r5, #16]
 800c452:	4621      	mov	r1, r4
 800c454:	f7ff fd88 	bl	800bf68 <_Bfree>
 800c458:	4628      	mov	r0, r5
 800c45a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c45e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c462:	3301      	adds	r3, #1
 800c464:	e7c1      	b.n	800c3ea <__lshift+0x4a>
 800c466:	3904      	subs	r1, #4
 800c468:	f853 2b04 	ldr.w	r2, [r3], #4
 800c46c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c470:	4298      	cmp	r0, r3
 800c472:	d8f9      	bhi.n	800c468 <__lshift+0xc8>
 800c474:	e7ea      	b.n	800c44c <__lshift+0xac>
 800c476:	bf00      	nop
 800c478:	0800d6c0 	.word	0x0800d6c0
 800c47c:	0800d74c 	.word	0x0800d74c

0800c480 <__mcmp>:
 800c480:	b530      	push	{r4, r5, lr}
 800c482:	6902      	ldr	r2, [r0, #16]
 800c484:	690c      	ldr	r4, [r1, #16]
 800c486:	1b12      	subs	r2, r2, r4
 800c488:	d10e      	bne.n	800c4a8 <__mcmp+0x28>
 800c48a:	f100 0314 	add.w	r3, r0, #20
 800c48e:	3114      	adds	r1, #20
 800c490:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c494:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c498:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c49c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c4a0:	42a5      	cmp	r5, r4
 800c4a2:	d003      	beq.n	800c4ac <__mcmp+0x2c>
 800c4a4:	d305      	bcc.n	800c4b2 <__mcmp+0x32>
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	4610      	mov	r0, r2
 800c4aa:	bd30      	pop	{r4, r5, pc}
 800c4ac:	4283      	cmp	r3, r0
 800c4ae:	d3f3      	bcc.n	800c498 <__mcmp+0x18>
 800c4b0:	e7fa      	b.n	800c4a8 <__mcmp+0x28>
 800c4b2:	f04f 32ff 	mov.w	r2, #4294967295
 800c4b6:	e7f7      	b.n	800c4a8 <__mcmp+0x28>

0800c4b8 <__mdiff>:
 800c4b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4bc:	460c      	mov	r4, r1
 800c4be:	4606      	mov	r6, r0
 800c4c0:	4611      	mov	r1, r2
 800c4c2:	4620      	mov	r0, r4
 800c4c4:	4690      	mov	r8, r2
 800c4c6:	f7ff ffdb 	bl	800c480 <__mcmp>
 800c4ca:	1e05      	subs	r5, r0, #0
 800c4cc:	d110      	bne.n	800c4f0 <__mdiff+0x38>
 800c4ce:	4629      	mov	r1, r5
 800c4d0:	4630      	mov	r0, r6
 800c4d2:	f7ff fd09 	bl	800bee8 <_Balloc>
 800c4d6:	b930      	cbnz	r0, 800c4e6 <__mdiff+0x2e>
 800c4d8:	4b3a      	ldr	r3, [pc, #232]	; (800c5c4 <__mdiff+0x10c>)
 800c4da:	4602      	mov	r2, r0
 800c4dc:	f240 2132 	movw	r1, #562	; 0x232
 800c4e0:	4839      	ldr	r0, [pc, #228]	; (800c5c8 <__mdiff+0x110>)
 800c4e2:	f000 fbbf 	bl	800cc64 <__assert_func>
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c4ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4f0:	bfa4      	itt	ge
 800c4f2:	4643      	movge	r3, r8
 800c4f4:	46a0      	movge	r8, r4
 800c4f6:	4630      	mov	r0, r6
 800c4f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c4fc:	bfa6      	itte	ge
 800c4fe:	461c      	movge	r4, r3
 800c500:	2500      	movge	r5, #0
 800c502:	2501      	movlt	r5, #1
 800c504:	f7ff fcf0 	bl	800bee8 <_Balloc>
 800c508:	b920      	cbnz	r0, 800c514 <__mdiff+0x5c>
 800c50a:	4b2e      	ldr	r3, [pc, #184]	; (800c5c4 <__mdiff+0x10c>)
 800c50c:	4602      	mov	r2, r0
 800c50e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c512:	e7e5      	b.n	800c4e0 <__mdiff+0x28>
 800c514:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c518:	6926      	ldr	r6, [r4, #16]
 800c51a:	60c5      	str	r5, [r0, #12]
 800c51c:	f104 0914 	add.w	r9, r4, #20
 800c520:	f108 0514 	add.w	r5, r8, #20
 800c524:	f100 0e14 	add.w	lr, r0, #20
 800c528:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c52c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c530:	f108 0210 	add.w	r2, r8, #16
 800c534:	46f2      	mov	sl, lr
 800c536:	2100      	movs	r1, #0
 800c538:	f859 3b04 	ldr.w	r3, [r9], #4
 800c53c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c540:	fa1f f883 	uxth.w	r8, r3
 800c544:	fa11 f18b 	uxtah	r1, r1, fp
 800c548:	0c1b      	lsrs	r3, r3, #16
 800c54a:	eba1 0808 	sub.w	r8, r1, r8
 800c54e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c552:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c556:	fa1f f888 	uxth.w	r8, r8
 800c55a:	1419      	asrs	r1, r3, #16
 800c55c:	454e      	cmp	r6, r9
 800c55e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c562:	f84a 3b04 	str.w	r3, [sl], #4
 800c566:	d8e7      	bhi.n	800c538 <__mdiff+0x80>
 800c568:	1b33      	subs	r3, r6, r4
 800c56a:	3b15      	subs	r3, #21
 800c56c:	f023 0303 	bic.w	r3, r3, #3
 800c570:	3304      	adds	r3, #4
 800c572:	3415      	adds	r4, #21
 800c574:	42a6      	cmp	r6, r4
 800c576:	bf38      	it	cc
 800c578:	2304      	movcc	r3, #4
 800c57a:	441d      	add	r5, r3
 800c57c:	4473      	add	r3, lr
 800c57e:	469e      	mov	lr, r3
 800c580:	462e      	mov	r6, r5
 800c582:	4566      	cmp	r6, ip
 800c584:	d30e      	bcc.n	800c5a4 <__mdiff+0xec>
 800c586:	f10c 0203 	add.w	r2, ip, #3
 800c58a:	1b52      	subs	r2, r2, r5
 800c58c:	f022 0203 	bic.w	r2, r2, #3
 800c590:	3d03      	subs	r5, #3
 800c592:	45ac      	cmp	ip, r5
 800c594:	bf38      	it	cc
 800c596:	2200      	movcc	r2, #0
 800c598:	441a      	add	r2, r3
 800c59a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c59e:	b17b      	cbz	r3, 800c5c0 <__mdiff+0x108>
 800c5a0:	6107      	str	r7, [r0, #16]
 800c5a2:	e7a3      	b.n	800c4ec <__mdiff+0x34>
 800c5a4:	f856 8b04 	ldr.w	r8, [r6], #4
 800c5a8:	fa11 f288 	uxtah	r2, r1, r8
 800c5ac:	1414      	asrs	r4, r2, #16
 800c5ae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c5b2:	b292      	uxth	r2, r2
 800c5b4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c5b8:	f84e 2b04 	str.w	r2, [lr], #4
 800c5bc:	1421      	asrs	r1, r4, #16
 800c5be:	e7e0      	b.n	800c582 <__mdiff+0xca>
 800c5c0:	3f01      	subs	r7, #1
 800c5c2:	e7ea      	b.n	800c59a <__mdiff+0xe2>
 800c5c4:	0800d6c0 	.word	0x0800d6c0
 800c5c8:	0800d74c 	.word	0x0800d74c

0800c5cc <__ulp>:
 800c5cc:	b082      	sub	sp, #8
 800c5ce:	ed8d 0b00 	vstr	d0, [sp]
 800c5d2:	9b01      	ldr	r3, [sp, #4]
 800c5d4:	4912      	ldr	r1, [pc, #72]	; (800c620 <__ulp+0x54>)
 800c5d6:	4019      	ands	r1, r3
 800c5d8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c5dc:	2900      	cmp	r1, #0
 800c5de:	dd05      	ble.n	800c5ec <__ulp+0x20>
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	460b      	mov	r3, r1
 800c5e4:	ec43 2b10 	vmov	d0, r2, r3
 800c5e8:	b002      	add	sp, #8
 800c5ea:	4770      	bx	lr
 800c5ec:	4249      	negs	r1, r1
 800c5ee:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c5f2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c5f6:	f04f 0200 	mov.w	r2, #0
 800c5fa:	f04f 0300 	mov.w	r3, #0
 800c5fe:	da04      	bge.n	800c60a <__ulp+0x3e>
 800c600:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c604:	fa41 f300 	asr.w	r3, r1, r0
 800c608:	e7ec      	b.n	800c5e4 <__ulp+0x18>
 800c60a:	f1a0 0114 	sub.w	r1, r0, #20
 800c60e:	291e      	cmp	r1, #30
 800c610:	bfda      	itte	le
 800c612:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c616:	fa20 f101 	lsrle.w	r1, r0, r1
 800c61a:	2101      	movgt	r1, #1
 800c61c:	460a      	mov	r2, r1
 800c61e:	e7e1      	b.n	800c5e4 <__ulp+0x18>
 800c620:	7ff00000 	.word	0x7ff00000

0800c624 <__b2d>:
 800c624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c626:	6905      	ldr	r5, [r0, #16]
 800c628:	f100 0714 	add.w	r7, r0, #20
 800c62c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c630:	1f2e      	subs	r6, r5, #4
 800c632:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c636:	4620      	mov	r0, r4
 800c638:	f7ff fd48 	bl	800c0cc <__hi0bits>
 800c63c:	f1c0 0320 	rsb	r3, r0, #32
 800c640:	280a      	cmp	r0, #10
 800c642:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c6c0 <__b2d+0x9c>
 800c646:	600b      	str	r3, [r1, #0]
 800c648:	dc14      	bgt.n	800c674 <__b2d+0x50>
 800c64a:	f1c0 0e0b 	rsb	lr, r0, #11
 800c64e:	fa24 f10e 	lsr.w	r1, r4, lr
 800c652:	42b7      	cmp	r7, r6
 800c654:	ea41 030c 	orr.w	r3, r1, ip
 800c658:	bf34      	ite	cc
 800c65a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c65e:	2100      	movcs	r1, #0
 800c660:	3015      	adds	r0, #21
 800c662:	fa04 f000 	lsl.w	r0, r4, r0
 800c666:	fa21 f10e 	lsr.w	r1, r1, lr
 800c66a:	ea40 0201 	orr.w	r2, r0, r1
 800c66e:	ec43 2b10 	vmov	d0, r2, r3
 800c672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c674:	42b7      	cmp	r7, r6
 800c676:	bf3a      	itte	cc
 800c678:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c67c:	f1a5 0608 	subcc.w	r6, r5, #8
 800c680:	2100      	movcs	r1, #0
 800c682:	380b      	subs	r0, #11
 800c684:	d017      	beq.n	800c6b6 <__b2d+0x92>
 800c686:	f1c0 0c20 	rsb	ip, r0, #32
 800c68a:	fa04 f500 	lsl.w	r5, r4, r0
 800c68e:	42be      	cmp	r6, r7
 800c690:	fa21 f40c 	lsr.w	r4, r1, ip
 800c694:	ea45 0504 	orr.w	r5, r5, r4
 800c698:	bf8c      	ite	hi
 800c69a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c69e:	2400      	movls	r4, #0
 800c6a0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c6a4:	fa01 f000 	lsl.w	r0, r1, r0
 800c6a8:	fa24 f40c 	lsr.w	r4, r4, ip
 800c6ac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c6b0:	ea40 0204 	orr.w	r2, r0, r4
 800c6b4:	e7db      	b.n	800c66e <__b2d+0x4a>
 800c6b6:	ea44 030c 	orr.w	r3, r4, ip
 800c6ba:	460a      	mov	r2, r1
 800c6bc:	e7d7      	b.n	800c66e <__b2d+0x4a>
 800c6be:	bf00      	nop
 800c6c0:	3ff00000 	.word	0x3ff00000

0800c6c4 <__d2b>:
 800c6c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c6c8:	4689      	mov	r9, r1
 800c6ca:	2101      	movs	r1, #1
 800c6cc:	ec57 6b10 	vmov	r6, r7, d0
 800c6d0:	4690      	mov	r8, r2
 800c6d2:	f7ff fc09 	bl	800bee8 <_Balloc>
 800c6d6:	4604      	mov	r4, r0
 800c6d8:	b930      	cbnz	r0, 800c6e8 <__d2b+0x24>
 800c6da:	4602      	mov	r2, r0
 800c6dc:	4b25      	ldr	r3, [pc, #148]	; (800c774 <__d2b+0xb0>)
 800c6de:	4826      	ldr	r0, [pc, #152]	; (800c778 <__d2b+0xb4>)
 800c6e0:	f240 310a 	movw	r1, #778	; 0x30a
 800c6e4:	f000 fabe 	bl	800cc64 <__assert_func>
 800c6e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c6ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c6f0:	bb35      	cbnz	r5, 800c740 <__d2b+0x7c>
 800c6f2:	2e00      	cmp	r6, #0
 800c6f4:	9301      	str	r3, [sp, #4]
 800c6f6:	d028      	beq.n	800c74a <__d2b+0x86>
 800c6f8:	4668      	mov	r0, sp
 800c6fa:	9600      	str	r6, [sp, #0]
 800c6fc:	f7ff fd06 	bl	800c10c <__lo0bits>
 800c700:	9900      	ldr	r1, [sp, #0]
 800c702:	b300      	cbz	r0, 800c746 <__d2b+0x82>
 800c704:	9a01      	ldr	r2, [sp, #4]
 800c706:	f1c0 0320 	rsb	r3, r0, #32
 800c70a:	fa02 f303 	lsl.w	r3, r2, r3
 800c70e:	430b      	orrs	r3, r1
 800c710:	40c2      	lsrs	r2, r0
 800c712:	6163      	str	r3, [r4, #20]
 800c714:	9201      	str	r2, [sp, #4]
 800c716:	9b01      	ldr	r3, [sp, #4]
 800c718:	61a3      	str	r3, [r4, #24]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	bf14      	ite	ne
 800c71e:	2202      	movne	r2, #2
 800c720:	2201      	moveq	r2, #1
 800c722:	6122      	str	r2, [r4, #16]
 800c724:	b1d5      	cbz	r5, 800c75c <__d2b+0x98>
 800c726:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c72a:	4405      	add	r5, r0
 800c72c:	f8c9 5000 	str.w	r5, [r9]
 800c730:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c734:	f8c8 0000 	str.w	r0, [r8]
 800c738:	4620      	mov	r0, r4
 800c73a:	b003      	add	sp, #12
 800c73c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c740:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c744:	e7d5      	b.n	800c6f2 <__d2b+0x2e>
 800c746:	6161      	str	r1, [r4, #20]
 800c748:	e7e5      	b.n	800c716 <__d2b+0x52>
 800c74a:	a801      	add	r0, sp, #4
 800c74c:	f7ff fcde 	bl	800c10c <__lo0bits>
 800c750:	9b01      	ldr	r3, [sp, #4]
 800c752:	6163      	str	r3, [r4, #20]
 800c754:	2201      	movs	r2, #1
 800c756:	6122      	str	r2, [r4, #16]
 800c758:	3020      	adds	r0, #32
 800c75a:	e7e3      	b.n	800c724 <__d2b+0x60>
 800c75c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c760:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c764:	f8c9 0000 	str.w	r0, [r9]
 800c768:	6918      	ldr	r0, [r3, #16]
 800c76a:	f7ff fcaf 	bl	800c0cc <__hi0bits>
 800c76e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c772:	e7df      	b.n	800c734 <__d2b+0x70>
 800c774:	0800d6c0 	.word	0x0800d6c0
 800c778:	0800d74c 	.word	0x0800d74c

0800c77c <__ratio>:
 800c77c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c780:	4688      	mov	r8, r1
 800c782:	4669      	mov	r1, sp
 800c784:	4681      	mov	r9, r0
 800c786:	f7ff ff4d 	bl	800c624 <__b2d>
 800c78a:	a901      	add	r1, sp, #4
 800c78c:	4640      	mov	r0, r8
 800c78e:	ec55 4b10 	vmov	r4, r5, d0
 800c792:	f7ff ff47 	bl	800c624 <__b2d>
 800c796:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c79a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c79e:	eba3 0c02 	sub.w	ip, r3, r2
 800c7a2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c7a6:	1a9b      	subs	r3, r3, r2
 800c7a8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c7ac:	ec51 0b10 	vmov	r0, r1, d0
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	bfd6      	itet	le
 800c7b4:	460a      	movle	r2, r1
 800c7b6:	462a      	movgt	r2, r5
 800c7b8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c7bc:	468b      	mov	fp, r1
 800c7be:	462f      	mov	r7, r5
 800c7c0:	bfd4      	ite	le
 800c7c2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c7c6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c7ca:	4620      	mov	r0, r4
 800c7cc:	ee10 2a10 	vmov	r2, s0
 800c7d0:	465b      	mov	r3, fp
 800c7d2:	4639      	mov	r1, r7
 800c7d4:	f7f4 f842 	bl	800085c <__aeabi_ddiv>
 800c7d8:	ec41 0b10 	vmov	d0, r0, r1
 800c7dc:	b003      	add	sp, #12
 800c7de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c7e2 <__copybits>:
 800c7e2:	3901      	subs	r1, #1
 800c7e4:	b570      	push	{r4, r5, r6, lr}
 800c7e6:	1149      	asrs	r1, r1, #5
 800c7e8:	6914      	ldr	r4, [r2, #16]
 800c7ea:	3101      	adds	r1, #1
 800c7ec:	f102 0314 	add.w	r3, r2, #20
 800c7f0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c7f4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c7f8:	1f05      	subs	r5, r0, #4
 800c7fa:	42a3      	cmp	r3, r4
 800c7fc:	d30c      	bcc.n	800c818 <__copybits+0x36>
 800c7fe:	1aa3      	subs	r3, r4, r2
 800c800:	3b11      	subs	r3, #17
 800c802:	f023 0303 	bic.w	r3, r3, #3
 800c806:	3211      	adds	r2, #17
 800c808:	42a2      	cmp	r2, r4
 800c80a:	bf88      	it	hi
 800c80c:	2300      	movhi	r3, #0
 800c80e:	4418      	add	r0, r3
 800c810:	2300      	movs	r3, #0
 800c812:	4288      	cmp	r0, r1
 800c814:	d305      	bcc.n	800c822 <__copybits+0x40>
 800c816:	bd70      	pop	{r4, r5, r6, pc}
 800c818:	f853 6b04 	ldr.w	r6, [r3], #4
 800c81c:	f845 6f04 	str.w	r6, [r5, #4]!
 800c820:	e7eb      	b.n	800c7fa <__copybits+0x18>
 800c822:	f840 3b04 	str.w	r3, [r0], #4
 800c826:	e7f4      	b.n	800c812 <__copybits+0x30>

0800c828 <__any_on>:
 800c828:	f100 0214 	add.w	r2, r0, #20
 800c82c:	6900      	ldr	r0, [r0, #16]
 800c82e:	114b      	asrs	r3, r1, #5
 800c830:	4298      	cmp	r0, r3
 800c832:	b510      	push	{r4, lr}
 800c834:	db11      	blt.n	800c85a <__any_on+0x32>
 800c836:	dd0a      	ble.n	800c84e <__any_on+0x26>
 800c838:	f011 011f 	ands.w	r1, r1, #31
 800c83c:	d007      	beq.n	800c84e <__any_on+0x26>
 800c83e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c842:	fa24 f001 	lsr.w	r0, r4, r1
 800c846:	fa00 f101 	lsl.w	r1, r0, r1
 800c84a:	428c      	cmp	r4, r1
 800c84c:	d10b      	bne.n	800c866 <__any_on+0x3e>
 800c84e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c852:	4293      	cmp	r3, r2
 800c854:	d803      	bhi.n	800c85e <__any_on+0x36>
 800c856:	2000      	movs	r0, #0
 800c858:	bd10      	pop	{r4, pc}
 800c85a:	4603      	mov	r3, r0
 800c85c:	e7f7      	b.n	800c84e <__any_on+0x26>
 800c85e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c862:	2900      	cmp	r1, #0
 800c864:	d0f5      	beq.n	800c852 <__any_on+0x2a>
 800c866:	2001      	movs	r0, #1
 800c868:	e7f6      	b.n	800c858 <__any_on+0x30>

0800c86a <_calloc_r>:
 800c86a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c86c:	fba1 2402 	umull	r2, r4, r1, r2
 800c870:	b94c      	cbnz	r4, 800c886 <_calloc_r+0x1c>
 800c872:	4611      	mov	r1, r2
 800c874:	9201      	str	r2, [sp, #4]
 800c876:	f7fc f9ab 	bl	8008bd0 <_malloc_r>
 800c87a:	9a01      	ldr	r2, [sp, #4]
 800c87c:	4605      	mov	r5, r0
 800c87e:	b930      	cbnz	r0, 800c88e <_calloc_r+0x24>
 800c880:	4628      	mov	r0, r5
 800c882:	b003      	add	sp, #12
 800c884:	bd30      	pop	{r4, r5, pc}
 800c886:	220c      	movs	r2, #12
 800c888:	6002      	str	r2, [r0, #0]
 800c88a:	2500      	movs	r5, #0
 800c88c:	e7f8      	b.n	800c880 <_calloc_r+0x16>
 800c88e:	4621      	mov	r1, r4
 800c890:	f7fc f975 	bl	8008b7e <memset>
 800c894:	e7f4      	b.n	800c880 <_calloc_r+0x16>
	...

0800c898 <_free_r>:
 800c898:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c89a:	2900      	cmp	r1, #0
 800c89c:	d044      	beq.n	800c928 <_free_r+0x90>
 800c89e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8a2:	9001      	str	r0, [sp, #4]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	f1a1 0404 	sub.w	r4, r1, #4
 800c8aa:	bfb8      	it	lt
 800c8ac:	18e4      	addlt	r4, r4, r3
 800c8ae:	f7ff fb0f 	bl	800bed0 <__malloc_lock>
 800c8b2:	4a1e      	ldr	r2, [pc, #120]	; (800c92c <_free_r+0x94>)
 800c8b4:	9801      	ldr	r0, [sp, #4]
 800c8b6:	6813      	ldr	r3, [r2, #0]
 800c8b8:	b933      	cbnz	r3, 800c8c8 <_free_r+0x30>
 800c8ba:	6063      	str	r3, [r4, #4]
 800c8bc:	6014      	str	r4, [r2, #0]
 800c8be:	b003      	add	sp, #12
 800c8c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c8c4:	f7ff bb0a 	b.w	800bedc <__malloc_unlock>
 800c8c8:	42a3      	cmp	r3, r4
 800c8ca:	d908      	bls.n	800c8de <_free_r+0x46>
 800c8cc:	6825      	ldr	r5, [r4, #0]
 800c8ce:	1961      	adds	r1, r4, r5
 800c8d0:	428b      	cmp	r3, r1
 800c8d2:	bf01      	itttt	eq
 800c8d4:	6819      	ldreq	r1, [r3, #0]
 800c8d6:	685b      	ldreq	r3, [r3, #4]
 800c8d8:	1949      	addeq	r1, r1, r5
 800c8da:	6021      	streq	r1, [r4, #0]
 800c8dc:	e7ed      	b.n	800c8ba <_free_r+0x22>
 800c8de:	461a      	mov	r2, r3
 800c8e0:	685b      	ldr	r3, [r3, #4]
 800c8e2:	b10b      	cbz	r3, 800c8e8 <_free_r+0x50>
 800c8e4:	42a3      	cmp	r3, r4
 800c8e6:	d9fa      	bls.n	800c8de <_free_r+0x46>
 800c8e8:	6811      	ldr	r1, [r2, #0]
 800c8ea:	1855      	adds	r5, r2, r1
 800c8ec:	42a5      	cmp	r5, r4
 800c8ee:	d10b      	bne.n	800c908 <_free_r+0x70>
 800c8f0:	6824      	ldr	r4, [r4, #0]
 800c8f2:	4421      	add	r1, r4
 800c8f4:	1854      	adds	r4, r2, r1
 800c8f6:	42a3      	cmp	r3, r4
 800c8f8:	6011      	str	r1, [r2, #0]
 800c8fa:	d1e0      	bne.n	800c8be <_free_r+0x26>
 800c8fc:	681c      	ldr	r4, [r3, #0]
 800c8fe:	685b      	ldr	r3, [r3, #4]
 800c900:	6053      	str	r3, [r2, #4]
 800c902:	4421      	add	r1, r4
 800c904:	6011      	str	r1, [r2, #0]
 800c906:	e7da      	b.n	800c8be <_free_r+0x26>
 800c908:	d902      	bls.n	800c910 <_free_r+0x78>
 800c90a:	230c      	movs	r3, #12
 800c90c:	6003      	str	r3, [r0, #0]
 800c90e:	e7d6      	b.n	800c8be <_free_r+0x26>
 800c910:	6825      	ldr	r5, [r4, #0]
 800c912:	1961      	adds	r1, r4, r5
 800c914:	428b      	cmp	r3, r1
 800c916:	bf04      	itt	eq
 800c918:	6819      	ldreq	r1, [r3, #0]
 800c91a:	685b      	ldreq	r3, [r3, #4]
 800c91c:	6063      	str	r3, [r4, #4]
 800c91e:	bf04      	itt	eq
 800c920:	1949      	addeq	r1, r1, r5
 800c922:	6021      	streq	r1, [r4, #0]
 800c924:	6054      	str	r4, [r2, #4]
 800c926:	e7ca      	b.n	800c8be <_free_r+0x26>
 800c928:	b003      	add	sp, #12
 800c92a:	bd30      	pop	{r4, r5, pc}
 800c92c:	20004520 	.word	0x20004520

0800c930 <__ssputs_r>:
 800c930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c934:	688e      	ldr	r6, [r1, #8]
 800c936:	429e      	cmp	r6, r3
 800c938:	4682      	mov	sl, r0
 800c93a:	460c      	mov	r4, r1
 800c93c:	4690      	mov	r8, r2
 800c93e:	461f      	mov	r7, r3
 800c940:	d838      	bhi.n	800c9b4 <__ssputs_r+0x84>
 800c942:	898a      	ldrh	r2, [r1, #12]
 800c944:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c948:	d032      	beq.n	800c9b0 <__ssputs_r+0x80>
 800c94a:	6825      	ldr	r5, [r4, #0]
 800c94c:	6909      	ldr	r1, [r1, #16]
 800c94e:	eba5 0901 	sub.w	r9, r5, r1
 800c952:	6965      	ldr	r5, [r4, #20]
 800c954:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c958:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c95c:	3301      	adds	r3, #1
 800c95e:	444b      	add	r3, r9
 800c960:	106d      	asrs	r5, r5, #1
 800c962:	429d      	cmp	r5, r3
 800c964:	bf38      	it	cc
 800c966:	461d      	movcc	r5, r3
 800c968:	0553      	lsls	r3, r2, #21
 800c96a:	d531      	bpl.n	800c9d0 <__ssputs_r+0xa0>
 800c96c:	4629      	mov	r1, r5
 800c96e:	f7fc f92f 	bl	8008bd0 <_malloc_r>
 800c972:	4606      	mov	r6, r0
 800c974:	b950      	cbnz	r0, 800c98c <__ssputs_r+0x5c>
 800c976:	230c      	movs	r3, #12
 800c978:	f8ca 3000 	str.w	r3, [sl]
 800c97c:	89a3      	ldrh	r3, [r4, #12]
 800c97e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c982:	81a3      	strh	r3, [r4, #12]
 800c984:	f04f 30ff 	mov.w	r0, #4294967295
 800c988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c98c:	6921      	ldr	r1, [r4, #16]
 800c98e:	464a      	mov	r2, r9
 800c990:	f7fc f8e7 	bl	8008b62 <memcpy>
 800c994:	89a3      	ldrh	r3, [r4, #12]
 800c996:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c99a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c99e:	81a3      	strh	r3, [r4, #12]
 800c9a0:	6126      	str	r6, [r4, #16]
 800c9a2:	6165      	str	r5, [r4, #20]
 800c9a4:	444e      	add	r6, r9
 800c9a6:	eba5 0509 	sub.w	r5, r5, r9
 800c9aa:	6026      	str	r6, [r4, #0]
 800c9ac:	60a5      	str	r5, [r4, #8]
 800c9ae:	463e      	mov	r6, r7
 800c9b0:	42be      	cmp	r6, r7
 800c9b2:	d900      	bls.n	800c9b6 <__ssputs_r+0x86>
 800c9b4:	463e      	mov	r6, r7
 800c9b6:	6820      	ldr	r0, [r4, #0]
 800c9b8:	4632      	mov	r2, r6
 800c9ba:	4641      	mov	r1, r8
 800c9bc:	f000 f982 	bl	800ccc4 <memmove>
 800c9c0:	68a3      	ldr	r3, [r4, #8]
 800c9c2:	1b9b      	subs	r3, r3, r6
 800c9c4:	60a3      	str	r3, [r4, #8]
 800c9c6:	6823      	ldr	r3, [r4, #0]
 800c9c8:	4433      	add	r3, r6
 800c9ca:	6023      	str	r3, [r4, #0]
 800c9cc:	2000      	movs	r0, #0
 800c9ce:	e7db      	b.n	800c988 <__ssputs_r+0x58>
 800c9d0:	462a      	mov	r2, r5
 800c9d2:	f000 f991 	bl	800ccf8 <_realloc_r>
 800c9d6:	4606      	mov	r6, r0
 800c9d8:	2800      	cmp	r0, #0
 800c9da:	d1e1      	bne.n	800c9a0 <__ssputs_r+0x70>
 800c9dc:	6921      	ldr	r1, [r4, #16]
 800c9de:	4650      	mov	r0, sl
 800c9e0:	f7ff ff5a 	bl	800c898 <_free_r>
 800c9e4:	e7c7      	b.n	800c976 <__ssputs_r+0x46>
	...

0800c9e8 <_svfiprintf_r>:
 800c9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9ec:	4698      	mov	r8, r3
 800c9ee:	898b      	ldrh	r3, [r1, #12]
 800c9f0:	061b      	lsls	r3, r3, #24
 800c9f2:	b09d      	sub	sp, #116	; 0x74
 800c9f4:	4607      	mov	r7, r0
 800c9f6:	460d      	mov	r5, r1
 800c9f8:	4614      	mov	r4, r2
 800c9fa:	d50e      	bpl.n	800ca1a <_svfiprintf_r+0x32>
 800c9fc:	690b      	ldr	r3, [r1, #16]
 800c9fe:	b963      	cbnz	r3, 800ca1a <_svfiprintf_r+0x32>
 800ca00:	2140      	movs	r1, #64	; 0x40
 800ca02:	f7fc f8e5 	bl	8008bd0 <_malloc_r>
 800ca06:	6028      	str	r0, [r5, #0]
 800ca08:	6128      	str	r0, [r5, #16]
 800ca0a:	b920      	cbnz	r0, 800ca16 <_svfiprintf_r+0x2e>
 800ca0c:	230c      	movs	r3, #12
 800ca0e:	603b      	str	r3, [r7, #0]
 800ca10:	f04f 30ff 	mov.w	r0, #4294967295
 800ca14:	e0d1      	b.n	800cbba <_svfiprintf_r+0x1d2>
 800ca16:	2340      	movs	r3, #64	; 0x40
 800ca18:	616b      	str	r3, [r5, #20]
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	9309      	str	r3, [sp, #36]	; 0x24
 800ca1e:	2320      	movs	r3, #32
 800ca20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca24:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca28:	2330      	movs	r3, #48	; 0x30
 800ca2a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cbd4 <_svfiprintf_r+0x1ec>
 800ca2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ca32:	f04f 0901 	mov.w	r9, #1
 800ca36:	4623      	mov	r3, r4
 800ca38:	469a      	mov	sl, r3
 800ca3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca3e:	b10a      	cbz	r2, 800ca44 <_svfiprintf_r+0x5c>
 800ca40:	2a25      	cmp	r2, #37	; 0x25
 800ca42:	d1f9      	bne.n	800ca38 <_svfiprintf_r+0x50>
 800ca44:	ebba 0b04 	subs.w	fp, sl, r4
 800ca48:	d00b      	beq.n	800ca62 <_svfiprintf_r+0x7a>
 800ca4a:	465b      	mov	r3, fp
 800ca4c:	4622      	mov	r2, r4
 800ca4e:	4629      	mov	r1, r5
 800ca50:	4638      	mov	r0, r7
 800ca52:	f7ff ff6d 	bl	800c930 <__ssputs_r>
 800ca56:	3001      	adds	r0, #1
 800ca58:	f000 80aa 	beq.w	800cbb0 <_svfiprintf_r+0x1c8>
 800ca5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca5e:	445a      	add	r2, fp
 800ca60:	9209      	str	r2, [sp, #36]	; 0x24
 800ca62:	f89a 3000 	ldrb.w	r3, [sl]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	f000 80a2 	beq.w	800cbb0 <_svfiprintf_r+0x1c8>
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	f04f 32ff 	mov.w	r2, #4294967295
 800ca72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca76:	f10a 0a01 	add.w	sl, sl, #1
 800ca7a:	9304      	str	r3, [sp, #16]
 800ca7c:	9307      	str	r3, [sp, #28]
 800ca7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ca82:	931a      	str	r3, [sp, #104]	; 0x68
 800ca84:	4654      	mov	r4, sl
 800ca86:	2205      	movs	r2, #5
 800ca88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca8c:	4851      	ldr	r0, [pc, #324]	; (800cbd4 <_svfiprintf_r+0x1ec>)
 800ca8e:	f7f3 fbaf 	bl	80001f0 <memchr>
 800ca92:	9a04      	ldr	r2, [sp, #16]
 800ca94:	b9d8      	cbnz	r0, 800cace <_svfiprintf_r+0xe6>
 800ca96:	06d0      	lsls	r0, r2, #27
 800ca98:	bf44      	itt	mi
 800ca9a:	2320      	movmi	r3, #32
 800ca9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800caa0:	0711      	lsls	r1, r2, #28
 800caa2:	bf44      	itt	mi
 800caa4:	232b      	movmi	r3, #43	; 0x2b
 800caa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800caaa:	f89a 3000 	ldrb.w	r3, [sl]
 800caae:	2b2a      	cmp	r3, #42	; 0x2a
 800cab0:	d015      	beq.n	800cade <_svfiprintf_r+0xf6>
 800cab2:	9a07      	ldr	r2, [sp, #28]
 800cab4:	4654      	mov	r4, sl
 800cab6:	2000      	movs	r0, #0
 800cab8:	f04f 0c0a 	mov.w	ip, #10
 800cabc:	4621      	mov	r1, r4
 800cabe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cac2:	3b30      	subs	r3, #48	; 0x30
 800cac4:	2b09      	cmp	r3, #9
 800cac6:	d94e      	bls.n	800cb66 <_svfiprintf_r+0x17e>
 800cac8:	b1b0      	cbz	r0, 800caf8 <_svfiprintf_r+0x110>
 800caca:	9207      	str	r2, [sp, #28]
 800cacc:	e014      	b.n	800caf8 <_svfiprintf_r+0x110>
 800cace:	eba0 0308 	sub.w	r3, r0, r8
 800cad2:	fa09 f303 	lsl.w	r3, r9, r3
 800cad6:	4313      	orrs	r3, r2
 800cad8:	9304      	str	r3, [sp, #16]
 800cada:	46a2      	mov	sl, r4
 800cadc:	e7d2      	b.n	800ca84 <_svfiprintf_r+0x9c>
 800cade:	9b03      	ldr	r3, [sp, #12]
 800cae0:	1d19      	adds	r1, r3, #4
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	9103      	str	r1, [sp, #12]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	bfbb      	ittet	lt
 800caea:	425b      	neglt	r3, r3
 800caec:	f042 0202 	orrlt.w	r2, r2, #2
 800caf0:	9307      	strge	r3, [sp, #28]
 800caf2:	9307      	strlt	r3, [sp, #28]
 800caf4:	bfb8      	it	lt
 800caf6:	9204      	strlt	r2, [sp, #16]
 800caf8:	7823      	ldrb	r3, [r4, #0]
 800cafa:	2b2e      	cmp	r3, #46	; 0x2e
 800cafc:	d10c      	bne.n	800cb18 <_svfiprintf_r+0x130>
 800cafe:	7863      	ldrb	r3, [r4, #1]
 800cb00:	2b2a      	cmp	r3, #42	; 0x2a
 800cb02:	d135      	bne.n	800cb70 <_svfiprintf_r+0x188>
 800cb04:	9b03      	ldr	r3, [sp, #12]
 800cb06:	1d1a      	adds	r2, r3, #4
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	9203      	str	r2, [sp, #12]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	bfb8      	it	lt
 800cb10:	f04f 33ff 	movlt.w	r3, #4294967295
 800cb14:	3402      	adds	r4, #2
 800cb16:	9305      	str	r3, [sp, #20]
 800cb18:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cbe4 <_svfiprintf_r+0x1fc>
 800cb1c:	7821      	ldrb	r1, [r4, #0]
 800cb1e:	2203      	movs	r2, #3
 800cb20:	4650      	mov	r0, sl
 800cb22:	f7f3 fb65 	bl	80001f0 <memchr>
 800cb26:	b140      	cbz	r0, 800cb3a <_svfiprintf_r+0x152>
 800cb28:	2340      	movs	r3, #64	; 0x40
 800cb2a:	eba0 000a 	sub.w	r0, r0, sl
 800cb2e:	fa03 f000 	lsl.w	r0, r3, r0
 800cb32:	9b04      	ldr	r3, [sp, #16]
 800cb34:	4303      	orrs	r3, r0
 800cb36:	3401      	adds	r4, #1
 800cb38:	9304      	str	r3, [sp, #16]
 800cb3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb3e:	4826      	ldr	r0, [pc, #152]	; (800cbd8 <_svfiprintf_r+0x1f0>)
 800cb40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cb44:	2206      	movs	r2, #6
 800cb46:	f7f3 fb53 	bl	80001f0 <memchr>
 800cb4a:	2800      	cmp	r0, #0
 800cb4c:	d038      	beq.n	800cbc0 <_svfiprintf_r+0x1d8>
 800cb4e:	4b23      	ldr	r3, [pc, #140]	; (800cbdc <_svfiprintf_r+0x1f4>)
 800cb50:	bb1b      	cbnz	r3, 800cb9a <_svfiprintf_r+0x1b2>
 800cb52:	9b03      	ldr	r3, [sp, #12]
 800cb54:	3307      	adds	r3, #7
 800cb56:	f023 0307 	bic.w	r3, r3, #7
 800cb5a:	3308      	adds	r3, #8
 800cb5c:	9303      	str	r3, [sp, #12]
 800cb5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb60:	4433      	add	r3, r6
 800cb62:	9309      	str	r3, [sp, #36]	; 0x24
 800cb64:	e767      	b.n	800ca36 <_svfiprintf_r+0x4e>
 800cb66:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb6a:	460c      	mov	r4, r1
 800cb6c:	2001      	movs	r0, #1
 800cb6e:	e7a5      	b.n	800cabc <_svfiprintf_r+0xd4>
 800cb70:	2300      	movs	r3, #0
 800cb72:	3401      	adds	r4, #1
 800cb74:	9305      	str	r3, [sp, #20]
 800cb76:	4619      	mov	r1, r3
 800cb78:	f04f 0c0a 	mov.w	ip, #10
 800cb7c:	4620      	mov	r0, r4
 800cb7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb82:	3a30      	subs	r2, #48	; 0x30
 800cb84:	2a09      	cmp	r2, #9
 800cb86:	d903      	bls.n	800cb90 <_svfiprintf_r+0x1a8>
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d0c5      	beq.n	800cb18 <_svfiprintf_r+0x130>
 800cb8c:	9105      	str	r1, [sp, #20]
 800cb8e:	e7c3      	b.n	800cb18 <_svfiprintf_r+0x130>
 800cb90:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb94:	4604      	mov	r4, r0
 800cb96:	2301      	movs	r3, #1
 800cb98:	e7f0      	b.n	800cb7c <_svfiprintf_r+0x194>
 800cb9a:	ab03      	add	r3, sp, #12
 800cb9c:	9300      	str	r3, [sp, #0]
 800cb9e:	462a      	mov	r2, r5
 800cba0:	4b0f      	ldr	r3, [pc, #60]	; (800cbe0 <_svfiprintf_r+0x1f8>)
 800cba2:	a904      	add	r1, sp, #16
 800cba4:	4638      	mov	r0, r7
 800cba6:	f7fc f927 	bl	8008df8 <_printf_float>
 800cbaa:	1c42      	adds	r2, r0, #1
 800cbac:	4606      	mov	r6, r0
 800cbae:	d1d6      	bne.n	800cb5e <_svfiprintf_r+0x176>
 800cbb0:	89ab      	ldrh	r3, [r5, #12]
 800cbb2:	065b      	lsls	r3, r3, #25
 800cbb4:	f53f af2c 	bmi.w	800ca10 <_svfiprintf_r+0x28>
 800cbb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cbba:	b01d      	add	sp, #116	; 0x74
 800cbbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbc0:	ab03      	add	r3, sp, #12
 800cbc2:	9300      	str	r3, [sp, #0]
 800cbc4:	462a      	mov	r2, r5
 800cbc6:	4b06      	ldr	r3, [pc, #24]	; (800cbe0 <_svfiprintf_r+0x1f8>)
 800cbc8:	a904      	add	r1, sp, #16
 800cbca:	4638      	mov	r0, r7
 800cbcc:	f7fc fbb8 	bl	8009340 <_printf_i>
 800cbd0:	e7eb      	b.n	800cbaa <_svfiprintf_r+0x1c2>
 800cbd2:	bf00      	nop
 800cbd4:	0800d8a4 	.word	0x0800d8a4
 800cbd8:	0800d8ae 	.word	0x0800d8ae
 800cbdc:	08008df9 	.word	0x08008df9
 800cbe0:	0800c931 	.word	0x0800c931
 800cbe4:	0800d8aa 	.word	0x0800d8aa

0800cbe8 <_read_r>:
 800cbe8:	b538      	push	{r3, r4, r5, lr}
 800cbea:	4d07      	ldr	r5, [pc, #28]	; (800cc08 <_read_r+0x20>)
 800cbec:	4604      	mov	r4, r0
 800cbee:	4608      	mov	r0, r1
 800cbf0:	4611      	mov	r1, r2
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	602a      	str	r2, [r5, #0]
 800cbf6:	461a      	mov	r2, r3
 800cbf8:	f7f6 f862 	bl	8002cc0 <_read>
 800cbfc:	1c43      	adds	r3, r0, #1
 800cbfe:	d102      	bne.n	800cc06 <_read_r+0x1e>
 800cc00:	682b      	ldr	r3, [r5, #0]
 800cc02:	b103      	cbz	r3, 800cc06 <_read_r+0x1e>
 800cc04:	6023      	str	r3, [r4, #0]
 800cc06:	bd38      	pop	{r3, r4, r5, pc}
 800cc08:	20004528 	.word	0x20004528
 800cc0c:	00000000 	.word	0x00000000

0800cc10 <nan>:
 800cc10:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cc18 <nan+0x8>
 800cc14:	4770      	bx	lr
 800cc16:	bf00      	nop
 800cc18:	00000000 	.word	0x00000000
 800cc1c:	7ff80000 	.word	0x7ff80000

0800cc20 <strncmp>:
 800cc20:	b510      	push	{r4, lr}
 800cc22:	b17a      	cbz	r2, 800cc44 <strncmp+0x24>
 800cc24:	4603      	mov	r3, r0
 800cc26:	3901      	subs	r1, #1
 800cc28:	1884      	adds	r4, r0, r2
 800cc2a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cc2e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cc32:	4290      	cmp	r0, r2
 800cc34:	d101      	bne.n	800cc3a <strncmp+0x1a>
 800cc36:	42a3      	cmp	r3, r4
 800cc38:	d101      	bne.n	800cc3e <strncmp+0x1e>
 800cc3a:	1a80      	subs	r0, r0, r2
 800cc3c:	bd10      	pop	{r4, pc}
 800cc3e:	2800      	cmp	r0, #0
 800cc40:	d1f3      	bne.n	800cc2a <strncmp+0xa>
 800cc42:	e7fa      	b.n	800cc3a <strncmp+0x1a>
 800cc44:	4610      	mov	r0, r2
 800cc46:	e7f9      	b.n	800cc3c <strncmp+0x1c>

0800cc48 <__ascii_wctomb>:
 800cc48:	b149      	cbz	r1, 800cc5e <__ascii_wctomb+0x16>
 800cc4a:	2aff      	cmp	r2, #255	; 0xff
 800cc4c:	bf85      	ittet	hi
 800cc4e:	238a      	movhi	r3, #138	; 0x8a
 800cc50:	6003      	strhi	r3, [r0, #0]
 800cc52:	700a      	strbls	r2, [r1, #0]
 800cc54:	f04f 30ff 	movhi.w	r0, #4294967295
 800cc58:	bf98      	it	ls
 800cc5a:	2001      	movls	r0, #1
 800cc5c:	4770      	bx	lr
 800cc5e:	4608      	mov	r0, r1
 800cc60:	4770      	bx	lr
	...

0800cc64 <__assert_func>:
 800cc64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cc66:	4614      	mov	r4, r2
 800cc68:	461a      	mov	r2, r3
 800cc6a:	4b09      	ldr	r3, [pc, #36]	; (800cc90 <__assert_func+0x2c>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	4605      	mov	r5, r0
 800cc70:	68d8      	ldr	r0, [r3, #12]
 800cc72:	b14c      	cbz	r4, 800cc88 <__assert_func+0x24>
 800cc74:	4b07      	ldr	r3, [pc, #28]	; (800cc94 <__assert_func+0x30>)
 800cc76:	9100      	str	r1, [sp, #0]
 800cc78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cc7c:	4906      	ldr	r1, [pc, #24]	; (800cc98 <__assert_func+0x34>)
 800cc7e:	462b      	mov	r3, r5
 800cc80:	f000 f80e 	bl	800cca0 <fiprintf>
 800cc84:	f000 fa80 	bl	800d188 <abort>
 800cc88:	4b04      	ldr	r3, [pc, #16]	; (800cc9c <__assert_func+0x38>)
 800cc8a:	461c      	mov	r4, r3
 800cc8c:	e7f3      	b.n	800cc76 <__assert_func+0x12>
 800cc8e:	bf00      	nop
 800cc90:	20000020 	.word	0x20000020
 800cc94:	0800d8b5 	.word	0x0800d8b5
 800cc98:	0800d8c2 	.word	0x0800d8c2
 800cc9c:	0800d8f0 	.word	0x0800d8f0

0800cca0 <fiprintf>:
 800cca0:	b40e      	push	{r1, r2, r3}
 800cca2:	b503      	push	{r0, r1, lr}
 800cca4:	4601      	mov	r1, r0
 800cca6:	ab03      	add	r3, sp, #12
 800cca8:	4805      	ldr	r0, [pc, #20]	; (800ccc0 <fiprintf+0x20>)
 800ccaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccae:	6800      	ldr	r0, [r0, #0]
 800ccb0:	9301      	str	r3, [sp, #4]
 800ccb2:	f000 f879 	bl	800cda8 <_vfiprintf_r>
 800ccb6:	b002      	add	sp, #8
 800ccb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800ccbc:	b003      	add	sp, #12
 800ccbe:	4770      	bx	lr
 800ccc0:	20000020 	.word	0x20000020

0800ccc4 <memmove>:
 800ccc4:	4288      	cmp	r0, r1
 800ccc6:	b510      	push	{r4, lr}
 800ccc8:	eb01 0402 	add.w	r4, r1, r2
 800cccc:	d902      	bls.n	800ccd4 <memmove+0x10>
 800ccce:	4284      	cmp	r4, r0
 800ccd0:	4623      	mov	r3, r4
 800ccd2:	d807      	bhi.n	800cce4 <memmove+0x20>
 800ccd4:	1e43      	subs	r3, r0, #1
 800ccd6:	42a1      	cmp	r1, r4
 800ccd8:	d008      	beq.n	800ccec <memmove+0x28>
 800ccda:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ccde:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cce2:	e7f8      	b.n	800ccd6 <memmove+0x12>
 800cce4:	4402      	add	r2, r0
 800cce6:	4601      	mov	r1, r0
 800cce8:	428a      	cmp	r2, r1
 800ccea:	d100      	bne.n	800ccee <memmove+0x2a>
 800ccec:	bd10      	pop	{r4, pc}
 800ccee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ccf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ccf6:	e7f7      	b.n	800cce8 <memmove+0x24>

0800ccf8 <_realloc_r>:
 800ccf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccfc:	4680      	mov	r8, r0
 800ccfe:	4614      	mov	r4, r2
 800cd00:	460e      	mov	r6, r1
 800cd02:	b921      	cbnz	r1, 800cd0e <_realloc_r+0x16>
 800cd04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd08:	4611      	mov	r1, r2
 800cd0a:	f7fb bf61 	b.w	8008bd0 <_malloc_r>
 800cd0e:	b92a      	cbnz	r2, 800cd1c <_realloc_r+0x24>
 800cd10:	f7ff fdc2 	bl	800c898 <_free_r>
 800cd14:	4625      	mov	r5, r4
 800cd16:	4628      	mov	r0, r5
 800cd18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd1c:	f000 faa0 	bl	800d260 <_malloc_usable_size_r>
 800cd20:	4284      	cmp	r4, r0
 800cd22:	4607      	mov	r7, r0
 800cd24:	d802      	bhi.n	800cd2c <_realloc_r+0x34>
 800cd26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cd2a:	d812      	bhi.n	800cd52 <_realloc_r+0x5a>
 800cd2c:	4621      	mov	r1, r4
 800cd2e:	4640      	mov	r0, r8
 800cd30:	f7fb ff4e 	bl	8008bd0 <_malloc_r>
 800cd34:	4605      	mov	r5, r0
 800cd36:	2800      	cmp	r0, #0
 800cd38:	d0ed      	beq.n	800cd16 <_realloc_r+0x1e>
 800cd3a:	42bc      	cmp	r4, r7
 800cd3c:	4622      	mov	r2, r4
 800cd3e:	4631      	mov	r1, r6
 800cd40:	bf28      	it	cs
 800cd42:	463a      	movcs	r2, r7
 800cd44:	f7fb ff0d 	bl	8008b62 <memcpy>
 800cd48:	4631      	mov	r1, r6
 800cd4a:	4640      	mov	r0, r8
 800cd4c:	f7ff fda4 	bl	800c898 <_free_r>
 800cd50:	e7e1      	b.n	800cd16 <_realloc_r+0x1e>
 800cd52:	4635      	mov	r5, r6
 800cd54:	e7df      	b.n	800cd16 <_realloc_r+0x1e>

0800cd56 <__sfputc_r>:
 800cd56:	6893      	ldr	r3, [r2, #8]
 800cd58:	3b01      	subs	r3, #1
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	b410      	push	{r4}
 800cd5e:	6093      	str	r3, [r2, #8]
 800cd60:	da08      	bge.n	800cd74 <__sfputc_r+0x1e>
 800cd62:	6994      	ldr	r4, [r2, #24]
 800cd64:	42a3      	cmp	r3, r4
 800cd66:	db01      	blt.n	800cd6c <__sfputc_r+0x16>
 800cd68:	290a      	cmp	r1, #10
 800cd6a:	d103      	bne.n	800cd74 <__sfputc_r+0x1e>
 800cd6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd70:	f000 b94a 	b.w	800d008 <__swbuf_r>
 800cd74:	6813      	ldr	r3, [r2, #0]
 800cd76:	1c58      	adds	r0, r3, #1
 800cd78:	6010      	str	r0, [r2, #0]
 800cd7a:	7019      	strb	r1, [r3, #0]
 800cd7c:	4608      	mov	r0, r1
 800cd7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd82:	4770      	bx	lr

0800cd84 <__sfputs_r>:
 800cd84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd86:	4606      	mov	r6, r0
 800cd88:	460f      	mov	r7, r1
 800cd8a:	4614      	mov	r4, r2
 800cd8c:	18d5      	adds	r5, r2, r3
 800cd8e:	42ac      	cmp	r4, r5
 800cd90:	d101      	bne.n	800cd96 <__sfputs_r+0x12>
 800cd92:	2000      	movs	r0, #0
 800cd94:	e007      	b.n	800cda6 <__sfputs_r+0x22>
 800cd96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd9a:	463a      	mov	r2, r7
 800cd9c:	4630      	mov	r0, r6
 800cd9e:	f7ff ffda 	bl	800cd56 <__sfputc_r>
 800cda2:	1c43      	adds	r3, r0, #1
 800cda4:	d1f3      	bne.n	800cd8e <__sfputs_r+0xa>
 800cda6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cda8 <_vfiprintf_r>:
 800cda8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdac:	460d      	mov	r5, r1
 800cdae:	b09d      	sub	sp, #116	; 0x74
 800cdb0:	4614      	mov	r4, r2
 800cdb2:	4698      	mov	r8, r3
 800cdb4:	4606      	mov	r6, r0
 800cdb6:	b118      	cbz	r0, 800cdc0 <_vfiprintf_r+0x18>
 800cdb8:	6983      	ldr	r3, [r0, #24]
 800cdba:	b90b      	cbnz	r3, 800cdc0 <_vfiprintf_r+0x18>
 800cdbc:	f7fb fe0c 	bl	80089d8 <__sinit>
 800cdc0:	4b89      	ldr	r3, [pc, #548]	; (800cfe8 <_vfiprintf_r+0x240>)
 800cdc2:	429d      	cmp	r5, r3
 800cdc4:	d11b      	bne.n	800cdfe <_vfiprintf_r+0x56>
 800cdc6:	6875      	ldr	r5, [r6, #4]
 800cdc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cdca:	07d9      	lsls	r1, r3, #31
 800cdcc:	d405      	bmi.n	800cdda <_vfiprintf_r+0x32>
 800cdce:	89ab      	ldrh	r3, [r5, #12]
 800cdd0:	059a      	lsls	r2, r3, #22
 800cdd2:	d402      	bmi.n	800cdda <_vfiprintf_r+0x32>
 800cdd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cdd6:	f7fb fec2 	bl	8008b5e <__retarget_lock_acquire_recursive>
 800cdda:	89ab      	ldrh	r3, [r5, #12]
 800cddc:	071b      	lsls	r3, r3, #28
 800cdde:	d501      	bpl.n	800cde4 <_vfiprintf_r+0x3c>
 800cde0:	692b      	ldr	r3, [r5, #16]
 800cde2:	b9eb      	cbnz	r3, 800ce20 <_vfiprintf_r+0x78>
 800cde4:	4629      	mov	r1, r5
 800cde6:	4630      	mov	r0, r6
 800cde8:	f000 f960 	bl	800d0ac <__swsetup_r>
 800cdec:	b1c0      	cbz	r0, 800ce20 <_vfiprintf_r+0x78>
 800cdee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cdf0:	07dc      	lsls	r4, r3, #31
 800cdf2:	d50e      	bpl.n	800ce12 <_vfiprintf_r+0x6a>
 800cdf4:	f04f 30ff 	mov.w	r0, #4294967295
 800cdf8:	b01d      	add	sp, #116	; 0x74
 800cdfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdfe:	4b7b      	ldr	r3, [pc, #492]	; (800cfec <_vfiprintf_r+0x244>)
 800ce00:	429d      	cmp	r5, r3
 800ce02:	d101      	bne.n	800ce08 <_vfiprintf_r+0x60>
 800ce04:	68b5      	ldr	r5, [r6, #8]
 800ce06:	e7df      	b.n	800cdc8 <_vfiprintf_r+0x20>
 800ce08:	4b79      	ldr	r3, [pc, #484]	; (800cff0 <_vfiprintf_r+0x248>)
 800ce0a:	429d      	cmp	r5, r3
 800ce0c:	bf08      	it	eq
 800ce0e:	68f5      	ldreq	r5, [r6, #12]
 800ce10:	e7da      	b.n	800cdc8 <_vfiprintf_r+0x20>
 800ce12:	89ab      	ldrh	r3, [r5, #12]
 800ce14:	0598      	lsls	r0, r3, #22
 800ce16:	d4ed      	bmi.n	800cdf4 <_vfiprintf_r+0x4c>
 800ce18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce1a:	f7fb fea1 	bl	8008b60 <__retarget_lock_release_recursive>
 800ce1e:	e7e9      	b.n	800cdf4 <_vfiprintf_r+0x4c>
 800ce20:	2300      	movs	r3, #0
 800ce22:	9309      	str	r3, [sp, #36]	; 0x24
 800ce24:	2320      	movs	r3, #32
 800ce26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce2a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce2e:	2330      	movs	r3, #48	; 0x30
 800ce30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cff4 <_vfiprintf_r+0x24c>
 800ce34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce38:	f04f 0901 	mov.w	r9, #1
 800ce3c:	4623      	mov	r3, r4
 800ce3e:	469a      	mov	sl, r3
 800ce40:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce44:	b10a      	cbz	r2, 800ce4a <_vfiprintf_r+0xa2>
 800ce46:	2a25      	cmp	r2, #37	; 0x25
 800ce48:	d1f9      	bne.n	800ce3e <_vfiprintf_r+0x96>
 800ce4a:	ebba 0b04 	subs.w	fp, sl, r4
 800ce4e:	d00b      	beq.n	800ce68 <_vfiprintf_r+0xc0>
 800ce50:	465b      	mov	r3, fp
 800ce52:	4622      	mov	r2, r4
 800ce54:	4629      	mov	r1, r5
 800ce56:	4630      	mov	r0, r6
 800ce58:	f7ff ff94 	bl	800cd84 <__sfputs_r>
 800ce5c:	3001      	adds	r0, #1
 800ce5e:	f000 80aa 	beq.w	800cfb6 <_vfiprintf_r+0x20e>
 800ce62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce64:	445a      	add	r2, fp
 800ce66:	9209      	str	r2, [sp, #36]	; 0x24
 800ce68:	f89a 3000 	ldrb.w	r3, [sl]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	f000 80a2 	beq.w	800cfb6 <_vfiprintf_r+0x20e>
 800ce72:	2300      	movs	r3, #0
 800ce74:	f04f 32ff 	mov.w	r2, #4294967295
 800ce78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce7c:	f10a 0a01 	add.w	sl, sl, #1
 800ce80:	9304      	str	r3, [sp, #16]
 800ce82:	9307      	str	r3, [sp, #28]
 800ce84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ce88:	931a      	str	r3, [sp, #104]	; 0x68
 800ce8a:	4654      	mov	r4, sl
 800ce8c:	2205      	movs	r2, #5
 800ce8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce92:	4858      	ldr	r0, [pc, #352]	; (800cff4 <_vfiprintf_r+0x24c>)
 800ce94:	f7f3 f9ac 	bl	80001f0 <memchr>
 800ce98:	9a04      	ldr	r2, [sp, #16]
 800ce9a:	b9d8      	cbnz	r0, 800ced4 <_vfiprintf_r+0x12c>
 800ce9c:	06d1      	lsls	r1, r2, #27
 800ce9e:	bf44      	itt	mi
 800cea0:	2320      	movmi	r3, #32
 800cea2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cea6:	0713      	lsls	r3, r2, #28
 800cea8:	bf44      	itt	mi
 800ceaa:	232b      	movmi	r3, #43	; 0x2b
 800ceac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ceb0:	f89a 3000 	ldrb.w	r3, [sl]
 800ceb4:	2b2a      	cmp	r3, #42	; 0x2a
 800ceb6:	d015      	beq.n	800cee4 <_vfiprintf_r+0x13c>
 800ceb8:	9a07      	ldr	r2, [sp, #28]
 800ceba:	4654      	mov	r4, sl
 800cebc:	2000      	movs	r0, #0
 800cebe:	f04f 0c0a 	mov.w	ip, #10
 800cec2:	4621      	mov	r1, r4
 800cec4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cec8:	3b30      	subs	r3, #48	; 0x30
 800ceca:	2b09      	cmp	r3, #9
 800cecc:	d94e      	bls.n	800cf6c <_vfiprintf_r+0x1c4>
 800cece:	b1b0      	cbz	r0, 800cefe <_vfiprintf_r+0x156>
 800ced0:	9207      	str	r2, [sp, #28]
 800ced2:	e014      	b.n	800cefe <_vfiprintf_r+0x156>
 800ced4:	eba0 0308 	sub.w	r3, r0, r8
 800ced8:	fa09 f303 	lsl.w	r3, r9, r3
 800cedc:	4313      	orrs	r3, r2
 800cede:	9304      	str	r3, [sp, #16]
 800cee0:	46a2      	mov	sl, r4
 800cee2:	e7d2      	b.n	800ce8a <_vfiprintf_r+0xe2>
 800cee4:	9b03      	ldr	r3, [sp, #12]
 800cee6:	1d19      	adds	r1, r3, #4
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	9103      	str	r1, [sp, #12]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	bfbb      	ittet	lt
 800cef0:	425b      	neglt	r3, r3
 800cef2:	f042 0202 	orrlt.w	r2, r2, #2
 800cef6:	9307      	strge	r3, [sp, #28]
 800cef8:	9307      	strlt	r3, [sp, #28]
 800cefa:	bfb8      	it	lt
 800cefc:	9204      	strlt	r2, [sp, #16]
 800cefe:	7823      	ldrb	r3, [r4, #0]
 800cf00:	2b2e      	cmp	r3, #46	; 0x2e
 800cf02:	d10c      	bne.n	800cf1e <_vfiprintf_r+0x176>
 800cf04:	7863      	ldrb	r3, [r4, #1]
 800cf06:	2b2a      	cmp	r3, #42	; 0x2a
 800cf08:	d135      	bne.n	800cf76 <_vfiprintf_r+0x1ce>
 800cf0a:	9b03      	ldr	r3, [sp, #12]
 800cf0c:	1d1a      	adds	r2, r3, #4
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	9203      	str	r2, [sp, #12]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	bfb8      	it	lt
 800cf16:	f04f 33ff 	movlt.w	r3, #4294967295
 800cf1a:	3402      	adds	r4, #2
 800cf1c:	9305      	str	r3, [sp, #20]
 800cf1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d004 <_vfiprintf_r+0x25c>
 800cf22:	7821      	ldrb	r1, [r4, #0]
 800cf24:	2203      	movs	r2, #3
 800cf26:	4650      	mov	r0, sl
 800cf28:	f7f3 f962 	bl	80001f0 <memchr>
 800cf2c:	b140      	cbz	r0, 800cf40 <_vfiprintf_r+0x198>
 800cf2e:	2340      	movs	r3, #64	; 0x40
 800cf30:	eba0 000a 	sub.w	r0, r0, sl
 800cf34:	fa03 f000 	lsl.w	r0, r3, r0
 800cf38:	9b04      	ldr	r3, [sp, #16]
 800cf3a:	4303      	orrs	r3, r0
 800cf3c:	3401      	adds	r4, #1
 800cf3e:	9304      	str	r3, [sp, #16]
 800cf40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf44:	482c      	ldr	r0, [pc, #176]	; (800cff8 <_vfiprintf_r+0x250>)
 800cf46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf4a:	2206      	movs	r2, #6
 800cf4c:	f7f3 f950 	bl	80001f0 <memchr>
 800cf50:	2800      	cmp	r0, #0
 800cf52:	d03f      	beq.n	800cfd4 <_vfiprintf_r+0x22c>
 800cf54:	4b29      	ldr	r3, [pc, #164]	; (800cffc <_vfiprintf_r+0x254>)
 800cf56:	bb1b      	cbnz	r3, 800cfa0 <_vfiprintf_r+0x1f8>
 800cf58:	9b03      	ldr	r3, [sp, #12]
 800cf5a:	3307      	adds	r3, #7
 800cf5c:	f023 0307 	bic.w	r3, r3, #7
 800cf60:	3308      	adds	r3, #8
 800cf62:	9303      	str	r3, [sp, #12]
 800cf64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf66:	443b      	add	r3, r7
 800cf68:	9309      	str	r3, [sp, #36]	; 0x24
 800cf6a:	e767      	b.n	800ce3c <_vfiprintf_r+0x94>
 800cf6c:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf70:	460c      	mov	r4, r1
 800cf72:	2001      	movs	r0, #1
 800cf74:	e7a5      	b.n	800cec2 <_vfiprintf_r+0x11a>
 800cf76:	2300      	movs	r3, #0
 800cf78:	3401      	adds	r4, #1
 800cf7a:	9305      	str	r3, [sp, #20]
 800cf7c:	4619      	mov	r1, r3
 800cf7e:	f04f 0c0a 	mov.w	ip, #10
 800cf82:	4620      	mov	r0, r4
 800cf84:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf88:	3a30      	subs	r2, #48	; 0x30
 800cf8a:	2a09      	cmp	r2, #9
 800cf8c:	d903      	bls.n	800cf96 <_vfiprintf_r+0x1ee>
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d0c5      	beq.n	800cf1e <_vfiprintf_r+0x176>
 800cf92:	9105      	str	r1, [sp, #20]
 800cf94:	e7c3      	b.n	800cf1e <_vfiprintf_r+0x176>
 800cf96:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf9a:	4604      	mov	r4, r0
 800cf9c:	2301      	movs	r3, #1
 800cf9e:	e7f0      	b.n	800cf82 <_vfiprintf_r+0x1da>
 800cfa0:	ab03      	add	r3, sp, #12
 800cfa2:	9300      	str	r3, [sp, #0]
 800cfa4:	462a      	mov	r2, r5
 800cfa6:	4b16      	ldr	r3, [pc, #88]	; (800d000 <_vfiprintf_r+0x258>)
 800cfa8:	a904      	add	r1, sp, #16
 800cfaa:	4630      	mov	r0, r6
 800cfac:	f7fb ff24 	bl	8008df8 <_printf_float>
 800cfb0:	4607      	mov	r7, r0
 800cfb2:	1c78      	adds	r0, r7, #1
 800cfb4:	d1d6      	bne.n	800cf64 <_vfiprintf_r+0x1bc>
 800cfb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cfb8:	07d9      	lsls	r1, r3, #31
 800cfba:	d405      	bmi.n	800cfc8 <_vfiprintf_r+0x220>
 800cfbc:	89ab      	ldrh	r3, [r5, #12]
 800cfbe:	059a      	lsls	r2, r3, #22
 800cfc0:	d402      	bmi.n	800cfc8 <_vfiprintf_r+0x220>
 800cfc2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cfc4:	f7fb fdcc 	bl	8008b60 <__retarget_lock_release_recursive>
 800cfc8:	89ab      	ldrh	r3, [r5, #12]
 800cfca:	065b      	lsls	r3, r3, #25
 800cfcc:	f53f af12 	bmi.w	800cdf4 <_vfiprintf_r+0x4c>
 800cfd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cfd2:	e711      	b.n	800cdf8 <_vfiprintf_r+0x50>
 800cfd4:	ab03      	add	r3, sp, #12
 800cfd6:	9300      	str	r3, [sp, #0]
 800cfd8:	462a      	mov	r2, r5
 800cfda:	4b09      	ldr	r3, [pc, #36]	; (800d000 <_vfiprintf_r+0x258>)
 800cfdc:	a904      	add	r1, sp, #16
 800cfde:	4630      	mov	r0, r6
 800cfe0:	f7fc f9ae 	bl	8009340 <_printf_i>
 800cfe4:	e7e4      	b.n	800cfb0 <_vfiprintf_r+0x208>
 800cfe6:	bf00      	nop
 800cfe8:	0800d46c 	.word	0x0800d46c
 800cfec:	0800d48c 	.word	0x0800d48c
 800cff0:	0800d44c 	.word	0x0800d44c
 800cff4:	0800d8a4 	.word	0x0800d8a4
 800cff8:	0800d8ae 	.word	0x0800d8ae
 800cffc:	08008df9 	.word	0x08008df9
 800d000:	0800cd85 	.word	0x0800cd85
 800d004:	0800d8aa 	.word	0x0800d8aa

0800d008 <__swbuf_r>:
 800d008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d00a:	460e      	mov	r6, r1
 800d00c:	4614      	mov	r4, r2
 800d00e:	4605      	mov	r5, r0
 800d010:	b118      	cbz	r0, 800d01a <__swbuf_r+0x12>
 800d012:	6983      	ldr	r3, [r0, #24]
 800d014:	b90b      	cbnz	r3, 800d01a <__swbuf_r+0x12>
 800d016:	f7fb fcdf 	bl	80089d8 <__sinit>
 800d01a:	4b21      	ldr	r3, [pc, #132]	; (800d0a0 <__swbuf_r+0x98>)
 800d01c:	429c      	cmp	r4, r3
 800d01e:	d12b      	bne.n	800d078 <__swbuf_r+0x70>
 800d020:	686c      	ldr	r4, [r5, #4]
 800d022:	69a3      	ldr	r3, [r4, #24]
 800d024:	60a3      	str	r3, [r4, #8]
 800d026:	89a3      	ldrh	r3, [r4, #12]
 800d028:	071a      	lsls	r2, r3, #28
 800d02a:	d52f      	bpl.n	800d08c <__swbuf_r+0x84>
 800d02c:	6923      	ldr	r3, [r4, #16]
 800d02e:	b36b      	cbz	r3, 800d08c <__swbuf_r+0x84>
 800d030:	6923      	ldr	r3, [r4, #16]
 800d032:	6820      	ldr	r0, [r4, #0]
 800d034:	1ac0      	subs	r0, r0, r3
 800d036:	6963      	ldr	r3, [r4, #20]
 800d038:	b2f6      	uxtb	r6, r6
 800d03a:	4283      	cmp	r3, r0
 800d03c:	4637      	mov	r7, r6
 800d03e:	dc04      	bgt.n	800d04a <__swbuf_r+0x42>
 800d040:	4621      	mov	r1, r4
 800d042:	4628      	mov	r0, r5
 800d044:	f7fe fb68 	bl	800b718 <_fflush_r>
 800d048:	bb30      	cbnz	r0, 800d098 <__swbuf_r+0x90>
 800d04a:	68a3      	ldr	r3, [r4, #8]
 800d04c:	3b01      	subs	r3, #1
 800d04e:	60a3      	str	r3, [r4, #8]
 800d050:	6823      	ldr	r3, [r4, #0]
 800d052:	1c5a      	adds	r2, r3, #1
 800d054:	6022      	str	r2, [r4, #0]
 800d056:	701e      	strb	r6, [r3, #0]
 800d058:	6963      	ldr	r3, [r4, #20]
 800d05a:	3001      	adds	r0, #1
 800d05c:	4283      	cmp	r3, r0
 800d05e:	d004      	beq.n	800d06a <__swbuf_r+0x62>
 800d060:	89a3      	ldrh	r3, [r4, #12]
 800d062:	07db      	lsls	r3, r3, #31
 800d064:	d506      	bpl.n	800d074 <__swbuf_r+0x6c>
 800d066:	2e0a      	cmp	r6, #10
 800d068:	d104      	bne.n	800d074 <__swbuf_r+0x6c>
 800d06a:	4621      	mov	r1, r4
 800d06c:	4628      	mov	r0, r5
 800d06e:	f7fe fb53 	bl	800b718 <_fflush_r>
 800d072:	b988      	cbnz	r0, 800d098 <__swbuf_r+0x90>
 800d074:	4638      	mov	r0, r7
 800d076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d078:	4b0a      	ldr	r3, [pc, #40]	; (800d0a4 <__swbuf_r+0x9c>)
 800d07a:	429c      	cmp	r4, r3
 800d07c:	d101      	bne.n	800d082 <__swbuf_r+0x7a>
 800d07e:	68ac      	ldr	r4, [r5, #8]
 800d080:	e7cf      	b.n	800d022 <__swbuf_r+0x1a>
 800d082:	4b09      	ldr	r3, [pc, #36]	; (800d0a8 <__swbuf_r+0xa0>)
 800d084:	429c      	cmp	r4, r3
 800d086:	bf08      	it	eq
 800d088:	68ec      	ldreq	r4, [r5, #12]
 800d08a:	e7ca      	b.n	800d022 <__swbuf_r+0x1a>
 800d08c:	4621      	mov	r1, r4
 800d08e:	4628      	mov	r0, r5
 800d090:	f000 f80c 	bl	800d0ac <__swsetup_r>
 800d094:	2800      	cmp	r0, #0
 800d096:	d0cb      	beq.n	800d030 <__swbuf_r+0x28>
 800d098:	f04f 37ff 	mov.w	r7, #4294967295
 800d09c:	e7ea      	b.n	800d074 <__swbuf_r+0x6c>
 800d09e:	bf00      	nop
 800d0a0:	0800d46c 	.word	0x0800d46c
 800d0a4:	0800d48c 	.word	0x0800d48c
 800d0a8:	0800d44c 	.word	0x0800d44c

0800d0ac <__swsetup_r>:
 800d0ac:	4b32      	ldr	r3, [pc, #200]	; (800d178 <__swsetup_r+0xcc>)
 800d0ae:	b570      	push	{r4, r5, r6, lr}
 800d0b0:	681d      	ldr	r5, [r3, #0]
 800d0b2:	4606      	mov	r6, r0
 800d0b4:	460c      	mov	r4, r1
 800d0b6:	b125      	cbz	r5, 800d0c2 <__swsetup_r+0x16>
 800d0b8:	69ab      	ldr	r3, [r5, #24]
 800d0ba:	b913      	cbnz	r3, 800d0c2 <__swsetup_r+0x16>
 800d0bc:	4628      	mov	r0, r5
 800d0be:	f7fb fc8b 	bl	80089d8 <__sinit>
 800d0c2:	4b2e      	ldr	r3, [pc, #184]	; (800d17c <__swsetup_r+0xd0>)
 800d0c4:	429c      	cmp	r4, r3
 800d0c6:	d10f      	bne.n	800d0e8 <__swsetup_r+0x3c>
 800d0c8:	686c      	ldr	r4, [r5, #4]
 800d0ca:	89a3      	ldrh	r3, [r4, #12]
 800d0cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d0d0:	0719      	lsls	r1, r3, #28
 800d0d2:	d42c      	bmi.n	800d12e <__swsetup_r+0x82>
 800d0d4:	06dd      	lsls	r5, r3, #27
 800d0d6:	d411      	bmi.n	800d0fc <__swsetup_r+0x50>
 800d0d8:	2309      	movs	r3, #9
 800d0da:	6033      	str	r3, [r6, #0]
 800d0dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d0e0:	81a3      	strh	r3, [r4, #12]
 800d0e2:	f04f 30ff 	mov.w	r0, #4294967295
 800d0e6:	e03e      	b.n	800d166 <__swsetup_r+0xba>
 800d0e8:	4b25      	ldr	r3, [pc, #148]	; (800d180 <__swsetup_r+0xd4>)
 800d0ea:	429c      	cmp	r4, r3
 800d0ec:	d101      	bne.n	800d0f2 <__swsetup_r+0x46>
 800d0ee:	68ac      	ldr	r4, [r5, #8]
 800d0f0:	e7eb      	b.n	800d0ca <__swsetup_r+0x1e>
 800d0f2:	4b24      	ldr	r3, [pc, #144]	; (800d184 <__swsetup_r+0xd8>)
 800d0f4:	429c      	cmp	r4, r3
 800d0f6:	bf08      	it	eq
 800d0f8:	68ec      	ldreq	r4, [r5, #12]
 800d0fa:	e7e6      	b.n	800d0ca <__swsetup_r+0x1e>
 800d0fc:	0758      	lsls	r0, r3, #29
 800d0fe:	d512      	bpl.n	800d126 <__swsetup_r+0x7a>
 800d100:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d102:	b141      	cbz	r1, 800d116 <__swsetup_r+0x6a>
 800d104:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d108:	4299      	cmp	r1, r3
 800d10a:	d002      	beq.n	800d112 <__swsetup_r+0x66>
 800d10c:	4630      	mov	r0, r6
 800d10e:	f7ff fbc3 	bl	800c898 <_free_r>
 800d112:	2300      	movs	r3, #0
 800d114:	6363      	str	r3, [r4, #52]	; 0x34
 800d116:	89a3      	ldrh	r3, [r4, #12]
 800d118:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d11c:	81a3      	strh	r3, [r4, #12]
 800d11e:	2300      	movs	r3, #0
 800d120:	6063      	str	r3, [r4, #4]
 800d122:	6923      	ldr	r3, [r4, #16]
 800d124:	6023      	str	r3, [r4, #0]
 800d126:	89a3      	ldrh	r3, [r4, #12]
 800d128:	f043 0308 	orr.w	r3, r3, #8
 800d12c:	81a3      	strh	r3, [r4, #12]
 800d12e:	6923      	ldr	r3, [r4, #16]
 800d130:	b94b      	cbnz	r3, 800d146 <__swsetup_r+0x9a>
 800d132:	89a3      	ldrh	r3, [r4, #12]
 800d134:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d138:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d13c:	d003      	beq.n	800d146 <__swsetup_r+0x9a>
 800d13e:	4621      	mov	r1, r4
 800d140:	4630      	mov	r0, r6
 800d142:	f000 f84d 	bl	800d1e0 <__smakebuf_r>
 800d146:	89a0      	ldrh	r0, [r4, #12]
 800d148:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d14c:	f010 0301 	ands.w	r3, r0, #1
 800d150:	d00a      	beq.n	800d168 <__swsetup_r+0xbc>
 800d152:	2300      	movs	r3, #0
 800d154:	60a3      	str	r3, [r4, #8]
 800d156:	6963      	ldr	r3, [r4, #20]
 800d158:	425b      	negs	r3, r3
 800d15a:	61a3      	str	r3, [r4, #24]
 800d15c:	6923      	ldr	r3, [r4, #16]
 800d15e:	b943      	cbnz	r3, 800d172 <__swsetup_r+0xc6>
 800d160:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d164:	d1ba      	bne.n	800d0dc <__swsetup_r+0x30>
 800d166:	bd70      	pop	{r4, r5, r6, pc}
 800d168:	0781      	lsls	r1, r0, #30
 800d16a:	bf58      	it	pl
 800d16c:	6963      	ldrpl	r3, [r4, #20]
 800d16e:	60a3      	str	r3, [r4, #8]
 800d170:	e7f4      	b.n	800d15c <__swsetup_r+0xb0>
 800d172:	2000      	movs	r0, #0
 800d174:	e7f7      	b.n	800d166 <__swsetup_r+0xba>
 800d176:	bf00      	nop
 800d178:	20000020 	.word	0x20000020
 800d17c:	0800d46c 	.word	0x0800d46c
 800d180:	0800d48c 	.word	0x0800d48c
 800d184:	0800d44c 	.word	0x0800d44c

0800d188 <abort>:
 800d188:	b508      	push	{r3, lr}
 800d18a:	2006      	movs	r0, #6
 800d18c:	f000 f898 	bl	800d2c0 <raise>
 800d190:	2001      	movs	r0, #1
 800d192:	f7f5 fd8b 	bl	8002cac <_exit>

0800d196 <__swhatbuf_r>:
 800d196:	b570      	push	{r4, r5, r6, lr}
 800d198:	460e      	mov	r6, r1
 800d19a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d19e:	2900      	cmp	r1, #0
 800d1a0:	b096      	sub	sp, #88	; 0x58
 800d1a2:	4614      	mov	r4, r2
 800d1a4:	461d      	mov	r5, r3
 800d1a6:	da08      	bge.n	800d1ba <__swhatbuf_r+0x24>
 800d1a8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	602a      	str	r2, [r5, #0]
 800d1b0:	061a      	lsls	r2, r3, #24
 800d1b2:	d410      	bmi.n	800d1d6 <__swhatbuf_r+0x40>
 800d1b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d1b8:	e00e      	b.n	800d1d8 <__swhatbuf_r+0x42>
 800d1ba:	466a      	mov	r2, sp
 800d1bc:	f000 f89c 	bl	800d2f8 <_fstat_r>
 800d1c0:	2800      	cmp	r0, #0
 800d1c2:	dbf1      	blt.n	800d1a8 <__swhatbuf_r+0x12>
 800d1c4:	9a01      	ldr	r2, [sp, #4]
 800d1c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d1ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d1ce:	425a      	negs	r2, r3
 800d1d0:	415a      	adcs	r2, r3
 800d1d2:	602a      	str	r2, [r5, #0]
 800d1d4:	e7ee      	b.n	800d1b4 <__swhatbuf_r+0x1e>
 800d1d6:	2340      	movs	r3, #64	; 0x40
 800d1d8:	2000      	movs	r0, #0
 800d1da:	6023      	str	r3, [r4, #0]
 800d1dc:	b016      	add	sp, #88	; 0x58
 800d1de:	bd70      	pop	{r4, r5, r6, pc}

0800d1e0 <__smakebuf_r>:
 800d1e0:	898b      	ldrh	r3, [r1, #12]
 800d1e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d1e4:	079d      	lsls	r5, r3, #30
 800d1e6:	4606      	mov	r6, r0
 800d1e8:	460c      	mov	r4, r1
 800d1ea:	d507      	bpl.n	800d1fc <__smakebuf_r+0x1c>
 800d1ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d1f0:	6023      	str	r3, [r4, #0]
 800d1f2:	6123      	str	r3, [r4, #16]
 800d1f4:	2301      	movs	r3, #1
 800d1f6:	6163      	str	r3, [r4, #20]
 800d1f8:	b002      	add	sp, #8
 800d1fa:	bd70      	pop	{r4, r5, r6, pc}
 800d1fc:	ab01      	add	r3, sp, #4
 800d1fe:	466a      	mov	r2, sp
 800d200:	f7ff ffc9 	bl	800d196 <__swhatbuf_r>
 800d204:	9900      	ldr	r1, [sp, #0]
 800d206:	4605      	mov	r5, r0
 800d208:	4630      	mov	r0, r6
 800d20a:	f7fb fce1 	bl	8008bd0 <_malloc_r>
 800d20e:	b948      	cbnz	r0, 800d224 <__smakebuf_r+0x44>
 800d210:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d214:	059a      	lsls	r2, r3, #22
 800d216:	d4ef      	bmi.n	800d1f8 <__smakebuf_r+0x18>
 800d218:	f023 0303 	bic.w	r3, r3, #3
 800d21c:	f043 0302 	orr.w	r3, r3, #2
 800d220:	81a3      	strh	r3, [r4, #12]
 800d222:	e7e3      	b.n	800d1ec <__smakebuf_r+0xc>
 800d224:	4b0d      	ldr	r3, [pc, #52]	; (800d25c <__smakebuf_r+0x7c>)
 800d226:	62b3      	str	r3, [r6, #40]	; 0x28
 800d228:	89a3      	ldrh	r3, [r4, #12]
 800d22a:	6020      	str	r0, [r4, #0]
 800d22c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d230:	81a3      	strh	r3, [r4, #12]
 800d232:	9b00      	ldr	r3, [sp, #0]
 800d234:	6163      	str	r3, [r4, #20]
 800d236:	9b01      	ldr	r3, [sp, #4]
 800d238:	6120      	str	r0, [r4, #16]
 800d23a:	b15b      	cbz	r3, 800d254 <__smakebuf_r+0x74>
 800d23c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d240:	4630      	mov	r0, r6
 800d242:	f000 f86b 	bl	800d31c <_isatty_r>
 800d246:	b128      	cbz	r0, 800d254 <__smakebuf_r+0x74>
 800d248:	89a3      	ldrh	r3, [r4, #12]
 800d24a:	f023 0303 	bic.w	r3, r3, #3
 800d24e:	f043 0301 	orr.w	r3, r3, #1
 800d252:	81a3      	strh	r3, [r4, #12]
 800d254:	89a0      	ldrh	r0, [r4, #12]
 800d256:	4305      	orrs	r5, r0
 800d258:	81a5      	strh	r5, [r4, #12]
 800d25a:	e7cd      	b.n	800d1f8 <__smakebuf_r+0x18>
 800d25c:	08008971 	.word	0x08008971

0800d260 <_malloc_usable_size_r>:
 800d260:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d264:	1f18      	subs	r0, r3, #4
 800d266:	2b00      	cmp	r3, #0
 800d268:	bfbc      	itt	lt
 800d26a:	580b      	ldrlt	r3, [r1, r0]
 800d26c:	18c0      	addlt	r0, r0, r3
 800d26e:	4770      	bx	lr

0800d270 <_raise_r>:
 800d270:	291f      	cmp	r1, #31
 800d272:	b538      	push	{r3, r4, r5, lr}
 800d274:	4604      	mov	r4, r0
 800d276:	460d      	mov	r5, r1
 800d278:	d904      	bls.n	800d284 <_raise_r+0x14>
 800d27a:	2316      	movs	r3, #22
 800d27c:	6003      	str	r3, [r0, #0]
 800d27e:	f04f 30ff 	mov.w	r0, #4294967295
 800d282:	bd38      	pop	{r3, r4, r5, pc}
 800d284:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d286:	b112      	cbz	r2, 800d28e <_raise_r+0x1e>
 800d288:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d28c:	b94b      	cbnz	r3, 800d2a2 <_raise_r+0x32>
 800d28e:	4620      	mov	r0, r4
 800d290:	f000 f830 	bl	800d2f4 <_getpid_r>
 800d294:	462a      	mov	r2, r5
 800d296:	4601      	mov	r1, r0
 800d298:	4620      	mov	r0, r4
 800d29a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d29e:	f000 b817 	b.w	800d2d0 <_kill_r>
 800d2a2:	2b01      	cmp	r3, #1
 800d2a4:	d00a      	beq.n	800d2bc <_raise_r+0x4c>
 800d2a6:	1c59      	adds	r1, r3, #1
 800d2a8:	d103      	bne.n	800d2b2 <_raise_r+0x42>
 800d2aa:	2316      	movs	r3, #22
 800d2ac:	6003      	str	r3, [r0, #0]
 800d2ae:	2001      	movs	r0, #1
 800d2b0:	e7e7      	b.n	800d282 <_raise_r+0x12>
 800d2b2:	2400      	movs	r4, #0
 800d2b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d2b8:	4628      	mov	r0, r5
 800d2ba:	4798      	blx	r3
 800d2bc:	2000      	movs	r0, #0
 800d2be:	e7e0      	b.n	800d282 <_raise_r+0x12>

0800d2c0 <raise>:
 800d2c0:	4b02      	ldr	r3, [pc, #8]	; (800d2cc <raise+0xc>)
 800d2c2:	4601      	mov	r1, r0
 800d2c4:	6818      	ldr	r0, [r3, #0]
 800d2c6:	f7ff bfd3 	b.w	800d270 <_raise_r>
 800d2ca:	bf00      	nop
 800d2cc:	20000020 	.word	0x20000020

0800d2d0 <_kill_r>:
 800d2d0:	b538      	push	{r3, r4, r5, lr}
 800d2d2:	4d07      	ldr	r5, [pc, #28]	; (800d2f0 <_kill_r+0x20>)
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	4604      	mov	r4, r0
 800d2d8:	4608      	mov	r0, r1
 800d2da:	4611      	mov	r1, r2
 800d2dc:	602b      	str	r3, [r5, #0]
 800d2de:	f7f5 fcd5 	bl	8002c8c <_kill>
 800d2e2:	1c43      	adds	r3, r0, #1
 800d2e4:	d102      	bne.n	800d2ec <_kill_r+0x1c>
 800d2e6:	682b      	ldr	r3, [r5, #0]
 800d2e8:	b103      	cbz	r3, 800d2ec <_kill_r+0x1c>
 800d2ea:	6023      	str	r3, [r4, #0]
 800d2ec:	bd38      	pop	{r3, r4, r5, pc}
 800d2ee:	bf00      	nop
 800d2f0:	20004528 	.word	0x20004528

0800d2f4 <_getpid_r>:
 800d2f4:	f7f5 bcc2 	b.w	8002c7c <_getpid>

0800d2f8 <_fstat_r>:
 800d2f8:	b538      	push	{r3, r4, r5, lr}
 800d2fa:	4d07      	ldr	r5, [pc, #28]	; (800d318 <_fstat_r+0x20>)
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	4604      	mov	r4, r0
 800d300:	4608      	mov	r0, r1
 800d302:	4611      	mov	r1, r2
 800d304:	602b      	str	r3, [r5, #0]
 800d306:	f7f5 fd20 	bl	8002d4a <_fstat>
 800d30a:	1c43      	adds	r3, r0, #1
 800d30c:	d102      	bne.n	800d314 <_fstat_r+0x1c>
 800d30e:	682b      	ldr	r3, [r5, #0]
 800d310:	b103      	cbz	r3, 800d314 <_fstat_r+0x1c>
 800d312:	6023      	str	r3, [r4, #0]
 800d314:	bd38      	pop	{r3, r4, r5, pc}
 800d316:	bf00      	nop
 800d318:	20004528 	.word	0x20004528

0800d31c <_isatty_r>:
 800d31c:	b538      	push	{r3, r4, r5, lr}
 800d31e:	4d06      	ldr	r5, [pc, #24]	; (800d338 <_isatty_r+0x1c>)
 800d320:	2300      	movs	r3, #0
 800d322:	4604      	mov	r4, r0
 800d324:	4608      	mov	r0, r1
 800d326:	602b      	str	r3, [r5, #0]
 800d328:	f7f5 fd1f 	bl	8002d6a <_isatty>
 800d32c:	1c43      	adds	r3, r0, #1
 800d32e:	d102      	bne.n	800d336 <_isatty_r+0x1a>
 800d330:	682b      	ldr	r3, [r5, #0]
 800d332:	b103      	cbz	r3, 800d336 <_isatty_r+0x1a>
 800d334:	6023      	str	r3, [r4, #0]
 800d336:	bd38      	pop	{r3, r4, r5, pc}
 800d338:	20004528 	.word	0x20004528

0800d33c <_init>:
 800d33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d33e:	bf00      	nop
 800d340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d342:	bc08      	pop	{r3}
 800d344:	469e      	mov	lr, r3
 800d346:	4770      	bx	lr

0800d348 <_fini>:
 800d348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d34a:	bf00      	nop
 800d34c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d34e:	bc08      	pop	{r3}
 800d350:	469e      	mov	lr, r3
 800d352:	4770      	bx	lr
