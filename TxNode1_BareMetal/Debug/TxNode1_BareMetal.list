
TxNode1_BareMetal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006894  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08006a34  08006a34  00016a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b50  08006b50  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08006b50  08006b50  00016b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b58  08006b58  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b58  08006b58  00016b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b5c  08006b5c  00016b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08006b60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  20000080  08006be0  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08006be0  00020288  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015831  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e74  00000000  00000000  000358e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001408  00000000  00000000  00038758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012e8  00000000  00000000  00039b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c56  00000000  00000000  0003ae48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018319  00000000  00000000  00054a9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009eed2  00000000  00000000  0006cdb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010bc89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005948  00000000  00000000  0010bcdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006a1c 	.word	0x08006a1c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08006a1c 	.word	0x08006a1c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295
 800089c:	f04f 30ff 	movne.w	r0, #4294967295
 80008a0:	f000 b974 	b.w	8000b8c <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	4604      	mov	r4, r0
 80008c4:	468e      	mov	lr, r1
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d14d      	bne.n	8000966 <__udivmoddi4+0xaa>
 80008ca:	428a      	cmp	r2, r1
 80008cc:	4694      	mov	ip, r2
 80008ce:	d969      	bls.n	80009a4 <__udivmoddi4+0xe8>
 80008d0:	fab2 f282 	clz	r2, r2
 80008d4:	b152      	cbz	r2, 80008ec <__udivmoddi4+0x30>
 80008d6:	fa01 f302 	lsl.w	r3, r1, r2
 80008da:	f1c2 0120 	rsb	r1, r2, #32
 80008de:	fa20 f101 	lsr.w	r1, r0, r1
 80008e2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008e6:	ea41 0e03 	orr.w	lr, r1, r3
 80008ea:	4094      	lsls	r4, r2
 80008ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008f0:	0c21      	lsrs	r1, r4, #16
 80008f2:	fbbe f6f8 	udiv	r6, lr, r8
 80008f6:	fa1f f78c 	uxth.w	r7, ip
 80008fa:	fb08 e316 	mls	r3, r8, r6, lr
 80008fe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000902:	fb06 f107 	mul.w	r1, r6, r7
 8000906:	4299      	cmp	r1, r3
 8000908:	d90a      	bls.n	8000920 <__udivmoddi4+0x64>
 800090a:	eb1c 0303 	adds.w	r3, ip, r3
 800090e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000912:	f080 811f 	bcs.w	8000b54 <__udivmoddi4+0x298>
 8000916:	4299      	cmp	r1, r3
 8000918:	f240 811c 	bls.w	8000b54 <__udivmoddi4+0x298>
 800091c:	3e02      	subs	r6, #2
 800091e:	4463      	add	r3, ip
 8000920:	1a5b      	subs	r3, r3, r1
 8000922:	b2a4      	uxth	r4, r4
 8000924:	fbb3 f0f8 	udiv	r0, r3, r8
 8000928:	fb08 3310 	mls	r3, r8, r0, r3
 800092c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000930:	fb00 f707 	mul.w	r7, r0, r7
 8000934:	42a7      	cmp	r7, r4
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x92>
 8000938:	eb1c 0404 	adds.w	r4, ip, r4
 800093c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000940:	f080 810a 	bcs.w	8000b58 <__udivmoddi4+0x29c>
 8000944:	42a7      	cmp	r7, r4
 8000946:	f240 8107 	bls.w	8000b58 <__udivmoddi4+0x29c>
 800094a:	4464      	add	r4, ip
 800094c:	3802      	subs	r0, #2
 800094e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000952:	1be4      	subs	r4, r4, r7
 8000954:	2600      	movs	r6, #0
 8000956:	b11d      	cbz	r5, 8000960 <__udivmoddi4+0xa4>
 8000958:	40d4      	lsrs	r4, r2
 800095a:	2300      	movs	r3, #0
 800095c:	e9c5 4300 	strd	r4, r3, [r5]
 8000960:	4631      	mov	r1, r6
 8000962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000966:	428b      	cmp	r3, r1
 8000968:	d909      	bls.n	800097e <__udivmoddi4+0xc2>
 800096a:	2d00      	cmp	r5, #0
 800096c:	f000 80ef 	beq.w	8000b4e <__udivmoddi4+0x292>
 8000970:	2600      	movs	r6, #0
 8000972:	e9c5 0100 	strd	r0, r1, [r5]
 8000976:	4630      	mov	r0, r6
 8000978:	4631      	mov	r1, r6
 800097a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800097e:	fab3 f683 	clz	r6, r3
 8000982:	2e00      	cmp	r6, #0
 8000984:	d14a      	bne.n	8000a1c <__udivmoddi4+0x160>
 8000986:	428b      	cmp	r3, r1
 8000988:	d302      	bcc.n	8000990 <__udivmoddi4+0xd4>
 800098a:	4282      	cmp	r2, r0
 800098c:	f200 80f9 	bhi.w	8000b82 <__udivmoddi4+0x2c6>
 8000990:	1a84      	subs	r4, r0, r2
 8000992:	eb61 0303 	sbc.w	r3, r1, r3
 8000996:	2001      	movs	r0, #1
 8000998:	469e      	mov	lr, r3
 800099a:	2d00      	cmp	r5, #0
 800099c:	d0e0      	beq.n	8000960 <__udivmoddi4+0xa4>
 800099e:	e9c5 4e00 	strd	r4, lr, [r5]
 80009a2:	e7dd      	b.n	8000960 <__udivmoddi4+0xa4>
 80009a4:	b902      	cbnz	r2, 80009a8 <__udivmoddi4+0xec>
 80009a6:	deff      	udf	#255	; 0xff
 80009a8:	fab2 f282 	clz	r2, r2
 80009ac:	2a00      	cmp	r2, #0
 80009ae:	f040 8092 	bne.w	8000ad6 <__udivmoddi4+0x21a>
 80009b2:	eba1 010c 	sub.w	r1, r1, ip
 80009b6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009ba:	fa1f fe8c 	uxth.w	lr, ip
 80009be:	2601      	movs	r6, #1
 80009c0:	0c20      	lsrs	r0, r4, #16
 80009c2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009c6:	fb07 1113 	mls	r1, r7, r3, r1
 80009ca:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009ce:	fb0e f003 	mul.w	r0, lr, r3
 80009d2:	4288      	cmp	r0, r1
 80009d4:	d908      	bls.n	80009e8 <__udivmoddi4+0x12c>
 80009d6:	eb1c 0101 	adds.w	r1, ip, r1
 80009da:	f103 38ff 	add.w	r8, r3, #4294967295
 80009de:	d202      	bcs.n	80009e6 <__udivmoddi4+0x12a>
 80009e0:	4288      	cmp	r0, r1
 80009e2:	f200 80cb 	bhi.w	8000b7c <__udivmoddi4+0x2c0>
 80009e6:	4643      	mov	r3, r8
 80009e8:	1a09      	subs	r1, r1, r0
 80009ea:	b2a4      	uxth	r4, r4
 80009ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80009f0:	fb07 1110 	mls	r1, r7, r0, r1
 80009f4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009f8:	fb0e fe00 	mul.w	lr, lr, r0
 80009fc:	45a6      	cmp	lr, r4
 80009fe:	d908      	bls.n	8000a12 <__udivmoddi4+0x156>
 8000a00:	eb1c 0404 	adds.w	r4, ip, r4
 8000a04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a08:	d202      	bcs.n	8000a10 <__udivmoddi4+0x154>
 8000a0a:	45a6      	cmp	lr, r4
 8000a0c:	f200 80bb 	bhi.w	8000b86 <__udivmoddi4+0x2ca>
 8000a10:	4608      	mov	r0, r1
 8000a12:	eba4 040e 	sub.w	r4, r4, lr
 8000a16:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a1a:	e79c      	b.n	8000956 <__udivmoddi4+0x9a>
 8000a1c:	f1c6 0720 	rsb	r7, r6, #32
 8000a20:	40b3      	lsls	r3, r6
 8000a22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a2a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a2e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a32:	431c      	orrs	r4, r3
 8000a34:	40f9      	lsrs	r1, r7
 8000a36:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a3a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a3e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a42:	0c20      	lsrs	r0, r4, #16
 8000a44:	fa1f fe8c 	uxth.w	lr, ip
 8000a48:	fb09 1118 	mls	r1, r9, r8, r1
 8000a4c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a50:	fb08 f00e 	mul.w	r0, r8, lr
 8000a54:	4288      	cmp	r0, r1
 8000a56:	fa02 f206 	lsl.w	r2, r2, r6
 8000a5a:	d90b      	bls.n	8000a74 <__udivmoddi4+0x1b8>
 8000a5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a60:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a64:	f080 8088 	bcs.w	8000b78 <__udivmoddi4+0x2bc>
 8000a68:	4288      	cmp	r0, r1
 8000a6a:	f240 8085 	bls.w	8000b78 <__udivmoddi4+0x2bc>
 8000a6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a72:	4461      	add	r1, ip
 8000a74:	1a09      	subs	r1, r1, r0
 8000a76:	b2a4      	uxth	r4, r4
 8000a78:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a7c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a80:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a88:	458e      	cmp	lr, r1
 8000a8a:	d908      	bls.n	8000a9e <__udivmoddi4+0x1e2>
 8000a8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a90:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a94:	d26c      	bcs.n	8000b70 <__udivmoddi4+0x2b4>
 8000a96:	458e      	cmp	lr, r1
 8000a98:	d96a      	bls.n	8000b70 <__udivmoddi4+0x2b4>
 8000a9a:	3802      	subs	r0, #2
 8000a9c:	4461      	add	r1, ip
 8000a9e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000aa2:	fba0 9402 	umull	r9, r4, r0, r2
 8000aa6:	eba1 010e 	sub.w	r1, r1, lr
 8000aaa:	42a1      	cmp	r1, r4
 8000aac:	46c8      	mov	r8, r9
 8000aae:	46a6      	mov	lr, r4
 8000ab0:	d356      	bcc.n	8000b60 <__udivmoddi4+0x2a4>
 8000ab2:	d053      	beq.n	8000b5c <__udivmoddi4+0x2a0>
 8000ab4:	b15d      	cbz	r5, 8000ace <__udivmoddi4+0x212>
 8000ab6:	ebb3 0208 	subs.w	r2, r3, r8
 8000aba:	eb61 010e 	sbc.w	r1, r1, lr
 8000abe:	fa01 f707 	lsl.w	r7, r1, r7
 8000ac2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ac6:	40f1      	lsrs	r1, r6
 8000ac8:	431f      	orrs	r7, r3
 8000aca:	e9c5 7100 	strd	r7, r1, [r5]
 8000ace:	2600      	movs	r6, #0
 8000ad0:	4631      	mov	r1, r6
 8000ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad6:	f1c2 0320 	rsb	r3, r2, #32
 8000ada:	40d8      	lsrs	r0, r3
 8000adc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ae4:	4091      	lsls	r1, r2
 8000ae6:	4301      	orrs	r1, r0
 8000ae8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aec:	fa1f fe8c 	uxth.w	lr, ip
 8000af0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000af4:	fb07 3610 	mls	r6, r7, r0, r3
 8000af8:	0c0b      	lsrs	r3, r1, #16
 8000afa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000afe:	fb00 f60e 	mul.w	r6, r0, lr
 8000b02:	429e      	cmp	r6, r3
 8000b04:	fa04 f402 	lsl.w	r4, r4, r2
 8000b08:	d908      	bls.n	8000b1c <__udivmoddi4+0x260>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b12:	d22f      	bcs.n	8000b74 <__udivmoddi4+0x2b8>
 8000b14:	429e      	cmp	r6, r3
 8000b16:	d92d      	bls.n	8000b74 <__udivmoddi4+0x2b8>
 8000b18:	3802      	subs	r0, #2
 8000b1a:	4463      	add	r3, ip
 8000b1c:	1b9b      	subs	r3, r3, r6
 8000b1e:	b289      	uxth	r1, r1
 8000b20:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b24:	fb07 3316 	mls	r3, r7, r6, r3
 8000b28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b2c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b30:	428b      	cmp	r3, r1
 8000b32:	d908      	bls.n	8000b46 <__udivmoddi4+0x28a>
 8000b34:	eb1c 0101 	adds.w	r1, ip, r1
 8000b38:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b3c:	d216      	bcs.n	8000b6c <__udivmoddi4+0x2b0>
 8000b3e:	428b      	cmp	r3, r1
 8000b40:	d914      	bls.n	8000b6c <__udivmoddi4+0x2b0>
 8000b42:	3e02      	subs	r6, #2
 8000b44:	4461      	add	r1, ip
 8000b46:	1ac9      	subs	r1, r1, r3
 8000b48:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b4c:	e738      	b.n	80009c0 <__udivmoddi4+0x104>
 8000b4e:	462e      	mov	r6, r5
 8000b50:	4628      	mov	r0, r5
 8000b52:	e705      	b.n	8000960 <__udivmoddi4+0xa4>
 8000b54:	4606      	mov	r6, r0
 8000b56:	e6e3      	b.n	8000920 <__udivmoddi4+0x64>
 8000b58:	4618      	mov	r0, r3
 8000b5a:	e6f8      	b.n	800094e <__udivmoddi4+0x92>
 8000b5c:	454b      	cmp	r3, r9
 8000b5e:	d2a9      	bcs.n	8000ab4 <__udivmoddi4+0x1f8>
 8000b60:	ebb9 0802 	subs.w	r8, r9, r2
 8000b64:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b68:	3801      	subs	r0, #1
 8000b6a:	e7a3      	b.n	8000ab4 <__udivmoddi4+0x1f8>
 8000b6c:	4646      	mov	r6, r8
 8000b6e:	e7ea      	b.n	8000b46 <__udivmoddi4+0x28a>
 8000b70:	4620      	mov	r0, r4
 8000b72:	e794      	b.n	8000a9e <__udivmoddi4+0x1e2>
 8000b74:	4640      	mov	r0, r8
 8000b76:	e7d1      	b.n	8000b1c <__udivmoddi4+0x260>
 8000b78:	46d0      	mov	r8, sl
 8000b7a:	e77b      	b.n	8000a74 <__udivmoddi4+0x1b8>
 8000b7c:	3b02      	subs	r3, #2
 8000b7e:	4461      	add	r1, ip
 8000b80:	e732      	b.n	80009e8 <__udivmoddi4+0x12c>
 8000b82:	4630      	mov	r0, r6
 8000b84:	e709      	b.n	800099a <__udivmoddi4+0xde>
 8000b86:	4464      	add	r4, ip
 8000b88:	3802      	subs	r0, #2
 8000b8a:	e742      	b.n	8000a12 <__udivmoddi4+0x156>

08000b8c <__aeabi_idiv0>:
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8000b90:	b4b0      	push	{r4, r5, r7}
 8000b92:	b08f      	sub	sp, #60	; 0x3c
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000b98:	f240 13b1 	movw	r3, #433	; 0x1b1
 8000b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8000b9e:	2307      	movs	r3, #7
 8000ba0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000ba4:	2307      	movs	r3, #7
 8000ba6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000baa:	2301      	movs	r3, #1
 8000bac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 8000bb0:	23ff      	movs	r3, #255	; 0xff
 8000bb2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000bb6:	2364      	movs	r3, #100	; 0x64
 8000bb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 8000bbc:	2308      	movs	r3, #8
 8000bbe:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	461d      	mov	r5, r3
 8000bc4:	f107 040c 	add.w	r4, r7, #12
 8000bc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bd0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000bd4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	373c      	adds	r7, #60	; 0x3c
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bcb0      	pop	{r4, r5, r7}
 8000be0:	4770      	bx	lr

08000be2 <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b082      	sub	sp, #8
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6898      	ldr	r0, [r3, #8]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	899b      	ldrh	r3, [r3, #12]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	f002 fe41 	bl	800387c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	f001 ffa6 	bl	8002b4c <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6898      	ldr	r0, [r3, #8]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	899b      	ldrh	r3, [r3, #12]
 8000c08:	2201      	movs	r2, #1
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	f002 fe36 	bl	800387c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000c10:	2064      	movs	r0, #100	; 0x64
 8000c12:	f001 ff9b 	bl	8002b4c <HAL_Delay>
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b084      	sub	sp, #16
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
 8000c26:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000c28:	2101      	movs	r1, #1
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f000 f99f 	bl	8000f6e <LoRa_read>
 8000c30:	4603      	mov	r3, r0
 8000c32:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000c34:	7bbb      	ldrb	r3, [r7, #14]
 8000c36:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d107      	bne.n	8000c4e <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8000c3e:	7bbb      	ldrb	r3, [r7, #14]
 8000c40:	f023 0307 	bic.w	r3, r3, #7
 8000c44:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	61da      	str	r2, [r3, #28]
 8000c4c:	e03e      	b.n	8000ccc <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d10c      	bne.n	8000c6e <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000c54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000c58:	f023 0307 	bic.w	r3, r3, #7
 8000c5c:	b25b      	sxtb	r3, r3
 8000c5e:	f043 0301 	orr.w	r3, r3, #1
 8000c62:	b25b      	sxtb	r3, r3
 8000c64:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2201      	movs	r2, #1
 8000c6a:	61da      	str	r2, [r3, #28]
 8000c6c:	e02e      	b.n	8000ccc <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	2b03      	cmp	r3, #3
 8000c72:	d10c      	bne.n	8000c8e <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8000c74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000c78:	f023 0307 	bic.w	r3, r3, #7
 8000c7c:	b25b      	sxtb	r3, r3
 8000c7e:	f043 0303 	orr.w	r3, r3, #3
 8000c82:	b25b      	sxtb	r3, r3
 8000c84:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2203      	movs	r2, #3
 8000c8a:	61da      	str	r2, [r3, #28]
 8000c8c:	e01e      	b.n	8000ccc <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	2b05      	cmp	r3, #5
 8000c92:	d10c      	bne.n	8000cae <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8000c94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000c98:	f023 0307 	bic.w	r3, r3, #7
 8000c9c:	b25b      	sxtb	r3, r3
 8000c9e:	f043 0305 	orr.w	r3, r3, #5
 8000ca2:	b25b      	sxtb	r3, r3
 8000ca4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2205      	movs	r2, #5
 8000caa:	61da      	str	r2, [r3, #28]
 8000cac:	e00e      	b.n	8000ccc <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	2b06      	cmp	r3, #6
 8000cb2:	d10b      	bne.n	8000ccc <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8000cb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000cb8:	f023 0307 	bic.w	r3, r3, #7
 8000cbc:	b25b      	sxtb	r3, r3
 8000cbe:	f043 0306 	orr.w	r3, r3, #6
 8000cc2:	b25b      	sxtb	r3, r3
 8000cc4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2206      	movs	r2, #6
 8000cca:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000ccc:	7bfb      	ldrb	r3, [r7, #15]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f000 f965 	bl	8000fa2 <LoRa_write>
	//HAL_Delay(10);
}
 8000cd8:	bf00      	nop
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> determines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	4613      	mov	r3, r2
 8000cee:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	6818      	ldr	r0, [r3, #0]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	889b      	ldrh	r3, [r3, #4]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	f002 fdbe 	bl	800387c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	6998      	ldr	r0, [r3, #24]
 8000d04:	88fa      	ldrh	r2, [r7, #6]
 8000d06:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000d0a:	68b9      	ldr	r1, [r7, #8]
 8000d0c:	f003 fefd 	bl	8004b0a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000d10:	bf00      	nop
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	699b      	ldr	r3, [r3, #24]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f004 fae6 	bl	80052e8 <HAL_SPI_GetState>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d1f7      	bne.n	8000d12 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	6998      	ldr	r0, [r3, #24]
 8000d26:	8b3a      	ldrh	r2, [r7, #24]
 8000d28:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000d2c:	6839      	ldr	r1, [r7, #0]
 8000d2e:	f004 f828 	bl	8004d82 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000d32:	bf00      	nop
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f004 fad5 	bl	80052e8 <HAL_SPI_GetState>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d1f7      	bne.n	8000d34 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	6818      	ldr	r0, [r3, #0]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	889b      	ldrh	r3, [r3, #4]
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	4619      	mov	r1, r3
 8000d50:	f002 fd94 	bl	800387c <HAL_GPIO_WritePin>
}
 8000d54:	bf00      	nop
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> determines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	603b      	str	r3, [r7, #0]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	6818      	ldr	r0, [r3, #0]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	889b      	ldrh	r3, [r3, #4]
 8000d74:	2200      	movs	r2, #0
 8000d76:	4619      	mov	r1, r3
 8000d78:	f002 fd80 	bl	800387c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	6998      	ldr	r0, [r3, #24]
 8000d80:	88fa      	ldrh	r2, [r7, #6]
 8000d82:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000d86:	68b9      	ldr	r1, [r7, #8]
 8000d88:	f003 febf 	bl	8004b0a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000d8c:	bf00      	nop
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	699b      	ldr	r3, [r3, #24]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f004 faa8 	bl	80052e8 <HAL_SPI_GetState>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d1f7      	bne.n	8000d8e <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	6998      	ldr	r0, [r3, #24]
 8000da2:	8b3a      	ldrh	r2, [r7, #24]
 8000da4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000da8:	6839      	ldr	r1, [r7, #0]
 8000daa:	f003 feae 	bl	8004b0a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000dae:	bf00      	nop
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f004 fa97 	bl	80052e8 <HAL_SPI_GetState>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d1f7      	bne.n	8000db0 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	6818      	ldr	r0, [r3, #0]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	889b      	ldrh	r3, [r3, #4]
 8000dc8:	2201      	movs	r2, #1
 8000dca:	4619      	mov	r1, r3
 8000dcc:	f002 fd56 	bl	800387c <HAL_GPIO_WritePin>
}
 8000dd0:	bf00      	nop
 8000dd2:	3710      	adds	r7, #16
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	04db      	lsls	r3, r3, #19
 8000de6:	115b      	asrs	r3, r3, #5
 8000de8:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	0c1b      	lsrs	r3, r3, #16
 8000dee:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8000df0:	7afb      	ldrb	r3, [r7, #11]
 8000df2:	461a      	mov	r2, r3
 8000df4:	2106      	movs	r1, #6
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f000 f8d3 	bl	8000fa2 <LoRa_write>
	HAL_Delay(5);
 8000dfc:	2005      	movs	r0, #5
 8000dfe:	f001 fea5 	bl	8002b4c <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	0a1b      	lsrs	r3, r3, #8
 8000e06:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8000e08:	7afb      	ldrb	r3, [r7, #11]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	2107      	movs	r1, #7
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f000 f8c7 	bl	8000fa2 <LoRa_write>
	HAL_Delay(5);
 8000e14:	2005      	movs	r0, #5
 8000e16:	f001 fe99 	bl	8002b4c <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8000e1e:	7afb      	ldrb	r3, [r7, #11]
 8000e20:	461a      	mov	r2, r3
 8000e22:	2108      	movs	r1, #8
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f000 f8bc 	bl	8000fa2 <LoRa_write>
	HAL_Delay(5);
 8000e2a:	2005      	movs	r0, #5
 8000e2c:	f001 fe8e 	bl	8002b4c <HAL_Delay>
}
 8000e30:	bf00      	nop
 8000e32:	3710      	adds	r7, #16
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	2b0c      	cmp	r3, #12
 8000e46:	dd01      	ble.n	8000e4c <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8000e48:	230c      	movs	r3, #12
 8000e4a:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	2b06      	cmp	r3, #6
 8000e50:	dc01      	bgt.n	8000e56 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8000e52:	2307      	movs	r3, #7
 8000e54:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000e56:	211e      	movs	r1, #30
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f000 f888 	bl	8000f6e <LoRa_read>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8000e62:	200a      	movs	r0, #10
 8000e64:	f001 fe72 	bl	8002b4c <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	011b      	lsls	r3, r3, #4
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	7bfb      	ldrb	r3, [r7, #15]
 8000e72:	f003 030f 	and.w	r3, r3, #15
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	4413      	add	r3, r2
 8000e7a:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8000e7c:	7bbb      	ldrb	r3, [r7, #14]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	211e      	movs	r1, #30
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f000 f88d 	bl	8000fa2 <LoRa_write>
	HAL_Delay(10);
 8000e88:	200a      	movs	r0, #10
 8000e8a:	f001 fe5f 	bl	8002b4c <HAL_Delay>
}
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power e.g POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8000ea2:	78fb      	ldrb	r3, [r7, #3]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	2109      	movs	r1, #9
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f000 f87a 	bl	8000fa2 <LoRa_write>
	HAL_Delay(10);
 8000eae:	200a      	movs	r0, #10
 8000eb0:	f001 fe4c 	bl	8002b4c <HAL_Delay>
}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8000ecc:	78fb      	ldrb	r3, [r7, #3]
 8000ece:	2b2c      	cmp	r3, #44	; 0x2c
 8000ed0:	d801      	bhi.n	8000ed6 <LoRa_setOCP+0x1a>
		current = 45;
 8000ed2:	232d      	movs	r3, #45	; 0x2d
 8000ed4:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8000ed6:	78fb      	ldrb	r3, [r7, #3]
 8000ed8:	2bf0      	cmp	r3, #240	; 0xf0
 8000eda:	d901      	bls.n	8000ee0 <LoRa_setOCP+0x24>
		current = 240;
 8000edc:	23f0      	movs	r3, #240	; 0xf0
 8000ede:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8000ee0:	78fb      	ldrb	r3, [r7, #3]
 8000ee2:	2b78      	cmp	r3, #120	; 0x78
 8000ee4:	d809      	bhi.n	8000efa <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8000ee6:	78fb      	ldrb	r3, [r7, #3]
 8000ee8:	3b2d      	subs	r3, #45	; 0x2d
 8000eea:	4a12      	ldr	r2, [pc, #72]	; (8000f34 <LoRa_setOCP+0x78>)
 8000eec:	fb82 1203 	smull	r1, r2, r2, r3
 8000ef0:	1052      	asrs	r2, r2, #1
 8000ef2:	17db      	asrs	r3, r3, #31
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	73fb      	strb	r3, [r7, #15]
 8000ef8:	e00b      	b.n	8000f12 <LoRa_setOCP+0x56>
	else if(current <= 240)
 8000efa:	78fb      	ldrb	r3, [r7, #3]
 8000efc:	2bf0      	cmp	r3, #240	; 0xf0
 8000efe:	d808      	bhi.n	8000f12 <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8000f00:	78fb      	ldrb	r3, [r7, #3]
 8000f02:	331e      	adds	r3, #30
 8000f04:	4a0b      	ldr	r2, [pc, #44]	; (8000f34 <LoRa_setOCP+0x78>)
 8000f06:	fb82 1203 	smull	r1, r2, r2, r3
 8000f0a:	1092      	asrs	r2, r2, #2
 8000f0c:	17db      	asrs	r3, r3, #31
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
 8000f14:	3320      	adds	r3, #32
 8000f16:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	210b      	movs	r1, #11
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f000 f83f 	bl	8000fa2 <LoRa_write>
	HAL_Delay(10);
 8000f24:	200a      	movs	r0, #10
 8000f26:	f001 fe11 	bl	8002b4c <HAL_Delay>
}
 8000f2a:	bf00      	nop
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	66666667 	.word	0x66666667

08000f38 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000f40:	211e      	movs	r1, #30
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f000 f813 	bl	8000f6e <LoRa_read>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	f043 0307 	orr.w	r3, r3, #7
 8000f52:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8000f54:	7bbb      	ldrb	r3, [r7, #14]
 8000f56:	461a      	mov	r2, r3
 8000f58:	211e      	movs	r1, #30
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f000 f821 	bl	8000fa2 <LoRa_write>
	HAL_Delay(10);
 8000f60:	200a      	movs	r0, #10
 8000f62:	f001 fdf3 	bl	8002b4c <HAL_Delay>
}
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b086      	sub	sp, #24
 8000f72:	af02      	add	r7, sp, #8
 8000f74:	6078      	str	r0, [r7, #4]
 8000f76:	460b      	mov	r3, r1
 8000f78:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8000f7a:	78fb      	ldrb	r3, [r7, #3]
 8000f7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8000f84:	f107 030f 	add.w	r3, r7, #15
 8000f88:	f107 010e 	add.w	r1, r7, #14
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	9200      	str	r2, [sp, #0]
 8000f90:	2201      	movs	r2, #1
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff fea4 	bl	8000ce0 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b086      	sub	sp, #24
 8000fa6:	af02      	add	r7, sp, #8
 8000fa8:	6078      	str	r0, [r7, #4]
 8000faa:	460b      	mov	r3, r1
 8000fac:	70fb      	strb	r3, [r7, #3]
 8000fae:	4613      	mov	r3, r2
 8000fb0:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8000fb2:	78fb      	ldrb	r3, [r7, #3]
 8000fb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	73bb      	strb	r3, [r7, #14]
	data = value;
 8000fbc:	78bb      	ldrb	r3, [r7, #2]
 8000fbe:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8000fc0:	f107 030f 	add.w	r3, r7, #15
 8000fc4:	f107 010e 	add.w	r1, r7, #14
 8000fc8:	2201      	movs	r2, #1
 8000fca:	9200      	str	r2, [sp, #0]
 8000fcc:	2201      	movs	r2, #1
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff fec4 	bl	8000d5c <LoRa_writeReg>
	//HAL_Delay(5);
}
 8000fd4:	bf00      	nop
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t * value, uint8_t length){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	607a      	str	r2, [r7, #4]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	460b      	mov	r3, r1
 8000fea:	72fb      	strb	r3, [r7, #11]
 8000fec:	4613      	mov	r3, r2
 8000fee:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8000ff0:	7afb      	ldrb	r3, [r7, #11]
 8000ff2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	6818      	ldr	r0, [r3, #0]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	889b      	ldrh	r3, [r3, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	4619      	mov	r1, r3
 8001006:	f002 fc39 	bl	800387c <HAL_GPIO_WritePin>
	//say module thai I want to write in RegFiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	6998      	ldr	r0, [r3, #24]
 800100e:	f107 0117 	add.w	r1, r7, #23
 8001012:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001016:	2201      	movs	r2, #1
 8001018:	f003 fd77 	bl	8004b0a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800101c:	bf00      	nop
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	4618      	mov	r0, r3
 8001024:	f004 f960 	bl	80052e8 <HAL_SPI_GetState>
 8001028:	4603      	mov	r3, r0
 800102a:	2b01      	cmp	r3, #1
 800102c:	d1f7      	bne.n	800101e <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	6998      	ldr	r0, [r3, #24]
 8001032:	7abb      	ldrb	r3, [r7, #10]
 8001034:	b29a      	uxth	r2, r3
 8001036:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800103a:	6879      	ldr	r1, [r7, #4]
 800103c:	f003 fd65 	bl	8004b0a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001040:	bf00      	nop
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	4618      	mov	r0, r3
 8001048:	f004 f94e 	bl	80052e8 <HAL_SPI_GetState>
 800104c:	4603      	mov	r3, r0
 800104e:	2b01      	cmp	r3, #1
 8001050:	d1f7      	bne.n	8001042 <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	6818      	ldr	r0, [r3, #0]
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	889b      	ldrh	r3, [r3, #4]
 800105a:	2201      	movs	r2, #1
 800105c:	4619      	mov	r1, r3
 800105e:	f002 fc0d 	bl	800387c <HAL_GPIO_WritePin>
}
 8001062:	bf00      	nop
 8001064:	3718      	adds	r7, #24
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 800106a:	b480      	push	{r7}
 800106c:	b083      	sub	sp, #12
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]

	return 1;
 8001072:	2301      	movs	r3, #1
}
 8001074:	4618      	mov	r0, r3
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	4611      	mov	r1, r2
 800108c:	461a      	mov	r2, r3
 800108e:	460b      	mov	r3, r1
 8001090:	71fb      	strb	r3, [r7, #7]
 8001092:	4613      	mov	r3, r2
 8001094:	80bb      	strh	r3, [r7, #4]
//char LoRa_transmit(LoRa* _LoRa, uint8_t data, uint8_t length, uint16_t timeout){
	uint8_t read;

	int mode = _LoRa->current_mode;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	69db      	ldr	r3, [r3, #28]
 800109a:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 800109c:	2101      	movs	r1, #1
 800109e:	68f8      	ldr	r0, [r7, #12]
 80010a0:	f7ff fdbd 	bl	8000c1e <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 80010a4:	210e      	movs	r1, #14
 80010a6:	68f8      	ldr	r0, [r7, #12]
 80010a8:	f7ff ff61 	bl	8000f6e <LoRa_read>
 80010ac:	4603      	mov	r3, r0
 80010ae:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80010b0:	7cfb      	ldrb	r3, [r7, #19]
 80010b2:	461a      	mov	r2, r3
 80010b4:	210d      	movs	r1, #13
 80010b6:	68f8      	ldr	r0, [r7, #12]
 80010b8:	f7ff ff73 	bl	8000fa2 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	461a      	mov	r2, r3
 80010c0:	2122      	movs	r1, #34	; 0x22
 80010c2:	68f8      	ldr	r0, [r7, #12]
 80010c4:	f7ff ff6d 	bl	8000fa2 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	2100      	movs	r1, #0
 80010ce:	68f8      	ldr	r0, [r7, #12]
 80010d0:	f7ff ff84 	bl	8000fdc <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 80010d4:	2103      	movs	r1, #3
 80010d6:	68f8      	ldr	r0, [r7, #12]
 80010d8:	f7ff fda1 	bl	8000c1e <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 80010dc:	2112      	movs	r1, #18
 80010de:	68f8      	ldr	r0, [r7, #12]
 80010e0:	f7ff ff45 	bl	8000f6e <LoRa_read>
 80010e4:	4603      	mov	r3, r0
 80010e6:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 80010e8:	7cfb      	ldrb	r3, [r7, #19]
 80010ea:	f003 0308 	and.w	r3, r3, #8
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d00a      	beq.n	8001108 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 80010f2:	22ff      	movs	r2, #255	; 0xff
 80010f4:	2112      	movs	r1, #18
 80010f6:	68f8      	ldr	r0, [r7, #12]
 80010f8:	f7ff ff53 	bl	8000fa2 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 80010fc:	6979      	ldr	r1, [r7, #20]
 80010fe:	68f8      	ldr	r0, [r7, #12]
 8001100:	f7ff fd8d 	bl	8000c1e <LoRa_gotoMode>
			return 1;
 8001104:	2301      	movs	r3, #1
 8001106:	e00f      	b.n	8001128 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8001108:	88bb      	ldrh	r3, [r7, #4]
 800110a:	3b01      	subs	r3, #1
 800110c:	80bb      	strh	r3, [r7, #4]
 800110e:	88bb      	ldrh	r3, [r7, #4]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d105      	bne.n	8001120 <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8001114:	6979      	ldr	r1, [r7, #20]
 8001116:	68f8      	ldr	r0, [r7, #12]
 8001118:	f7ff fd81 	bl	8000c1e <LoRa_gotoMode>
				return 0;
 800111c:	2300      	movs	r3, #0
 800111e:	e003      	b.n	8001128 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 8001120:	2001      	movs	r0, #1
 8001122:	f001 fd13 	bl	8002b4c <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001126:	e7d9      	b.n	80010dc <LoRa_transmit+0x5c>
	}

}
 8001128:	4618      	mov	r0, r3
 800112a:	3718      	adds	r7, #24
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8001138:	2105      	movs	r1, #5
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff fd6f 	bl	8000c1e <LoRa_gotoMode>
}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff ff8a 	bl	800106a <LoRa_isvalid>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	f000 8093 	beq.w	8001284 <LoRa_init+0x13c>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 800115e:	2100      	movs	r1, #0
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f7ff fd5c 	bl	8000c1e <LoRa_gotoMode>
			HAL_Delay(10);
 8001166:	200a      	movs	r0, #10
 8001168:	f001 fcf0 	bl	8002b4c <HAL_Delay>

		// turn on lora mode:
			read = LoRa_read(_LoRa, RegOpMode);
 800116c:	2101      	movs	r1, #1
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff fefd 	bl	8000f6e <LoRa_read>
 8001174:	4603      	mov	r3, r0
 8001176:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8001178:	200a      	movs	r0, #10
 800117a:	f001 fce7 	bl	8002b4c <HAL_Delay>
			data = read | 0x80;
 800117e:	7bfb      	ldrb	r3, [r7, #15]
 8001180:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001184:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8001186:	7bbb      	ldrb	r3, [r7, #14]
 8001188:	461a      	mov	r2, r3
 800118a:	2101      	movs	r1, #1
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff ff08 	bl	8000fa2 <LoRa_write>
			HAL_Delay(100);
 8001192:	2064      	movs	r0, #100	; 0x64
 8001194:	f001 fcda 	bl	8002b4c <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a1b      	ldr	r3, [r3, #32]
 800119c:	4619      	mov	r1, r3
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff fe1a 	bl	8000dd8 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80011aa:	4619      	mov	r1, r3
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff fe72 	bl	8000e96 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80011b8:	4619      	mov	r1, r3
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f7ff fe7e 	bl	8000ebc <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 80011c0:	2223      	movs	r2, #35	; 0x23
 80011c2:	210c      	movs	r1, #12
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff feec 	bl	8000fa2 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff feb4 	bl	8000f38 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011d6:	4619      	mov	r1, r3
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff fe2d 	bl	8000e38 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 80011de:	22ff      	movs	r2, #255	; 0xff
 80011e0:	211f      	movs	r1, #31
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff fedd 	bl	8000fa2 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011f2:	011b      	lsls	r3, r3, #4
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	4413      	add	r3, r2
 8001202:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8001204:	7bbb      	ldrb	r3, [r7, #14]
 8001206:	461a      	mov	r2, r3
 8001208:	211d      	movs	r1, #29
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff fec9 	bl	8000fa2 <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001214:	0a1b      	lsrs	r3, r3, #8
 8001216:	b29b      	uxth	r3, r3
 8001218:	b2db      	uxtb	r3, r3
 800121a:	461a      	mov	r2, r3
 800121c:	2120      	movs	r1, #32
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff febf 	bl	8000fa2 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001228:	b2db      	uxtb	r3, r3
 800122a:	461a      	mov	r2, r3
 800122c:	2121      	movs	r1, #33	; 0x21
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff feb7 	bl	8000fa2 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8001234:	2140      	movs	r1, #64	; 0x40
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff fe99 	bl	8000f6e <LoRa_read>
 800123c:	4603      	mov	r3, r0
 800123e:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8001240:	7bfb      	ldrb	r3, [r7, #15]
 8001242:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8001246:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8001248:	7bbb      	ldrb	r3, [r7, #14]
 800124a:	461a      	mov	r2, r3
 800124c:	2140      	movs	r1, #64	; 0x40
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff fea7 	bl	8000fa2 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001254:	2101      	movs	r1, #1
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff fce1 	bl	8000c1e <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2201      	movs	r2, #1
 8001260:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8001262:	200a      	movs	r0, #10
 8001264:	f001 fc72 	bl	8002b4c <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8001268:	2142      	movs	r1, #66	; 0x42
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff fe7f 	bl	8000f6e <LoRa_read>
 8001270:	4603      	mov	r3, r0
 8001272:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	2b12      	cmp	r3, #18
 8001278:	d101      	bne.n	800127e <LoRa_init+0x136>
				return LORA_OK;
 800127a:	23c8      	movs	r3, #200	; 0xc8
 800127c:	e004      	b.n	8001288 <LoRa_init+0x140>
			else
				return LORA_NOT_FOUND;
 800127e:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8001282:	e001      	b.n	8001288 <LoRa_init+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 8001284:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8001288:	4618      	mov	r0, r3
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <Set_Pin_Output3>:
float dhtHumidity = 0;

/*********************** SELECT PINS FOR DS18B20 & DHT ************************************/

void Set_Pin_Output3 (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	460b      	mov	r3, r1
 800129a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129c:	f107 030c 	add.w	r3, r7, #12
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80012ac:	887b      	ldrh	r3, [r7, #2]
 80012ae:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b0:	2301      	movs	r3, #1
 80012b2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80012b8:	f107 030c 	add.w	r3, r7, #12
 80012bc:	4619      	mov	r1, r3
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f002 f940 	bl	8003544 <HAL_GPIO_Init>
}
 80012c4:	bf00      	nop
 80012c6:	3720      	adds	r7, #32
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <Set_Pin_Input3>:

void Set_Pin_Input3 (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b088      	sub	sp, #32
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d8:	f107 030c 	add.w	r3, r7, #12
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80012e8:	887b      	ldrh	r3, [r7, #2]
 80012ea:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ec:	2300      	movs	r3, #0
 80012ee:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012f0:	2301      	movs	r3, #1
 80012f2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	4619      	mov	r1, r3
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f002 f922 	bl	8003544 <HAL_GPIO_Init>
}
 8001300:	bf00      	nop
 8001302:	3720      	adds	r7, #32
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <DHT11_Start>:

/*********************************** DHT11 FUNCTIONS ********************************************/

void DHT11_Start (void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
	Set_Pin_Output3 (DHT11_Port, DHT11_Pin);  // set the pin as output
 800130c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001310:	4813      	ldr	r0, [pc, #76]	; (8001360 <DHT11_Start+0x58>)
 8001312:	f7ff ffbd 	bl	8001290 <Set_Pin_Output3>

	HAL_GPIO_WritePin(DHT11_Port, DHT11_Pin, 1); //initialize with data pin high
 8001316:	2201      	movs	r2, #1
 8001318:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800131c:	4810      	ldr	r0, [pc, #64]	; (8001360 <DHT11_Start+0x58>)
 800131e:	f002 faad 	bl	800387c <HAL_GPIO_WritePin>
	HAL_Delay(1000); //wait for 1000 milliseconds
 8001322:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001326:	f001 fc11 	bl	8002b4c <HAL_Delay>

	HAL_GPIO_WritePin (DHT11_Port, DHT11_Pin, 0);   // pull the pin low
 800132a:	2200      	movs	r2, #0
 800132c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001330:	480b      	ldr	r0, [pc, #44]	; (8001360 <DHT11_Start+0x58>)
 8001332:	f002 faa3 	bl	800387c <HAL_GPIO_WritePin>
	DelayUS(18000);   // wait for 18ms
 8001336:	f244 6050 	movw	r0, #18000	; 0x4650
 800133a:	f000 fc73 	bl	8001c24 <DelayUS>
    HAL_GPIO_WritePin (DHT11_Port, DHT11_Pin, 1);   // pull the pin high
 800133e:	2201      	movs	r2, #1
 8001340:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001344:	4806      	ldr	r0, [pc, #24]	; (8001360 <DHT11_Start+0x58>)
 8001346:	f002 fa99 	bl	800387c <HAL_GPIO_WritePin>
    DelayUS(20);   // wait for 20us
 800134a:	2014      	movs	r0, #20
 800134c:	f000 fc6a 	bl	8001c24 <DelayUS>
	Set_Pin_Input3(DHT11_Port, DHT11_Pin);    // set as input
 8001350:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001354:	4802      	ldr	r0, [pc, #8]	; (8001360 <DHT11_Start+0x58>)
 8001356:	f7ff ffb9 	bl	80012cc <Set_Pin_Input3>
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40020800 	.word	0x40020800

08001364 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	71fb      	strb	r3, [r7, #7]
	DelayUS(40);
 800136e:	2028      	movs	r0, #40	; 0x28
 8001370:	f000 fc58 	bl	8001c24 <DelayUS>
	if (!(HAL_GPIO_ReadPin (DHT11_Port, DHT11_Pin)))
 8001374:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001378:	4811      	ldr	r0, [pc, #68]	; (80013c0 <DHT11_Check_Response+0x5c>)
 800137a:	f002 fa67 	bl	800384c <HAL_GPIO_ReadPin>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d10f      	bne.n	80013a4 <DHT11_Check_Response+0x40>
	{
		DelayUS(80);
 8001384:	2050      	movs	r0, #80	; 0x50
 8001386:	f000 fc4d 	bl	8001c24 <DelayUS>
		if (HAL_GPIO_ReadPin (DHT11_Port, DHT11_Pin))
 800138a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800138e:	480c      	ldr	r0, [pc, #48]	; (80013c0 <DHT11_Check_Response+0x5c>)
 8001390:	f002 fa5c 	bl	800384c <HAL_GPIO_ReadPin>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d002      	beq.n	80013a0 <DHT11_Check_Response+0x3c>
			Response = 1;
 800139a:	2301      	movs	r3, #1
 800139c:	71fb      	strb	r3, [r7, #7]
 800139e:	e001      	b.n	80013a4 <DHT11_Check_Response+0x40>
		else Response = -1; // 255
 80013a0:	23ff      	movs	r3, #255	; 0xff
 80013a2:	71fb      	strb	r3, [r7, #7]
	}
	while (HAL_GPIO_ReadPin (DHT11_Port, DHT11_Pin));   // wait for the pin to go low
 80013a4:	bf00      	nop
 80013a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013aa:	4805      	ldr	r0, [pc, #20]	; (80013c0 <DHT11_Check_Response+0x5c>)
 80013ac:	f002 fa4e 	bl	800384c <HAL_GPIO_ReadPin>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f7      	bne.n	80013a6 <DHT11_Check_Response+0x42>

	return Response;
 80013b6:	79fb      	ldrb	r3, [r7, #7]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40020800 	.word	0x40020800

080013c4 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 80013ca:	2300      	movs	r3, #0
 80013cc:	71bb      	strb	r3, [r7, #6]
 80013ce:	e03a      	b.n	8001446 <DHT11_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_Port, DHT11_Pin)));   // wait for the pin to go high
 80013d0:	bf00      	nop
 80013d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013d6:	4820      	ldr	r0, [pc, #128]	; (8001458 <DHT11_Read+0x94>)
 80013d8:	f002 fa38 	bl	800384c <HAL_GPIO_ReadPin>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d0f7      	beq.n	80013d2 <DHT11_Read+0xe>
		DelayUS(40);   // wait for 40 us
 80013e2:	2028      	movs	r0, #40	; 0x28
 80013e4:	f000 fc1e 	bl	8001c24 <DelayUS>
		if (!(HAL_GPIO_ReadPin (DHT11_Port, DHT11_Pin)))   // if the pin is low
 80013e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ec:	481a      	ldr	r0, [pc, #104]	; (8001458 <DHT11_Read+0x94>)
 80013ee:	f002 fa2d 	bl	800384c <HAL_GPIO_ReadPin>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d10e      	bne.n	8001416 <DHT11_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 80013f8:	79bb      	ldrb	r3, [r7, #6]
 80013fa:	f1c3 0307 	rsb	r3, r3, #7
 80013fe:	2201      	movs	r2, #1
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	b25b      	sxtb	r3, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	b25a      	sxtb	r2, r3
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	4013      	ands	r3, r2
 8001410:	b25b      	sxtb	r3, r3
 8001412:	71fb      	strb	r3, [r7, #7]
 8001414:	e00b      	b.n	800142e <DHT11_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8001416:	79bb      	ldrb	r3, [r7, #6]
 8001418:	f1c3 0307 	rsb	r3, r3, #7
 800141c:	2201      	movs	r2, #1
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	b25a      	sxtb	r2, r3
 8001424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001428:	4313      	orrs	r3, r2
 800142a:	b25b      	sxtb	r3, r3
 800142c:	71fb      	strb	r3, [r7, #7]
		while (HAL_GPIO_ReadPin (DHT11_Port, DHT11_Pin));  // wait for the pin to go low
 800142e:	bf00      	nop
 8001430:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001434:	4808      	ldr	r0, [pc, #32]	; (8001458 <DHT11_Read+0x94>)
 8001436:	f002 fa09 	bl	800384c <HAL_GPIO_ReadPin>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1f7      	bne.n	8001430 <DHT11_Read+0x6c>
	for (j=0;j<8;j++)
 8001440:	79bb      	ldrb	r3, [r7, #6]
 8001442:	3301      	adds	r3, #1
 8001444:	71bb      	strb	r3, [r7, #6]
 8001446:	79bb      	ldrb	r3, [r7, #6]
 8001448:	2b07      	cmp	r3, #7
 800144a:	d9c1      	bls.n	80013d0 <DHT11_Read+0xc>
	}
	return i;
 800144c:	79fb      	ldrb	r3, [r7, #7]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40020800 	.word	0x40020800

0800145c <humidity_Task>:


/****************** TASK DEFINITIONS *********************************/

int humidity_Task ()					// DHT11 -Check Humidity in Air
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
	uint16_t RH;
	char lcdBuffer[20];
	//float dhtTemp = 0;
	//while(1)
	{
	  DHT11_Start();
 8001462:	f7ff ff51 	bl	8001308 <DHT11_Start>
	  DHT11_Check_Response();
 8001466:	f7ff ff7d 	bl	8001364 <DHT11_Check_Response>

	  Rh_byte1 = DHT11_Read ();
 800146a:	f7ff ffab 	bl	80013c4 <DHT11_Read>
 800146e:	4603      	mov	r3, r0
 8001470:	461a      	mov	r2, r3
 8001472:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <humidity_Task+0x8c>)
 8001474:	701a      	strb	r2, [r3, #0]
	  Rh_byte2 = DHT11_Read ();
 8001476:	f7ff ffa5 	bl	80013c4 <DHT11_Read>
 800147a:	4603      	mov	r3, r0
 800147c:	461a      	mov	r2, r3
 800147e:	4b1b      	ldr	r3, [pc, #108]	; (80014ec <humidity_Task+0x90>)
 8001480:	701a      	strb	r2, [r3, #0]
	  Temp_byte1 = DHT11_Read ();
 8001482:	f7ff ff9f 	bl	80013c4 <DHT11_Read>
 8001486:	4603      	mov	r3, r0
 8001488:	461a      	mov	r2, r3
 800148a:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <humidity_Task+0x94>)
 800148c:	701a      	strb	r2, [r3, #0]
	  Temp_byte2 = DHT11_Read ();
 800148e:	f7ff ff99 	bl	80013c4 <DHT11_Read>
 8001492:	4603      	mov	r3, r0
 8001494:	461a      	mov	r2, r3
 8001496:	4b17      	ldr	r3, [pc, #92]	; (80014f4 <humidity_Task+0x98>)
 8001498:	701a      	strb	r2, [r3, #0]

//		  SUM = DHT11_Read();

//		  TEMP = Temp_byte1;
	  RH = Rh_byte1;
 800149a:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <humidity_Task+0x8c>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	82fb      	strh	r3, [r7, #22]
//		  Temperature = (float) TEMP;
//		  dhtHumidity = (float) RH;

	  /***** Display on LCD ****/

	  lcd_Clear();
 80014a0:	f000 fa72 	bl	8001988 <lcd_Clear>
	  lcd_SetCursor(0,0);
 80014a4:	2100      	movs	r1, #0
 80014a6:	2000      	movs	r0, #0
 80014a8:	f000 fa84 	bl	80019b4 <lcd_SetCursor>
	  lcd_PrintStr("Air Humidity");
 80014ac:	4812      	ldr	r0, [pc, #72]	; (80014f8 <humidity_Task+0x9c>)
 80014ae:	f000 faf2 	bl	8001a96 <lcd_PrintStr>
	  lcd_SetCursor(0,1);
 80014b2:	2101      	movs	r1, #1
 80014b4:	2000      	movs	r0, #0
 80014b6:	f000 fa7d 	bl	80019b4 <lcd_SetCursor>
	  sprintf(lcdBuffer,"Value: %d", RH);
 80014ba:	8afa      	ldrh	r2, [r7, #22]
 80014bc:	463b      	mov	r3, r7
 80014be:	490f      	ldr	r1, [pc, #60]	; (80014fc <humidity_Task+0xa0>)
 80014c0:	4618      	mov	r0, r3
 80014c2:	f004 fe3d 	bl	8006140 <siprintf>
	  lcd_PrintStr(lcdBuffer);
 80014c6:	463b      	mov	r3, r7
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 fae4 	bl	8001a96 <lcd_PrintStr>
	  lcd_PrintStr("%");
 80014ce:	480c      	ldr	r0, [pc, #48]	; (8001500 <humidity_Task+0xa4>)
 80014d0:	f000 fae1 	bl	8001a96 <lcd_PrintStr>
	  HAL_Delay(2000);
 80014d4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80014d8:	f001 fb38 	bl	8002b4c <HAL_Delay>
	}
	return RH;
 80014dc:	8afb      	ldrh	r3, [r7, #22]
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	2000009c 	.word	0x2000009c
 80014ec:	2000009d 	.word	0x2000009d
 80014f0:	2000009e 	.word	0x2000009e
 80014f4:	2000009f 	.word	0x2000009f
 80014f8:	08006a34 	.word	0x08006a34
 80014fc:	08006a44 	.word	0x08006a44
 8001500:	08006a50 	.word	0x08006a50

08001504 <Set_Pin_Output1>:
uint8_t airTemp_byte1, airTemp_byte2;

/*********************** SELECT PINS FOR DS18B20 & DHT ************************************/

void Set_Pin_Output1 (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b088      	sub	sp, #32
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	460b      	mov	r3, r1
 800150e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001510:	f107 030c 	add.w	r3, r7, #12
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001520:	887b      	ldrh	r3, [r7, #2]
 8001522:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001524:	2301      	movs	r3, #1
 8001526:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001528:	2300      	movs	r3, #0
 800152a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800152c:	f107 030c 	add.w	r3, r7, #12
 8001530:	4619      	mov	r1, r3
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f002 f806 	bl	8003544 <HAL_GPIO_Init>
}
 8001538:	bf00      	nop
 800153a:	3720      	adds	r7, #32
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <Set_Pin_Input1>:

void Set_Pin_Input1 (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154c:	f107 030c 	add.w	r3, r7, #12
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800155c:	887b      	ldrh	r3, [r7, #2]
 800155e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001560:	2300      	movs	r3, #0
 8001562:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001564:	2301      	movs	r3, #1
 8001566:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	4619      	mov	r1, r3
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f001 ffe8 	bl	8003544 <HAL_GPIO_Init>
}
 8001574:	bf00      	nop
 8001576:	3720      	adds	r7, #32
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <DS18B20_Start2>:

/*********************************** DS18B20 FUNCTIONS ****************************************/
uint8_t DS18B20_Start2 (void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001582:	2300      	movs	r3, #0
 8001584:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output1(airTemp_PORT, airTemp_PIN);  		 	// set the pin as output
 8001586:	2180      	movs	r1, #128	; 0x80
 8001588:	4813      	ldr	r0, [pc, #76]	; (80015d8 <DS18B20_Start2+0x5c>)
 800158a:	f7ff ffbb 	bl	8001504 <Set_Pin_Output1>
	HAL_GPIO_WritePin (airTemp_PORT, airTemp_PIN, 0);  		// pull the pin low
 800158e:	2200      	movs	r2, #0
 8001590:	2180      	movs	r1, #128	; 0x80
 8001592:	4811      	ldr	r0, [pc, #68]	; (80015d8 <DS18B20_Start2+0x5c>)
 8001594:	f002 f972 	bl	800387c <HAL_GPIO_WritePin>
	DelayUS(480);   										// delay according to datasheet
 8001598:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800159c:	f000 fb42 	bl	8001c24 <DelayUS>

	Set_Pin_Input1(airTemp_PORT, airTemp_PIN);    			// set the pin as input
 80015a0:	2180      	movs	r1, #128	; 0x80
 80015a2:	480d      	ldr	r0, [pc, #52]	; (80015d8 <DS18B20_Start2+0x5c>)
 80015a4:	f7ff ffcc 	bl	8001540 <Set_Pin_Input1>
	DelayUS (80);    										// delay according to datasheet
 80015a8:	2050      	movs	r0, #80	; 0x50
 80015aa:	f000 fb3b 	bl	8001c24 <DelayUS>

	if (!(HAL_GPIO_ReadPin (airTemp_PORT, airTemp_PIN)))
 80015ae:	2180      	movs	r1, #128	; 0x80
 80015b0:	4809      	ldr	r0, [pc, #36]	; (80015d8 <DS18B20_Start2+0x5c>)
 80015b2:	f002 f94b 	bl	800384c <HAL_GPIO_ReadPin>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d102      	bne.n	80015c2 <DS18B20_Start2+0x46>
		Response = 1;    // if the pin is low i.e the presence pulse is detected
 80015bc:	2301      	movs	r3, #1
 80015be:	71fb      	strb	r3, [r7, #7]
 80015c0:	e001      	b.n	80015c6 <DS18B20_Start2+0x4a>
	else Response = -1;
 80015c2:	23ff      	movs	r3, #255	; 0xff
 80015c4:	71fb      	strb	r3, [r7, #7]

	DelayUS(480); // 480 us delay totally.
 80015c6:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80015ca:	f000 fb2b 	bl	8001c24 <DelayUS>

	return Response;
 80015ce:	79fb      	ldrb	r3, [r7, #7]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40020800 	.word	0x40020800

080015dc <DS18B20_Write2>:

void DS18B20_Write2 (uint8_t data)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output1(airTemp_PORT, airTemp_PIN);  // set as output
 80015e6:	2180      	movs	r1, #128	; 0x80
 80015e8:	481e      	ldr	r0, [pc, #120]	; (8001664 <DS18B20_Write2+0x88>)
 80015ea:	f7ff ff8b 	bl	8001504 <Set_Pin_Output1>

	for (int i=0; i<8; i++)
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	e02e      	b.n	8001652 <DS18B20_Write2+0x76>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 80015f4:	79fa      	ldrb	r2, [r7, #7]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	fa42 f303 	asr.w	r3, r2, r3
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	2b00      	cmp	r3, #0
 8001602:	d013      	beq.n	800162c <DS18B20_Write2+0x50>
		{
			// write 1
			Set_Pin_Output1(airTemp_PORT, airTemp_PIN);  // set as output
 8001604:	2180      	movs	r1, #128	; 0x80
 8001606:	4817      	ldr	r0, [pc, #92]	; (8001664 <DS18B20_Write2+0x88>)
 8001608:	f7ff ff7c 	bl	8001504 <Set_Pin_Output1>
			HAL_GPIO_WritePin (airTemp_PORT, airTemp_PIN, 0);  // pull the pin LOW
 800160c:	2200      	movs	r2, #0
 800160e:	2180      	movs	r1, #128	; 0x80
 8001610:	4814      	ldr	r0, [pc, #80]	; (8001664 <DS18B20_Write2+0x88>)
 8001612:	f002 f933 	bl	800387c <HAL_GPIO_WritePin>
			DelayUS(1);  // wait for 1 us
 8001616:	2001      	movs	r0, #1
 8001618:	f000 fb04 	bl	8001c24 <DelayUS>

			Set_Pin_Input1(airTemp_PORT, airTemp_PIN);  // set as input
 800161c:	2180      	movs	r1, #128	; 0x80
 800161e:	4811      	ldr	r0, [pc, #68]	; (8001664 <DS18B20_Write2+0x88>)
 8001620:	f7ff ff8e 	bl	8001540 <Set_Pin_Input1>
			DelayUS(50);  // wait for 60 us
 8001624:	2032      	movs	r0, #50	; 0x32
 8001626:	f000 fafd 	bl	8001c24 <DelayUS>
 800162a:	e00f      	b.n	800164c <DS18B20_Write2+0x70>
		}

		else  // if the bit is low
		{
			// write 0
			Set_Pin_Output1(airTemp_PORT, airTemp_PIN);
 800162c:	2180      	movs	r1, #128	; 0x80
 800162e:	480d      	ldr	r0, [pc, #52]	; (8001664 <DS18B20_Write2+0x88>)
 8001630:	f7ff ff68 	bl	8001504 <Set_Pin_Output1>
			HAL_GPIO_WritePin (airTemp_PORT, airTemp_PIN, 0);  // pull the pin LOW
 8001634:	2200      	movs	r2, #0
 8001636:	2180      	movs	r1, #128	; 0x80
 8001638:	480a      	ldr	r0, [pc, #40]	; (8001664 <DS18B20_Write2+0x88>)
 800163a:	f002 f91f 	bl	800387c <HAL_GPIO_WritePin>
			DelayUS(50);	// wait for 60 us
 800163e:	2032      	movs	r0, #50	; 0x32
 8001640:	f000 faf0 	bl	8001c24 <DelayUS>
			Set_Pin_Input1(airTemp_PORT, airTemp_PIN);
 8001644:	2180      	movs	r1, #128	; 0x80
 8001646:	4807      	ldr	r0, [pc, #28]	; (8001664 <DS18B20_Write2+0x88>)
 8001648:	f7ff ff7a 	bl	8001540 <Set_Pin_Input1>
	for (int i=0; i<8; i++)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	3301      	adds	r3, #1
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2b07      	cmp	r3, #7
 8001656:	ddcd      	ble.n	80015f4 <DS18B20_Write2+0x18>
		}
	}
}
 8001658:	bf00      	nop
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40020800 	.word	0x40020800

08001668 <DS18B20_Read2>:

uint8_t DS18B20_Read2 (void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
	uint8_t value=0;
 800166e:	2300      	movs	r3, #0
 8001670:	71fb      	strb	r3, [r7, #7]

	Set_Pin_Input1(airTemp_PORT, airTemp_PIN);
 8001672:	2180      	movs	r1, #128	; 0x80
 8001674:	481a      	ldr	r0, [pc, #104]	; (80016e0 <DS18B20_Read2+0x78>)
 8001676:	f7ff ff63 	bl	8001540 <Set_Pin_Input1>

	for (int i=0;i<8;i++)
 800167a:	2300      	movs	r3, #0
 800167c:	603b      	str	r3, [r7, #0]
 800167e:	e026      	b.n	80016ce <DS18B20_Read2+0x66>
	{
		Set_Pin_Output1(airTemp_PORT, airTemp_PIN);  		// set as output
 8001680:	2180      	movs	r1, #128	; 0x80
 8001682:	4817      	ldr	r0, [pc, #92]	; (80016e0 <DS18B20_Read2+0x78>)
 8001684:	f7ff ff3e 	bl	8001504 <Set_Pin_Output1>

		HAL_GPIO_WritePin (airTemp_PORT, airTemp_PIN, 0);  // pull the data pin LOW
 8001688:	2200      	movs	r2, #0
 800168a:	2180      	movs	r1, #128	; 0x80
 800168c:	4814      	ldr	r0, [pc, #80]	; (80016e0 <DS18B20_Read2+0x78>)
 800168e:	f002 f8f5 	bl	800387c <HAL_GPIO_WritePin>
		DelayUS(1);
 8001692:	2001      	movs	r0, #1
 8001694:	f000 fac6 	bl	8001c24 <DelayUS>
		//delay (1);  // wait for > 1us

		Set_Pin_Input1(airTemp_PORT, airTemp_PIN);  			// set as input
 8001698:	2180      	movs	r1, #128	; 0x80
 800169a:	4811      	ldr	r0, [pc, #68]	; (80016e0 <DS18B20_Read2+0x78>)
 800169c:	f7ff ff50 	bl	8001540 <Set_Pin_Input1>
		if (HAL_GPIO_ReadPin (airTemp_PORT, airTemp_PIN))  // if the pin is HIGH
 80016a0:	2180      	movs	r1, #128	; 0x80
 80016a2:	480f      	ldr	r0, [pc, #60]	; (80016e0 <DS18B20_Read2+0x78>)
 80016a4:	f002 f8d2 	bl	800384c <HAL_GPIO_ReadPin>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d009      	beq.n	80016c2 <DS18B20_Read2+0x5a>
		{
			value |= 1<<i;  // read = 1
 80016ae:	2201      	movs	r2, #1
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	b25a      	sxtb	r2, r3
 80016b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016bc:	4313      	orrs	r3, r2
 80016be:	b25b      	sxtb	r3, r3
 80016c0:	71fb      	strb	r3, [r7, #7]
		}
		DelayUS(50); 		// wait for 60 us
 80016c2:	2032      	movs	r0, #50	; 0x32
 80016c4:	f000 faae 	bl	8001c24 <DelayUS>
	for (int i=0;i<8;i++)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	3301      	adds	r3, #1
 80016cc:	603b      	str	r3, [r7, #0]
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	2b07      	cmp	r3, #7
 80016d2:	ddd5      	ble.n	8001680 <DS18B20_Read2+0x18>
	}
	return value;
 80016d4:	79fb      	ldrb	r3, [r7, #7]
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40020800 	.word	0x40020800

080016e4 <airTemp_Task>:


/****************** TASK DEFINITIONS *********************************/

int airTemp_Task ()					// Check Soil Temperature
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
	uint8_t TEMP = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	75fb      	strb	r3, [r7, #23]
	char lcdBuffer[20];

//	while(1)
	{
        DS18B20_Start2();
 80016ee:	f7ff ff45 	bl	800157c <DS18B20_Start2>
        HAL_Delay (1);
 80016f2:	2001      	movs	r0, #1
 80016f4:	f001 fa2a 	bl	8002b4c <HAL_Delay>
	    DS18B20_Write2 (0xCC);  					// skip ROM
 80016f8:	20cc      	movs	r0, #204	; 0xcc
 80016fa:	f7ff ff6f 	bl	80015dc <DS18B20_Write2>
	    DS18B20_Write2 (0x44);  					// convert t
 80016fe:	2044      	movs	r0, #68	; 0x44
 8001700:	f7ff ff6c 	bl	80015dc <DS18B20_Write2>
	    HAL_Delay (800);
 8001704:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001708:	f001 fa20 	bl	8002b4c <HAL_Delay>

	    DS18B20_Start2();
 800170c:	f7ff ff36 	bl	800157c <DS18B20_Start2>
	    HAL_Delay(1);
 8001710:	2001      	movs	r0, #1
 8001712:	f001 fa1b 	bl	8002b4c <HAL_Delay>
	    DS18B20_Write2 (0xCC);  					// skip ROM
 8001716:	20cc      	movs	r0, #204	; 0xcc
 8001718:	f7ff ff60 	bl	80015dc <DS18B20_Write2>
	    DS18B20_Write2 (0xBE);  					// Read Scratch-pad
 800171c:	20be      	movs	r0, #190	; 0xbe
 800171e:	f7ff ff5d 	bl	80015dc <DS18B20_Write2>

	    airTemp_byte1 = DS18B20_Read2();
 8001722:	f7ff ffa1 	bl	8001668 <DS18B20_Read2>
 8001726:	4603      	mov	r3, r0
 8001728:	461a      	mov	r2, r3
 800172a:	4b1d      	ldr	r3, [pc, #116]	; (80017a0 <airTemp_Task+0xbc>)
 800172c:	701a      	strb	r2, [r3, #0]
	    airTemp_byte2 = DS18B20_Read2();
 800172e:	f7ff ff9b 	bl	8001668 <DS18B20_Read2>
 8001732:	4603      	mov	r3, r0
 8001734:	461a      	mov	r2, r3
 8001736:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <airTemp_Task+0xc0>)
 8001738:	701a      	strb	r2, [r3, #0]
	    TEMP = (airTemp_byte2<<8)|airTemp_byte1;
 800173a:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <airTemp_Task+0xc0>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	021b      	lsls	r3, r3, #8
 8001740:	b25a      	sxtb	r2, r3
 8001742:	4b17      	ldr	r3, [pc, #92]	; (80017a0 <airTemp_Task+0xbc>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	b25b      	sxtb	r3, r3
 8001748:	4313      	orrs	r3, r2
 800174a:	b25b      	sxtb	r3, r3
 800174c:	75fb      	strb	r3, [r7, #23]
	    airTemp = TEMP/16;
 800174e:	7dfb      	ldrb	r3, [r7, #23]
 8001750:	091b      	lsrs	r3, r3, #4
 8001752:	b2da      	uxtb	r2, r3
 8001754:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <airTemp_Task+0xc4>)
 8001756:	701a      	strb	r2, [r3, #0]

	    /***** Display on LCD ****/

	    lcd_Clear();
 8001758:	f000 f916 	bl	8001988 <lcd_Clear>
	    lcd_SetCursor(0,0);
 800175c:	2100      	movs	r1, #0
 800175e:	2000      	movs	r0, #0
 8001760:	f000 f928 	bl	80019b4 <lcd_SetCursor>
	    lcd_PrintStr("Air Temperature");
 8001764:	4811      	ldr	r0, [pc, #68]	; (80017ac <airTemp_Task+0xc8>)
 8001766:	f000 f996 	bl	8001a96 <lcd_PrintStr>
	    lcd_SetCursor(0,1);
 800176a:	2101      	movs	r1, #1
 800176c:	2000      	movs	r0, #0
 800176e:	f000 f921 	bl	80019b4 <lcd_SetCursor>
	    sprintf(lcdBuffer,"Value: %d C", airTemp);
 8001772:	4b0d      	ldr	r3, [pc, #52]	; (80017a8 <airTemp_Task+0xc4>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	461a      	mov	r2, r3
 8001778:	463b      	mov	r3, r7
 800177a:	490d      	ldr	r1, [pc, #52]	; (80017b0 <airTemp_Task+0xcc>)
 800177c:	4618      	mov	r0, r3
 800177e:	f004 fcdf 	bl	8006140 <siprintf>
	    lcd_PrintStr(lcdBuffer);
 8001782:	463b      	mov	r3, r7
 8001784:	4618      	mov	r0, r3
 8001786:	f000 f986 	bl	8001a96 <lcd_PrintStr>
	    HAL_Delay(2000);
 800178a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800178e:	f001 f9dd 	bl	8002b4c <HAL_Delay>
	}
	return airTemp;
 8001792:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <airTemp_Task+0xc4>)
 8001794:	781b      	ldrb	r3, [r3, #0]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200000a1 	.word	0x200000a1
 80017a4:	200000a2 	.word	0x200000a2
 80017a8:	200000a0 	.word	0x200000a0
 80017ac:	08006a54 	.word	0x08006a54
 80017b0:	08006a64 	.word	0x08006a64

080017b4 <battery_Task>:
uint8_t voltage = 0;

/****************** TASK DEFINITIONS *********************************/

int battery_Task ()					// Check Battery Level at Node1
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
	char lcdBuffer[20];
//	while(1)
	{
		selectADC2();
 80017ba:	f000 fa7b 	bl	8001cb4 <selectADC2>

		HAL_ADC_Start(&hadc1);
 80017be:	4829      	ldr	r0, [pc, #164]	; (8001864 <battery_Task+0xb0>)
 80017c0:	f001 fa2c 	bl	8002c1c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY);			// Get Soil Moisture Sensor Reading
 80017c4:	f04f 31ff 	mov.w	r1, #4294967295
 80017c8:	4826      	ldr	r0, [pc, #152]	; (8001864 <battery_Task+0xb0>)
 80017ca:	f001 fb0e 	bl	8002dea <HAL_ADC_PollForConversion>
		adcValue2 = HAL_ADC_GetValue(&hadc1);
 80017ce:	4825      	ldr	r0, [pc, #148]	; (8001864 <battery_Task+0xb0>)
 80017d0:	f001 fb96 	bl	8002f00 <HAL_ADC_GetValue>
 80017d4:	ee07 0a90 	vmov	s15, r0
 80017d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017dc:	4b22      	ldr	r3, [pc, #136]	; (8001868 <battery_Task+0xb4>)
 80017de:	edc3 7a00 	vstr	s15, [r3]
		HAL_ADC_Stop(&hadc1);
 80017e2:	4820      	ldr	r0, [pc, #128]	; (8001864 <battery_Task+0xb0>)
 80017e4:	f001 face 	bl	8002d84 <HAL_ADC_Stop>

		/********** LOAD THE DATA ***********/
		voltage = (adcValue2/4095)*16.5;		//for 3.3v systems : 3.3*5  = 16.5
 80017e8:	4b1f      	ldr	r3, [pc, #124]	; (8001868 <battery_Task+0xb4>)
 80017ea:	edd3 7a00 	vldr	s15, [r3]
 80017ee:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800186c <battery_Task+0xb8>
 80017f2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80017f6:	ee16 0a90 	vmov	r0, s13
 80017fa:	f7fe ffcf 	bl	800079c <__aeabi_f2d>
 80017fe:	f04f 0200 	mov.w	r2, #0
 8001802:	4b1b      	ldr	r3, [pc, #108]	; (8001870 <battery_Task+0xbc>)
 8001804:	f7fe fd3c 	bl	8000280 <__aeabi_dmul>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4610      	mov	r0, r2
 800180e:	4619      	mov	r1, r3
 8001810:	f7ff f81c 	bl	800084c <__aeabi_d2uiz>
 8001814:	4603      	mov	r3, r0
 8001816:	b2da      	uxtb	r2, r3
 8001818:	4b16      	ldr	r3, [pc, #88]	; (8001874 <battery_Task+0xc0>)
 800181a:	701a      	strb	r2, [r3, #0]
	//	voltage = (adcValue2/4095)*25;

		/***** Display on LCD ****/

		lcd_Clear();
 800181c:	f000 f8b4 	bl	8001988 <lcd_Clear>
		lcd_SetCursor(0,0);
 8001820:	2100      	movs	r1, #0
 8001822:	2000      	movs	r0, #0
 8001824:	f000 f8c6 	bl	80019b4 <lcd_SetCursor>
		lcd_PrintStr("Battery Voltage");
 8001828:	4813      	ldr	r0, [pc, #76]	; (8001878 <battery_Task+0xc4>)
 800182a:	f000 f934 	bl	8001a96 <lcd_PrintStr>
		lcd_SetCursor(0,1);
 800182e:	2101      	movs	r1, #1
 8001830:	2000      	movs	r0, #0
 8001832:	f000 f8bf 	bl	80019b4 <lcd_SetCursor>
		sprintf(lcdBuffer,"Value: %d V", voltage);
 8001836:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <battery_Task+0xc0>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	461a      	mov	r2, r3
 800183c:	1d3b      	adds	r3, r7, #4
 800183e:	490f      	ldr	r1, [pc, #60]	; (800187c <battery_Task+0xc8>)
 8001840:	4618      	mov	r0, r3
 8001842:	f004 fc7d 	bl	8006140 <siprintf>
		lcd_PrintStr(lcdBuffer);
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	4618      	mov	r0, r3
 800184a:	f000 f924 	bl	8001a96 <lcd_PrintStr>
		HAL_Delay(2000);
 800184e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001852:	f001 f97b 	bl	8002b4c <HAL_Delay>
	}
	return voltage;
 8001856:	4b07      	ldr	r3, [pc, #28]	; (8001874 <battery_Task+0xc0>)
 8001858:	781b      	ldrb	r3, [r3, #0]
}
 800185a:	4618      	mov	r0, r3
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	200000b0 	.word	0x200000b0
 8001868:	200000a4 	.word	0x200000a4
 800186c:	457ff000 	.word	0x457ff000
 8001870:	40308000 	.word	0x40308000
 8001874:	200000a8 	.word	0x200000a8
 8001878:	08006a70 	.word	0x08006a70
 800187c:	08006a80 	.word	0x08006a80

08001880 <lcd_Init>:
        0b00110,
        0b00000
};

void lcd_Init(uint8_t rows)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800188a:	4a38      	ldr	r2, [pc, #224]	; (800196c <lcd_Init+0xec>)
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8001890:	4b37      	ldr	r3, [pc, #220]	; (8001970 <lcd_Init+0xf0>)
 8001892:	2208      	movs	r2, #8
 8001894:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8001896:	4b37      	ldr	r3, [pc, #220]	; (8001974 <lcd_Init+0xf4>)
 8001898:	2200      	movs	r2, #0
 800189a:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 800189c:	4b33      	ldr	r3, [pc, #204]	; (800196c <lcd_Init+0xec>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d907      	bls.n	80018b4 <lcd_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 80018a4:	4b33      	ldr	r3, [pc, #204]	; (8001974 <lcd_Init+0xf4>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	f043 0308 	orr.w	r3, r3, #8
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	4b31      	ldr	r3, [pc, #196]	; (8001974 <lcd_Init+0xf4>)
 80018b0:	701a      	strb	r2, [r3, #0]
 80018b2:	e006      	b.n	80018c2 <lcd_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 80018b4:	4b2f      	ldr	r3, [pc, #188]	; (8001974 <lcd_Init+0xf4>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	f043 0304 	orr.w	r3, r3, #4
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	4b2d      	ldr	r3, [pc, #180]	; (8001974 <lcd_Init+0xf4>)
 80018c0:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 80018c2:	f000 f985 	bl	8001bd0 <DelayInit>
  HAL_Delay(50);
 80018c6:	2032      	movs	r0, #50	; 0x32
 80018c8:	f001 f940 	bl	8002b4c <HAL_Delay>

  ExpanderWrite(dpBacklight);
 80018cc:	4b28      	ldr	r3, [pc, #160]	; (8001970 <lcd_Init+0xf0>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f000 f943 	bl	8001b5c <ExpanderWrite>
  HAL_Delay(1000);
 80018d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018da:	f001 f937 	bl	8002b4c <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80018de:	2030      	movs	r0, #48	; 0x30
 80018e0:	f000 f92b 	bl	8001b3a <Write4Bits>
  DelayUS(4500);
 80018e4:	f241 1094 	movw	r0, #4500	; 0x1194
 80018e8:	f000 f99c 	bl	8001c24 <DelayUS>

  Write4Bits(0x03 << 4);
 80018ec:	2030      	movs	r0, #48	; 0x30
 80018ee:	f000 f924 	bl	8001b3a <Write4Bits>
  DelayUS(4500);
 80018f2:	f241 1094 	movw	r0, #4500	; 0x1194
 80018f6:	f000 f995 	bl	8001c24 <DelayUS>

  Write4Bits(0x03 << 4);
 80018fa:	2030      	movs	r0, #48	; 0x30
 80018fc:	f000 f91d 	bl	8001b3a <Write4Bits>
  DelayUS(4500);
 8001900:	f241 1094 	movw	r0, #4500	; 0x1194
 8001904:	f000 f98e 	bl	8001c24 <DelayUS>

  Write4Bits(0x02 << 4);
 8001908:	2020      	movs	r0, #32
 800190a:	f000 f916 	bl	8001b3a <Write4Bits>
  DelayUS(100);
 800190e:	2064      	movs	r0, #100	; 0x64
 8001910:	f000 f988 	bl	8001c24 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8001914:	4b17      	ldr	r3, [pc, #92]	; (8001974 <lcd_Init+0xf4>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	f043 0320 	orr.w	r3, r3, #32
 800191c:	b2db      	uxtb	r3, r3
 800191e:	4618      	mov	r0, r3
 8001920:	f000 f8ce 	bl	8001ac0 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001924:	4b14      	ldr	r3, [pc, #80]	; (8001978 <lcd_Init+0xf8>)
 8001926:	2204      	movs	r2, #4
 8001928:	701a      	strb	r2, [r3, #0]
  lcd_Display();
 800192a:	f000 f875 	bl	8001a18 <lcd_Display>
  lcd_Clear();
 800192e:	f000 f82b 	bl	8001988 <lcd_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001932:	4b12      	ldr	r3, [pc, #72]	; (800197c <lcd_Init+0xfc>)
 8001934:	2202      	movs	r2, #2
 8001936:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8001938:	4b10      	ldr	r3, [pc, #64]	; (800197c <lcd_Init+0xfc>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	f043 0304 	orr.w	r3, r3, #4
 8001940:	b2db      	uxtb	r3, r3
 8001942:	4618      	mov	r0, r3
 8001944:	f000 f8bc 	bl	8001ac0 <SendCommand>
  DelayUS(4500);
 8001948:	f241 1094 	movw	r0, #4500	; 0x1194
 800194c:	f000 f96a 	bl	8001c24 <DelayUS>

  lcd_CreateSpecialChar(0, special1);
 8001950:	490b      	ldr	r1, [pc, #44]	; (8001980 <lcd_Init+0x100>)
 8001952:	2000      	movs	r0, #0
 8001954:	f000 f876 	bl	8001a44 <lcd_CreateSpecialChar>
  lcd_CreateSpecialChar(1, special2);
 8001958:	490a      	ldr	r1, [pc, #40]	; (8001984 <lcd_Init+0x104>)
 800195a:	2001      	movs	r0, #1
 800195c:	f000 f872 	bl	8001a44 <lcd_CreateSpecialChar>

  lcd_Home();
 8001960:	f000 f81d 	bl	800199e <lcd_Home>
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	200000ac 	.word	0x200000ac
 8001970:	200000ad 	.word	0x200000ad
 8001974:	200000a9 	.word	0x200000a9
 8001978:	200000aa 	.word	0x200000aa
 800197c:	200000ab 	.word	0x200000ab
 8001980:	20000000 	.word	0x20000000
 8001984:	20000008 	.word	0x20000008

08001988 <lcd_Clear>:

void lcd_Clear()
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 800198c:	2001      	movs	r0, #1
 800198e:	f000 f897 	bl	8001ac0 <SendCommand>
  DelayUS(2000);
 8001992:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001996:	f000 f945 	bl	8001c24 <DelayUS>
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}

0800199e <lcd_Home>:

void lcd_Home()
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80019a2:	2002      	movs	r0, #2
 80019a4:	f000 f88c 	bl	8001ac0 <SendCommand>
  DelayUS(2000);
 80019a8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80019ac:	f000 f93a 	bl	8001c24 <DelayUS>
}
 80019b0:	bf00      	nop
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <lcd_SetCursor>:

void lcd_SetCursor(uint8_t col, uint8_t row)
{
 80019b4:	b590      	push	{r4, r7, lr}
 80019b6:	b087      	sub	sp, #28
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	460a      	mov	r2, r1
 80019be:	71fb      	strb	r3, [r7, #7]
 80019c0:	4613      	mov	r3, r2
 80019c2:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80019c4:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <lcd_SetCursor+0x5c>)
 80019c6:	f107 0408 	add.w	r4, r7, #8
 80019ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80019d0:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <lcd_SetCursor+0x60>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	79ba      	ldrb	r2, [r7, #6]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d303      	bcc.n	80019e2 <lcd_SetCursor+0x2e>
  {
    row = dpRows-1;
 80019da:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <lcd_SetCursor+0x60>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	3b01      	subs	r3, #1
 80019e0:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80019e2:	79bb      	ldrb	r3, [r7, #6]
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	3318      	adds	r3, #24
 80019e8:	443b      	add	r3, r7
 80019ea:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	4413      	add	r3, r2
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	b25b      	sxtb	r3, r3
 80019f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019fc:	b25b      	sxtb	r3, r3
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	4618      	mov	r0, r3
 8001a02:	f000 f85d 	bl	8001ac0 <SendCommand>
}
 8001a06:	bf00      	nop
 8001a08:	371c      	adds	r7, #28
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd90      	pop	{r4, r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	08006a8c 	.word	0x08006a8c
 8001a14:	200000ac 	.word	0x200000ac

08001a18 <lcd_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void lcd_Display()
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8001a1c:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <lcd_Display+0x28>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	f043 0304 	orr.w	r3, r3, #4
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <lcd_Display+0x28>)
 8001a28:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8001a2a:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <lcd_Display+0x28>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	f043 0308 	orr.w	r3, r3, #8
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	4618      	mov	r0, r3
 8001a36:	f000 f843 	bl	8001ac0 <SendCommand>
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	200000aa 	.word	0x200000aa

08001a44 <lcd_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void lcd_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	6039      	str	r1, [r7, #0]
 8001a4e:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	b25b      	sxtb	r3, r3
 8001a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a62:	b25b      	sxtb	r3, r3
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	4618      	mov	r0, r3
 8001a68:	f000 f82a 	bl	8001ac0 <SendCommand>
  for (int i=0; i<8; i++)
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	e009      	b.n	8001a86 <lcd_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	4413      	add	r3, r2
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f000 f82e 	bl	8001adc <SendChar>
  for (int i=0; i<8; i++)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	3301      	adds	r3, #1
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2b07      	cmp	r3, #7
 8001a8a:	ddf2      	ble.n	8001a72 <lcd_CreateSpecialChar+0x2e>
  }
}
 8001a8c:	bf00      	nop
 8001a8e:	bf00      	nop
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <lcd_PrintStr>:
{
  lcd_CreateSpecialChar(char_num, rows);
}

void lcd_PrintStr(const char c[])
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8001a9e:	e006      	b.n	8001aae <lcd_PrintStr+0x18>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	607a      	str	r2, [r7, #4]
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f000 f817 	bl	8001adc <SendChar>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f4      	bne.n	8001aa0 <lcd_PrintStr+0xa>
}
 8001ab6:	bf00      	nop
 8001ab8:	bf00      	nop
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f000 f812 	bl	8001af8 <Send>
}
 8001ad4:	bf00      	nop
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <SendChar>:

static void SendChar(uint8_t ch)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	2101      	movs	r1, #1
 8001aea:	4618      	mov	r0, r3
 8001aec:	f000 f804 	bl	8001af8 <Send>
}
 8001af0:	bf00      	nop
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	460a      	mov	r2, r1
 8001b02:	71fb      	strb	r3, [r7, #7]
 8001b04:	4613      	mov	r3, r2
 8001b06:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	f023 030f 	bic.w	r3, r3, #15
 8001b0e:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8001b10:	79fb      	ldrb	r3, [r7, #7]
 8001b12:	011b      	lsls	r3, r3, #4
 8001b14:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8001b16:	7bfa      	ldrb	r2, [r7, #15]
 8001b18:	79bb      	ldrb	r3, [r7, #6]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f000 f80b 	bl	8001b3a <Write4Bits>
  Write4Bits((lownib)|mode);
 8001b24:	7bba      	ldrb	r2, [r7, #14]
 8001b26:	79bb      	ldrb	r3, [r7, #6]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f000 f804 	bl	8001b3a <Write4Bits>
}
 8001b32:	bf00      	nop
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <Write4Bits>:

static void Write4Bits(uint8_t value)
//void Write4Bits(uint8_t value)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b082      	sub	sp, #8
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	4603      	mov	r3, r0
 8001b42:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f000 f808 	bl	8001b5c <ExpanderWrite>
  PulseEnable(value);
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f000 f820 	bl	8001b94 <PulseEnable>
}
 8001b54:	bf00      	nop
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af02      	add	r7, sp, #8
 8001b62:	4603      	mov	r3, r0
 8001b64:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8001b66:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <ExpanderWrite+0x30>)
 8001b68:	781a      	ldrb	r2, [r3, #0]
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8001b72:	f107 020f 	add.w	r2, r7, #15
 8001b76:	230a      	movs	r3, #10
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	214e      	movs	r1, #78	; 0x4e
 8001b7e:	4804      	ldr	r0, [pc, #16]	; (8001b90 <ExpanderWrite+0x34>)
 8001b80:	f001 ffda 	bl	8003b38 <HAL_I2C_Master_Transmit>
}
 8001b84:	bf00      	nop
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	200000ad 	.word	0x200000ad
 8001b90:	200000f8 	.word	0x200000f8

08001b94 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	f043 0304 	orr.w	r3, r3, #4
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff ffd8 	bl	8001b5c <ExpanderWrite>
  DelayUS(20);
 8001bac:	2014      	movs	r0, #20
 8001bae:	f000 f839 	bl	8001c24 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	f023 0304 	bic.w	r3, r3, #4
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff ffce 	bl	8001b5c <ExpanderWrite>
  DelayUS(20);
 8001bc0:	2014      	movs	r0, #20
 8001bc2:	f000 f82f 	bl	8001c24 <DelayUS>
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
	...

08001bd0 <DelayInit>:

static void DelayInit(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001bd4:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <DelayInit+0x4c>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	4a10      	ldr	r2, [pc, #64]	; (8001c1c <DelayInit+0x4c>)
 8001bda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bde:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8001be0:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <DelayInit+0x4c>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	4a0d      	ldr	r2, [pc, #52]	; (8001c1c <DelayInit+0x4c>)
 8001be6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bea:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001bec:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <DelayInit+0x50>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0b      	ldr	r2, [pc, #44]	; (8001c20 <DelayInit+0x50>)
 8001bf2:	f023 0301 	bic.w	r3, r3, #1
 8001bf6:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001bf8:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <DelayInit+0x50>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a08      	ldr	r2, [pc, #32]	; (8001c20 <DelayInit+0x50>)
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <DelayInit+0x50>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8001c0a:	bf00      	nop
  __ASM volatile ("NOP");
 8001c0c:	bf00      	nop
  __ASM volatile ("NOP");
 8001c0e:	bf00      	nop
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	e000edf0 	.word	0xe000edf0
 8001c20:	e0001000 	.word	0xe0001000

08001c24 <DelayUS>:

void DelayUS(uint32_t us) {
 8001c24:	b480      	push	{r7}
 8001c26:	b087      	sub	sp, #28
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8001c2c:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <DelayUS+0x44>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a0e      	ldr	r2, [pc, #56]	; (8001c6c <DelayUS+0x48>)
 8001c32:	fba2 2303 	umull	r2, r3, r2, r3
 8001c36:	0c9a      	lsrs	r2, r3, #18
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	fb02 f303 	mul.w	r3, r2, r3
 8001c3e:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8001c40:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <DelayUS+0x4c>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8001c46:	4b0a      	ldr	r3, [pc, #40]	; (8001c70 <DelayUS+0x4c>)
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d8f6      	bhi.n	8001c46 <DelayUS+0x22>
}
 8001c58:	bf00      	nop
 8001c5a:	bf00      	nop
 8001c5c:	371c      	adds	r7, #28
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	20000010 	.word	0x20000010
 8001c6c:	431bde83 	.word	0x431bde83
 8001c70:	e0001000 	.word	0xe0001000

08001c74 <selectADC1>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/********************** SELECT ADC CHANNELS ********************************************/
void selectADC1()
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
	 ADC_ChannelConfTypeDef sConfig = {0};
 8001c7a:	463b      	mov	r3, r7
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 8001c86:	2301      	movs	r3, #1
 8001c88:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c92:	463b      	mov	r3, r7
 8001c94:	4619      	mov	r1, r3
 8001c96:	4806      	ldr	r0, [pc, #24]	; (8001cb0 <selectADC1+0x3c>)
 8001c98:	f001 f940 	bl	8002f1c <HAL_ADC_ConfigChannel>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <selectADC1+0x32>
	  {
	    Error_Handler();
 8001ca2:	f000 fb1f 	bl	80022e4 <Error_Handler>
	  }
}
 8001ca6:	bf00      	nop
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	200000b0 	.word	0x200000b0

08001cb4 <selectADC2>:

void selectADC2()
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
	 ADC_ChannelConfTypeDef sConfig = {0};
 8001cba:	463b      	mov	r3, r7
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
	 /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_2;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cd2:	463b      	mov	r3, r7
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4806      	ldr	r0, [pc, #24]	; (8001cf0 <selectADC2+0x3c>)
 8001cd8:	f001 f920 	bl	8002f1c <HAL_ADC_ConfigChannel>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <selectADC2+0x32>
	  {
	    Error_Handler();
 8001ce2:	f000 faff 	bl	80022e4 <Error_Handler>
	  }
}
 8001ce6:	bf00      	nop
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	200000b0 	.word	0x200000b0

08001cf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cf4:	b5b0      	push	{r4, r5, r7, lr}
 8001cf6:	b08c      	sub	sp, #48	; 0x30
 8001cf8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cfa:	f000 feb5 	bl	8002a68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cfe:	f000 f8ef 	bl	8001ee0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d02:	f000 fa6b 	bl	80021dc <MX_GPIO_Init>
  MX_ADC1_Init();
 8001d06:	f000 f953 	bl	8001fb0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001d0a:	f000 f989 	bl	8002020 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001d0e:	f000 f9b5 	bl	800207c <MX_SPI1_Init>
  MX_TIM1_Init();
 8001d12:	f000 f9e9 	bl	80020e8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001d16:	f000 fa37 	bl	8002188 <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001d1a:	4863      	ldr	r0, [pc, #396]	; (8001ea8 <main+0x1b4>)
 8001d1c:	f003 fc72 	bl	8005604 <HAL_TIM_Base_Start>
  /**************** LCD INITIALIZATION ************************/
  lcd_Init(2);
 8001d20:	2002      	movs	r0, #2
 8001d22:	f7ff fdad 	bl	8001880 <lcd_Init>
  lcd_Clear();
 8001d26:	f7ff fe2f 	bl	8001988 <lcd_Clear>
  lcd_SetCursor(0,0);
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	2000      	movs	r0, #0
 8001d2e:	f7ff fe41 	bl	80019b4 <lcd_SetCursor>
  lcd_PrintStr("LCD Initializing...");
 8001d32:	485e      	ldr	r0, [pc, #376]	; (8001eac <main+0x1b8>)
 8001d34:	f7ff feaf 	bl	8001a96 <lcd_PrintStr>

  HAL_Delay(1000);
 8001d38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d3c:	f000 ff06 	bl	8002b4c <HAL_Delay>

  /************************************************************/
 // STARTING LORA ************************************************
 // MODULE SETTINGS ----------------------------------------------
	myLoRa = newLoRa();
 8001d40:	4c5b      	ldr	r4, [pc, #364]	; (8001eb0 <main+0x1bc>)
 8001d42:	463b      	mov	r3, r7
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe ff23 	bl	8000b90 <newLoRa>
 8001d4a:	4625      	mov	r5, r4
 8001d4c:	463c      	mov	r4, r7
 8001d4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d56:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001d5a:	e885 0007 	stmia.w	r5, {r0, r1, r2}

	myLoRa.hSPIx                 = &hspi1;
 8001d5e:	4b54      	ldr	r3, [pc, #336]	; (8001eb0 <main+0x1bc>)
 8001d60:	4a54      	ldr	r2, [pc, #336]	; (8001eb4 <main+0x1c0>)
 8001d62:	619a      	str	r2, [r3, #24]
	myLoRa.CS_port               = NSS_GPIO_Port;
 8001d64:	4b52      	ldr	r3, [pc, #328]	; (8001eb0 <main+0x1bc>)
 8001d66:	4a54      	ldr	r2, [pc, #336]	; (8001eb8 <main+0x1c4>)
 8001d68:	601a      	str	r2, [r3, #0]
	myLoRa.CS_pin                = NSS_Pin;
 8001d6a:	4b51      	ldr	r3, [pc, #324]	; (8001eb0 <main+0x1bc>)
 8001d6c:	2240      	movs	r2, #64	; 0x40
 8001d6e:	809a      	strh	r2, [r3, #4]
	myLoRa.reset_port            = RST_GPIO_Port;
 8001d70:	4b4f      	ldr	r3, [pc, #316]	; (8001eb0 <main+0x1bc>)
 8001d72:	4a51      	ldr	r2, [pc, #324]	; (8001eb8 <main+0x1c4>)
 8001d74:	609a      	str	r2, [r3, #8]
	myLoRa.reset_pin             = RST_Pin;
 8001d76:	4b4e      	ldr	r3, [pc, #312]	; (8001eb0 <main+0x1bc>)
 8001d78:	2280      	movs	r2, #128	; 0x80
 8001d7a:	819a      	strh	r2, [r3, #12]
	myLoRa.DIO0_port			 = DIO0_GPIO_Port;
 8001d7c:	4b4c      	ldr	r3, [pc, #304]	; (8001eb0 <main+0x1bc>)
 8001d7e:	4a4f      	ldr	r2, [pc, #316]	; (8001ebc <main+0x1c8>)
 8001d80:	611a      	str	r2, [r3, #16]
	myLoRa.DIO0_pin				 = DIO0_Pin;
 8001d82:	4b4b      	ldr	r3, [pc, #300]	; (8001eb0 <main+0x1bc>)
 8001d84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d88:	829a      	strh	r2, [r3, #20]

	myLoRa.frequency             = 433;							 	// default = 433 MHz
 8001d8a:	4b49      	ldr	r3, [pc, #292]	; (8001eb0 <main+0x1bc>)
 8001d8c:	f240 12b1 	movw	r2, #433	; 0x1b1
 8001d90:	621a      	str	r2, [r3, #32]
	myLoRa.spredingFactor        = SF_7;							// default = SF_7
 8001d92:	4b47      	ldr	r3, [pc, #284]	; (8001eb0 <main+0x1bc>)
 8001d94:	2207      	movs	r2, #7
 8001d96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	myLoRa.bandWidth			 = BW_125KHz;				 		// default = BW_125KHz
 8001d9a:	4b45      	ldr	r3, [pc, #276]	; (8001eb0 <main+0x1bc>)
 8001d9c:	2207      	movs	r2, #7
 8001d9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	myLoRa.crcRate				 = CR_4_5;							// default = CR_4_5
 8001da2:	4b43      	ldr	r3, [pc, #268]	; (8001eb0 <main+0x1bc>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	myLoRa.power				 = POWER_20db;						// default = 20db
 8001daa:	4b41      	ldr	r3, [pc, #260]	; (8001eb0 <main+0x1bc>)
 8001dac:	22ff      	movs	r2, #255	; 0xff
 8001dae:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	myLoRa.overCurrentProtection = 120; 							// default = 100 mA
 8001db2:	4b3f      	ldr	r3, [pc, #252]	; (8001eb0 <main+0x1bc>)
 8001db4:	2278      	movs	r2, #120	; 0x78
 8001db6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	myLoRa.preamble				 = 10;		  						// default = 8;
 8001dba:	4b3d      	ldr	r3, [pc, #244]	; (8001eb0 <main+0x1bc>)
 8001dbc:	220a      	movs	r2, #10
 8001dbe:	851a      	strh	r2, [r3, #40]	; 0x28

	LoRa_reset(&myLoRa);
 8001dc0:	483b      	ldr	r0, [pc, #236]	; (8001eb0 <main+0x1bc>)
 8001dc2:	f7fe ff0e 	bl	8000be2 <LoRa_reset>

	LoRa_init(&myLoRa);
 8001dc6:	483a      	ldr	r0, [pc, #232]	; (8001eb0 <main+0x1bc>)
 8001dc8:	f7ff f9be 	bl	8001148 <LoRa_init>

	// START CONTINUOUS RECEIVING -----------------------------------
	LoRa_startReceiving(&myLoRa);
 8001dcc:	4838      	ldr	r0, [pc, #224]	; (8001eb0 <main+0x1bc>)
 8001dce:	f7ff f9af 	bl	8001130 <LoRa_startReceiving>
//
//	 send_data[14] = 5;
//	 send_data[15] = battery_Task ();
	 // send_data[16] = '@';

	 send_add = 0xBB; 					// MY ADDRESS
 8001dd2:	4b3b      	ldr	r3, [pc, #236]	; (8001ec0 <main+0x1cc>)
 8001dd4:	22bb      	movs	r2, #187	; 0xbb
 8001dd6:	701a      	strb	r2, [r3, #0]
	 soilmoistSensor =  soilMoist_Task ();
 8001dd8:	f000 fa8a 	bl	80022f0 <soilMoist_Task>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	4b38      	ldr	r3, [pc, #224]	; (8001ec4 <main+0x1d0>)
 8001de2:	701a      	strb	r2, [r3, #0]
	 soiltempSensor = soilTemp_Task ();
 8001de4:	f000 fbd8 	bl	8002598 <soilTemp_Task>
 8001de8:	4603      	mov	r3, r0
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	4b36      	ldr	r3, [pc, #216]	; (8001ec8 <main+0x1d4>)
 8001dee:	701a      	strb	r2, [r3, #0]
	 airtempSensor = humidity_Task ();
 8001df0:	f7ff fb34 	bl	800145c <humidity_Task>
 8001df4:	4603      	mov	r3, r0
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	4b34      	ldr	r3, [pc, #208]	; (8001ecc <main+0x1d8>)
 8001dfa:	701a      	strb	r2, [r3, #0]
	 airhumiditySensor = airTemp_Task ();
 8001dfc:	f7ff fc72 	bl	80016e4 <airTemp_Task>
 8001e00:	4603      	mov	r3, r0
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	4b32      	ldr	r3, [pc, #200]	; (8001ed0 <main+0x1dc>)
 8001e06:	701a      	strb	r2, [r3, #0]
	 batterySensor = battery_Task ();
 8001e08:	f7ff fcd4 	bl	80017b4 <battery_Task>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	4b30      	ldr	r3, [pc, #192]	; (8001ed4 <main+0x1e0>)
 8001e12:	701a      	strb	r2, [r3, #0]

	 LoRa_transmit(&myLoRa, &send_add, 1, TRANSMIT_TIMEOUT);
 8001e14:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001e18:	2201      	movs	r2, #1
 8001e1a:	4929      	ldr	r1, [pc, #164]	; (8001ec0 <main+0x1cc>)
 8001e1c:	4824      	ldr	r0, [pc, #144]	; (8001eb0 <main+0x1bc>)
 8001e1e:	f7ff f92f 	bl	8001080 <LoRa_transmit>
	 LoRa_transmit(&myLoRa, &soilmoistSensor, 1, TRANSMIT_TIMEOUT);
 8001e22:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001e26:	2201      	movs	r2, #1
 8001e28:	4926      	ldr	r1, [pc, #152]	; (8001ec4 <main+0x1d0>)
 8001e2a:	4821      	ldr	r0, [pc, #132]	; (8001eb0 <main+0x1bc>)
 8001e2c:	f7ff f928 	bl	8001080 <LoRa_transmit>
	 LoRa_transmit(&myLoRa, &soiltempSensor, 1, TRANSMIT_TIMEOUT);
 8001e30:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001e34:	2201      	movs	r2, #1
 8001e36:	4924      	ldr	r1, [pc, #144]	; (8001ec8 <main+0x1d4>)
 8001e38:	481d      	ldr	r0, [pc, #116]	; (8001eb0 <main+0x1bc>)
 8001e3a:	f7ff f921 	bl	8001080 <LoRa_transmit>
	 LoRa_transmit(&myLoRa, &airtempSensor, 1, TRANSMIT_TIMEOUT);
 8001e3e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001e42:	2201      	movs	r2, #1
 8001e44:	4921      	ldr	r1, [pc, #132]	; (8001ecc <main+0x1d8>)
 8001e46:	481a      	ldr	r0, [pc, #104]	; (8001eb0 <main+0x1bc>)
 8001e48:	f7ff f91a 	bl	8001080 <LoRa_transmit>
	 LoRa_transmit(&myLoRa, &airhumiditySensor, 1, TRANSMIT_TIMEOUT);
 8001e4c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001e50:	2201      	movs	r2, #1
 8001e52:	491f      	ldr	r1, [pc, #124]	; (8001ed0 <main+0x1dc>)
 8001e54:	4816      	ldr	r0, [pc, #88]	; (8001eb0 <main+0x1bc>)
 8001e56:	f7ff f913 	bl	8001080 <LoRa_transmit>
	 LoRa_transmit(&myLoRa, &batterySensor, 1, TRANSMIT_TIMEOUT);
 8001e5a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001e5e:	2201      	movs	r2, #1
 8001e60:	491c      	ldr	r1, [pc, #112]	; (8001ed4 <main+0x1e0>)
 8001e62:	4813      	ldr	r0, [pc, #76]	; (8001eb0 <main+0x1bc>)
 8001e64:	f7ff f90c 	bl	8001080 <LoRa_transmit>

	 lcd_Clear();
 8001e68:	f7ff fd8e 	bl	8001988 <lcd_Clear>
	 lcd_SetCursor(0,0);
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	2000      	movs	r0, #0
 8001e70:	f7ff fda0 	bl	80019b4 <lcd_SetCursor>
	 lcd_PrintStr("Data Transmitted");
 8001e74:	4818      	ldr	r0, [pc, #96]	; (8001ed8 <main+0x1e4>)
 8001e76:	f7ff fe0e 	bl	8001a96 <lcd_PrintStr>

	 HAL_Delay(1500);
 8001e7a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001e7e:	f000 fe65 	bl	8002b4c <HAL_Delay>

	// RECEIVING DATA - - - - - - - - - - - - - - - - - - - - - - - -
			//*********************** SWITCH "ON/OFF" SOLENOID VALVE OF NODE_01.**************************

//	LoRa_receive(&myLoRa, &read_data, sizeof(read_data));   (DEFINED IN USER_4 CODE BELOW)
	if (read_data == 1)
 8001e82:	4b16      	ldr	r3, [pc, #88]	; (8001edc <main+0x1e8>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d106      	bne.n	8001e98 <main+0x1a4>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e90:	480a      	ldr	r0, [pc, #40]	; (8001ebc <main+0x1c8>)
 8001e92:	f001 fcf3 	bl	800387c <HAL_GPIO_WritePin>
 8001e96:	e79c      	b.n	8001dd2 <main+0xde>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e9e:	4807      	ldr	r0, [pc, #28]	; (8001ebc <main+0x1c8>)
 8001ea0:	f001 fcec 	bl	800387c <HAL_GPIO_WritePin>
	 send_add = 0xBB; 					// MY ADDRESS
 8001ea4:	e795      	b.n	8001dd2 <main+0xde>
 8001ea6:	bf00      	nop
 8001ea8:	200001a4 	.word	0x200001a4
 8001eac:	08006a9c 	.word	0x08006a9c
 8001eb0:	20000230 	.word	0x20000230
 8001eb4:	2000014c 	.word	0x2000014c
 8001eb8:	40020400 	.word	0x40020400
 8001ebc:	40020800 	.word	0x40020800
 8001ec0:	2000025d 	.word	0x2000025d
 8001ec4:	2000025f 	.word	0x2000025f
 8001ec8:	2000025e 	.word	0x2000025e
 8001ecc:	20000260 	.word	0x20000260
 8001ed0:	20000261 	.word	0x20000261
 8001ed4:	20000262 	.word	0x20000262
 8001ed8:	08006ab0 	.word	0x08006ab0
 8001edc:	2000025c 	.word	0x2000025c

08001ee0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b094      	sub	sp, #80	; 0x50
 8001ee4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ee6:	f107 0320 	add.w	r3, r7, #32
 8001eea:	2230      	movs	r2, #48	; 0x30
 8001eec:	2100      	movs	r1, #0
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f004 f91e 	bl	8006130 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ef4:	f107 030c 	add.w	r3, r7, #12
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
 8001f02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f04:	2300      	movs	r3, #0
 8001f06:	60bb      	str	r3, [r7, #8]
 8001f08:	4b27      	ldr	r3, [pc, #156]	; (8001fa8 <SystemClock_Config+0xc8>)
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0c:	4a26      	ldr	r2, [pc, #152]	; (8001fa8 <SystemClock_Config+0xc8>)
 8001f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f12:	6413      	str	r3, [r2, #64]	; 0x40
 8001f14:	4b24      	ldr	r3, [pc, #144]	; (8001fa8 <SystemClock_Config+0xc8>)
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1c:	60bb      	str	r3, [r7, #8]
 8001f1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f20:	2300      	movs	r3, #0
 8001f22:	607b      	str	r3, [r7, #4]
 8001f24:	4b21      	ldr	r3, [pc, #132]	; (8001fac <SystemClock_Config+0xcc>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a20      	ldr	r2, [pc, #128]	; (8001fac <SystemClock_Config+0xcc>)
 8001f2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f2e:	6013      	str	r3, [r2, #0]
 8001f30:	4b1e      	ldr	r3, [pc, #120]	; (8001fac <SystemClock_Config+0xcc>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f38:	607b      	str	r3, [r7, #4]
 8001f3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f40:	2301      	movs	r3, #1
 8001f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f44:	2310      	movs	r3, #16
 8001f46:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f50:	2308      	movs	r3, #8
 8001f52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001f54:	2332      	movs	r3, #50	; 0x32
 8001f56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f5c:	2304      	movs	r3, #4
 8001f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f60:	f107 0320 	add.w	r3, r7, #32
 8001f64:	4618      	mov	r0, r3
 8001f66:	f002 f8ef 	bl	8004148 <HAL_RCC_OscConfig>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f70:	f000 f9b8 	bl	80022e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f74:	230f      	movs	r3, #15
 8001f76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f80:	2300      	movs	r3, #0
 8001f82:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f84:	2300      	movs	r3, #0
 8001f86:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001f88:	f107 030c 	add.w	r3, r7, #12
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f002 fb52 	bl	8004638 <HAL_RCC_ClockConfig>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001f9a:	f000 f9a3 	bl	80022e4 <Error_Handler>
  }
}
 8001f9e:	bf00      	nop
 8001fa0:	3750      	adds	r7, #80	; 0x50
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	40007000 	.word	0x40007000

08001fb0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001fb4:	4b17      	ldr	r3, [pc, #92]	; (8002014 <MX_ADC1_Init+0x64>)
 8001fb6:	4a18      	ldr	r2, [pc, #96]	; (8002018 <MX_ADC1_Init+0x68>)
 8001fb8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001fba:	4b16      	ldr	r3, [pc, #88]	; (8002014 <MX_ADC1_Init+0x64>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001fc0:	4b14      	ldr	r3, [pc, #80]	; (8002014 <MX_ADC1_Init+0x64>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001fc6:	4b13      	ldr	r3, [pc, #76]	; (8002014 <MX_ADC1_Init+0x64>)
 8001fc8:	2204      	movs	r2, #4
 8001fca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001fcc:	4b11      	ldr	r3, [pc, #68]	; (8002014 <MX_ADC1_Init+0x64>)
 8001fce:	2204      	movs	r2, #4
 8001fd0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fd2:	4b10      	ldr	r3, [pc, #64]	; (8002014 <MX_ADC1_Init+0x64>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fda:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <MX_ADC1_Init+0x64>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fe0:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <MX_ADC1_Init+0x64>)
 8001fe2:	4a0e      	ldr	r2, [pc, #56]	; (800201c <MX_ADC1_Init+0x6c>)
 8001fe4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fe6:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <MX_ADC1_Init+0x64>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001fec:	4b09      	ldr	r3, [pc, #36]	; (8002014 <MX_ADC1_Init+0x64>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001ff2:	4b08      	ldr	r3, [pc, #32]	; (8002014 <MX_ADC1_Init+0x64>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ffa:	4b06      	ldr	r3, [pc, #24]	; (8002014 <MX_ADC1_Init+0x64>)
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002000:	4804      	ldr	r0, [pc, #16]	; (8002014 <MX_ADC1_Init+0x64>)
 8002002:	f000 fdc7 	bl	8002b94 <HAL_ADC_Init>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_ADC1_Init+0x60>
  {
    Error_Handler();
 800200c:	f000 f96a 	bl	80022e4 <Error_Handler>

    /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002010:	bf00      	nop
 8002012:	bd80      	pop	{r7, pc}
 8002014:	200000b0 	.word	0x200000b0
 8002018:	40012000 	.word	0x40012000
 800201c:	0f000001 	.word	0x0f000001

08002020 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002024:	4b12      	ldr	r3, [pc, #72]	; (8002070 <MX_I2C1_Init+0x50>)
 8002026:	4a13      	ldr	r2, [pc, #76]	; (8002074 <MX_I2C1_Init+0x54>)
 8002028:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800202a:	4b11      	ldr	r3, [pc, #68]	; (8002070 <MX_I2C1_Init+0x50>)
 800202c:	4a12      	ldr	r2, [pc, #72]	; (8002078 <MX_I2C1_Init+0x58>)
 800202e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002030:	4b0f      	ldr	r3, [pc, #60]	; (8002070 <MX_I2C1_Init+0x50>)
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002036:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <MX_I2C1_Init+0x50>)
 8002038:	2200      	movs	r2, #0
 800203a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800203c:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <MX_I2C1_Init+0x50>)
 800203e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002042:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002044:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <MX_I2C1_Init+0x50>)
 8002046:	2200      	movs	r2, #0
 8002048:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800204a:	4b09      	ldr	r3, [pc, #36]	; (8002070 <MX_I2C1_Init+0x50>)
 800204c:	2200      	movs	r2, #0
 800204e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002050:	4b07      	ldr	r3, [pc, #28]	; (8002070 <MX_I2C1_Init+0x50>)
 8002052:	2200      	movs	r2, #0
 8002054:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002056:	4b06      	ldr	r3, [pc, #24]	; (8002070 <MX_I2C1_Init+0x50>)
 8002058:	2200      	movs	r2, #0
 800205a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800205c:	4804      	ldr	r0, [pc, #16]	; (8002070 <MX_I2C1_Init+0x50>)
 800205e:	f001 fc27 	bl	80038b0 <HAL_I2C_Init>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002068:	f000 f93c 	bl	80022e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800206c:	bf00      	nop
 800206e:	bd80      	pop	{r7, pc}
 8002070:	200000f8 	.word	0x200000f8
 8002074:	40005400 	.word	0x40005400
 8002078:	000186a0 	.word	0x000186a0

0800207c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002080:	4b17      	ldr	r3, [pc, #92]	; (80020e0 <MX_SPI1_Init+0x64>)
 8002082:	4a18      	ldr	r2, [pc, #96]	; (80020e4 <MX_SPI1_Init+0x68>)
 8002084:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002086:	4b16      	ldr	r3, [pc, #88]	; (80020e0 <MX_SPI1_Init+0x64>)
 8002088:	f44f 7282 	mov.w	r2, #260	; 0x104
 800208c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800208e:	4b14      	ldr	r3, [pc, #80]	; (80020e0 <MX_SPI1_Init+0x64>)
 8002090:	2200      	movs	r2, #0
 8002092:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002094:	4b12      	ldr	r3, [pc, #72]	; (80020e0 <MX_SPI1_Init+0x64>)
 8002096:	2200      	movs	r2, #0
 8002098:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800209a:	4b11      	ldr	r3, [pc, #68]	; (80020e0 <MX_SPI1_Init+0x64>)
 800209c:	2200      	movs	r2, #0
 800209e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020a0:	4b0f      	ldr	r3, [pc, #60]	; (80020e0 <MX_SPI1_Init+0x64>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80020a6:	4b0e      	ldr	r3, [pc, #56]	; (80020e0 <MX_SPI1_Init+0x64>)
 80020a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80020ae:	4b0c      	ldr	r3, [pc, #48]	; (80020e0 <MX_SPI1_Init+0x64>)
 80020b0:	2210      	movs	r2, #16
 80020b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020b4:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <MX_SPI1_Init+0x64>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80020ba:	4b09      	ldr	r3, [pc, #36]	; (80020e0 <MX_SPI1_Init+0x64>)
 80020bc:	2200      	movs	r2, #0
 80020be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020c0:	4b07      	ldr	r3, [pc, #28]	; (80020e0 <MX_SPI1_Init+0x64>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80020c6:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <MX_SPI1_Init+0x64>)
 80020c8:	220a      	movs	r2, #10
 80020ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80020cc:	4804      	ldr	r0, [pc, #16]	; (80020e0 <MX_SPI1_Init+0x64>)
 80020ce:	f002 fc93 	bl	80049f8 <HAL_SPI_Init>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80020d8:	f000 f904 	bl	80022e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80020dc:	bf00      	nop
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	2000014c 	.word	0x2000014c
 80020e4:	40013000 	.word	0x40013000

080020e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ee:	f107 0308 	add.w	r3, r7, #8
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	605a      	str	r2, [r3, #4]
 80020f8:	609a      	str	r2, [r3, #8]
 80020fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020fc:	463b      	mov	r3, r7
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002104:	4b1e      	ldr	r3, [pc, #120]	; (8002180 <MX_TIM1_Init+0x98>)
 8002106:	4a1f      	ldr	r2, [pc, #124]	; (8002184 <MX_TIM1_Init+0x9c>)
 8002108:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 800210a:	4b1d      	ldr	r3, [pc, #116]	; (8002180 <MX_TIM1_Init+0x98>)
 800210c:	2231      	movs	r2, #49	; 0x31
 800210e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002110:	4b1b      	ldr	r3, [pc, #108]	; (8002180 <MX_TIM1_Init+0x98>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8002116:	4b1a      	ldr	r3, [pc, #104]	; (8002180 <MX_TIM1_Init+0x98>)
 8002118:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800211c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800211e:	4b18      	ldr	r3, [pc, #96]	; (8002180 <MX_TIM1_Init+0x98>)
 8002120:	2200      	movs	r2, #0
 8002122:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002124:	4b16      	ldr	r3, [pc, #88]	; (8002180 <MX_TIM1_Init+0x98>)
 8002126:	2200      	movs	r2, #0
 8002128:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800212a:	4b15      	ldr	r3, [pc, #84]	; (8002180 <MX_TIM1_Init+0x98>)
 800212c:	2200      	movs	r2, #0
 800212e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002130:	4813      	ldr	r0, [pc, #76]	; (8002180 <MX_TIM1_Init+0x98>)
 8002132:	f003 fa17 	bl	8005564 <HAL_TIM_Base_Init>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800213c:	f000 f8d2 	bl	80022e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002140:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002144:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002146:	f107 0308 	add.w	r3, r7, #8
 800214a:	4619      	mov	r1, r3
 800214c:	480c      	ldr	r0, [pc, #48]	; (8002180 <MX_TIM1_Init+0x98>)
 800214e:	f003 fab3 	bl	80056b8 <HAL_TIM_ConfigClockSource>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002158:	f000 f8c4 	bl	80022e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800215c:	2300      	movs	r3, #0
 800215e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002160:	2300      	movs	r3, #0
 8002162:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002164:	463b      	mov	r3, r7
 8002166:	4619      	mov	r1, r3
 8002168:	4805      	ldr	r0, [pc, #20]	; (8002180 <MX_TIM1_Init+0x98>)
 800216a:	f003 fc87 	bl	8005a7c <HAL_TIMEx_MasterConfigSynchronization>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002174:	f000 f8b6 	bl	80022e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002178:	bf00      	nop
 800217a:	3718      	adds	r7, #24
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	200001a4 	.word	0x200001a4
 8002184:	40010000 	.word	0x40010000

08002188 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800218c:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <MX_USART1_UART_Init+0x4c>)
 800218e:	4a12      	ldr	r2, [pc, #72]	; (80021d8 <MX_USART1_UART_Init+0x50>)
 8002190:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002192:	4b10      	ldr	r3, [pc, #64]	; (80021d4 <MX_USART1_UART_Init+0x4c>)
 8002194:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002198:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800219a:	4b0e      	ldr	r3, [pc, #56]	; (80021d4 <MX_USART1_UART_Init+0x4c>)
 800219c:	2200      	movs	r2, #0
 800219e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021a0:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <MX_USART1_UART_Init+0x4c>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021a6:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <MX_USART1_UART_Init+0x4c>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021ac:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <MX_USART1_UART_Init+0x4c>)
 80021ae:	220c      	movs	r2, #12
 80021b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021b2:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <MX_USART1_UART_Init+0x4c>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021b8:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <MX_USART1_UART_Init+0x4c>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021be:	4805      	ldr	r0, [pc, #20]	; (80021d4 <MX_USART1_UART_Init+0x4c>)
 80021c0:	f003 fcca 	bl	8005b58 <HAL_UART_Init>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80021ca:	f000 f88b 	bl	80022e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	200001ec 	.word	0x200001ec
 80021d8:	40011000 	.word	0x40011000

080021dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08a      	sub	sp, #40	; 0x28
 80021e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e2:	f107 0314 	add.w	r3, r7, #20
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	605a      	str	r2, [r3, #4]
 80021ec:	609a      	str	r2, [r3, #8]
 80021ee:	60da      	str	r2, [r3, #12]
 80021f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	613b      	str	r3, [r7, #16]
 80021f6:	4b38      	ldr	r3, [pc, #224]	; (80022d8 <MX_GPIO_Init+0xfc>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	4a37      	ldr	r2, [pc, #220]	; (80022d8 <MX_GPIO_Init+0xfc>)
 80021fc:	f043 0304 	orr.w	r3, r3, #4
 8002200:	6313      	str	r3, [r2, #48]	; 0x30
 8002202:	4b35      	ldr	r3, [pc, #212]	; (80022d8 <MX_GPIO_Init+0xfc>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	f003 0304 	and.w	r3, r3, #4
 800220a:	613b      	str	r3, [r7, #16]
 800220c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	4b31      	ldr	r3, [pc, #196]	; (80022d8 <MX_GPIO_Init+0xfc>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	4a30      	ldr	r2, [pc, #192]	; (80022d8 <MX_GPIO_Init+0xfc>)
 8002218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800221c:	6313      	str	r3, [r2, #48]	; 0x30
 800221e:	4b2e      	ldr	r3, [pc, #184]	; (80022d8 <MX_GPIO_Init+0xfc>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	4b2a      	ldr	r3, [pc, #168]	; (80022d8 <MX_GPIO_Init+0xfc>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	4a29      	ldr	r2, [pc, #164]	; (80022d8 <MX_GPIO_Init+0xfc>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	6313      	str	r3, [r2, #48]	; 0x30
 800223a:	4b27      	ldr	r3, [pc, #156]	; (80022d8 <MX_GPIO_Init+0xfc>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	60bb      	str	r3, [r7, #8]
 8002244:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	607b      	str	r3, [r7, #4]
 800224a:	4b23      	ldr	r3, [pc, #140]	; (80022d8 <MX_GPIO_Init+0xfc>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	4a22      	ldr	r2, [pc, #136]	; (80022d8 <MX_GPIO_Init+0xfc>)
 8002250:	f043 0302 	orr.w	r3, r3, #2
 8002254:	6313      	str	r3, [r2, #48]	; 0x30
 8002256:	4b20      	ldr	r3, [pc, #128]	; (80022d8 <MX_GPIO_Init+0xfc>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	607b      	str	r3, [r7, #4]
 8002260:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Solenoid_Pin|soilTemp_Pin|airTemp_Pin|DHT11_Pin, GPIO_PIN_RESET);
 8002262:	2200      	movs	r2, #0
 8002264:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
 8002268:	481c      	ldr	r0, [pc, #112]	; (80022dc <MX_GPIO_Init+0x100>)
 800226a:	f001 fb07 	bl	800387c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Pin|RST_Pin, GPIO_PIN_SET);
 800226e:	2201      	movs	r2, #1
 8002270:	21c0      	movs	r1, #192	; 0xc0
 8002272:	481b      	ldr	r0, [pc, #108]	; (80022e0 <MX_GPIO_Init+0x104>)
 8002274:	f001 fb02 	bl	800387c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Solenoid_Pin soilTemp_Pin airTemp_Pin DHT11_Pin */
  GPIO_InitStruct.Pin = Solenoid_Pin|soilTemp_Pin|airTemp_Pin|DHT11_Pin;
 8002278:	f44f 5313 	mov.w	r3, #9408	; 0x24c0
 800227c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800227e:	2301      	movs	r3, #1
 8002280:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	2300      	movs	r3, #0
 8002284:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002286:	2300      	movs	r3, #0
 8002288:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800228a:	f107 0314 	add.w	r3, r7, #20
 800228e:	4619      	mov	r1, r3
 8002290:	4812      	ldr	r0, [pc, #72]	; (80022dc <MX_GPIO_Init+0x100>)
 8002292:	f001 f957 	bl	8003544 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8002296:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800229a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800229c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80022a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 80022a6:	f107 0314 	add.w	r3, r7, #20
 80022aa:	4619      	mov	r1, r3
 80022ac:	480b      	ldr	r0, [pc, #44]	; (80022dc <MX_GPIO_Init+0x100>)
 80022ae:	f001 f949 	bl	8003544 <HAL_GPIO_Init>

  /*Configure GPIO pins : NSS_Pin RST_Pin */
  GPIO_InitStruct.Pin = NSS_Pin|RST_Pin;
 80022b2:	23c0      	movs	r3, #192	; 0xc0
 80022b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b6:	2301      	movs	r3, #1
 80022b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022be:	2300      	movs	r3, #0
 80022c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c2:	f107 0314 	add.w	r3, r7, #20
 80022c6:	4619      	mov	r1, r3
 80022c8:	4805      	ldr	r0, [pc, #20]	; (80022e0 <MX_GPIO_Init+0x104>)
 80022ca:	f001 f93b 	bl	8003544 <HAL_GPIO_Init>

}
 80022ce:	bf00      	nop
 80022d0:	3728      	adds	r7, #40	; 0x28
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40023800 	.word	0x40023800
 80022dc:	40020800 	.word	0x40020800
 80022e0:	40020400 	.word	0x40020400

080022e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022e8:	b672      	cpsid	i
}
 80022ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022ec:	e7fe      	b.n	80022ec <Error_Handler+0x8>
	...

080022f0 <soilMoist_Task>:

//Sensor sMoist;
/****************** TASK DEFINITIONS *********************************/

int soilMoist_Task ()					// Check Soil Moisture
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
	char lcdBuffer[20];
	//while(1)
	{
		selectADC1();
 80022f6:	f7ff fcbd 	bl	8001c74 <selectADC1>

		HAL_ADC_Start(&hadc1);
 80022fa:	4827      	ldr	r0, [pc, #156]	; (8002398 <soilMoist_Task+0xa8>)
 80022fc:	f000 fc8e 	bl	8002c1c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY);			// Get Soil Moisture Sensor Reading
 8002300:	f04f 31ff 	mov.w	r1, #4294967295
 8002304:	4824      	ldr	r0, [pc, #144]	; (8002398 <soilMoist_Task+0xa8>)
 8002306:	f000 fd70 	bl	8002dea <HAL_ADC_PollForConversion>
		adcValue1 = HAL_ADC_GetValue(&hadc1);
 800230a:	4823      	ldr	r0, [pc, #140]	; (8002398 <soilMoist_Task+0xa8>)
 800230c:	f000 fdf8 	bl	8002f00 <HAL_ADC_GetValue>
 8002310:	ee07 0a90 	vmov	s15, r0
 8002314:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002318:	4b20      	ldr	r3, [pc, #128]	; (800239c <soilMoist_Task+0xac>)
 800231a:	edc3 7a00 	vstr	s15, [r3]
		HAL_ADC_Stop(&hadc1);
 800231e:	481e      	ldr	r0, [pc, #120]	; (8002398 <soilMoist_Task+0xa8>)
 8002320:	f000 fd30 	bl	8002d84 <HAL_ADC_Stop>

		moisture = 100-(adcValue1/2783)*100;				// Max Value of Sensor without water = 2783
 8002324:	4b1d      	ldr	r3, [pc, #116]	; (800239c <soilMoist_Task+0xac>)
 8002326:	ed93 7a00 	vldr	s14, [r3]
 800232a:	eddf 6a1d 	vldr	s13, [pc, #116]	; 80023a0 <soilMoist_Task+0xb0>
 800232e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002332:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80023a4 <soilMoist_Task+0xb4>
 8002336:	ee67 7a87 	vmul.f32	s15, s15, s14
 800233a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80023a4 <soilMoist_Task+0xb4>
 800233e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002342:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002346:	ee17 2a90 	vmov	r2, s15
 800234a:	4b17      	ldr	r3, [pc, #92]	; (80023a8 <soilMoist_Task+0xb8>)
 800234c:	601a      	str	r2, [r3, #0]

		/***** Display on LCD ****/

		lcd_Clear();
 800234e:	f7ff fb1b 	bl	8001988 <lcd_Clear>
		lcd_SetCursor(0,0);
 8002352:	2100      	movs	r1, #0
 8002354:	2000      	movs	r0, #0
 8002356:	f7ff fb2d 	bl	80019b4 <lcd_SetCursor>

		lcd_PrintStr("Soil Moisture");
 800235a:	4814      	ldr	r0, [pc, #80]	; (80023ac <soilMoist_Task+0xbc>)
 800235c:	f7ff fb9b 	bl	8001a96 <lcd_PrintStr>

		lcd_SetCursor(0,1);
 8002360:	2101      	movs	r1, #1
 8002362:	2000      	movs	r0, #0
 8002364:	f7ff fb26 	bl	80019b4 <lcd_SetCursor>
		sprintf(lcdBuffer,"Value: %d ", moisture);
 8002368:	4b0f      	ldr	r3, [pc, #60]	; (80023a8 <soilMoist_Task+0xb8>)
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	1d3b      	adds	r3, r7, #4
 800236e:	4910      	ldr	r1, [pc, #64]	; (80023b0 <soilMoist_Task+0xc0>)
 8002370:	4618      	mov	r0, r3
 8002372:	f003 fee5 	bl	8006140 <siprintf>
		lcd_PrintStr(lcdBuffer);
 8002376:	1d3b      	adds	r3, r7, #4
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff fb8c 	bl	8001a96 <lcd_PrintStr>
		lcd_PrintStr("%");
 800237e:	480d      	ldr	r0, [pc, #52]	; (80023b4 <soilMoist_Task+0xc4>)
 8002380:	f7ff fb89 	bl	8001a96 <lcd_PrintStr>
		HAL_Delay(2000);
 8002384:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002388:	f000 fbe0 	bl	8002b4c <HAL_Delay>
	}
	return moisture;
 800238c:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <soilMoist_Task+0xb8>)
 800238e:	681b      	ldr	r3, [r3, #0]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3718      	adds	r7, #24
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	200000b0 	.word	0x200000b0
 800239c:	20000268 	.word	0x20000268
 80023a0:	452df000 	.word	0x452df000
 80023a4:	42c80000 	.word	0x42c80000
 80023a8:	20000264 	.word	0x20000264
 80023ac:	08006ac4 	.word	0x08006ac4
 80023b0:	08006ad4 	.word	0x08006ad4
 80023b4:	08006ae0 	.word	0x08006ae0

080023b8 <Set_Pin_Output2>:
uint8_t soil_byte1, soil_byte2;

/*********************** SELECT PINS FOR DS18B20 & DHT ************************************/

void Set_Pin_Output2 (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b088      	sub	sp, #32
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	460b      	mov	r3, r1
 80023c2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c4:	f107 030c 	add.w	r3, r7, #12
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	605a      	str	r2, [r3, #4]
 80023ce:	609a      	str	r2, [r3, #8]
 80023d0:	60da      	str	r2, [r3, #12]
 80023d2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80023d4:	887b      	ldrh	r3, [r7, #2]
 80023d6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023d8:	2301      	movs	r3, #1
 80023da:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023dc:	2300      	movs	r3, #0
 80023de:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80023e0:	f107 030c 	add.w	r3, r7, #12
 80023e4:	4619      	mov	r1, r3
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f001 f8ac 	bl	8003544 <HAL_GPIO_Init>
}
 80023ec:	bf00      	nop
 80023ee:	3720      	adds	r7, #32
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <Set_Pin_Input2>:

void Set_Pin_Input2 (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b088      	sub	sp, #32
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	460b      	mov	r3, r1
 80023fe:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002400:	f107 030c 	add.w	r3, r7, #12
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	605a      	str	r2, [r3, #4]
 800240a:	609a      	str	r2, [r3, #8]
 800240c:	60da      	str	r2, [r3, #12]
 800240e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8002410:	887b      	ldrh	r3, [r7, #2]
 8002412:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002414:	2300      	movs	r3, #0
 8002416:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002418:	2301      	movs	r3, #1
 800241a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800241c:	f107 030c 	add.w	r3, r7, #12
 8002420:	4619      	mov	r1, r3
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f001 f88e 	bl	8003544 <HAL_GPIO_Init>
}
 8002428:	bf00      	nop
 800242a:	3720      	adds	r7, #32
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <DS18B20_Start1>:

/*********************************** DS18B20 FUNCTIONS ****************************************/
uint8_t DS18B20_Start1 (void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8002436:	2300      	movs	r3, #0
 8002438:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output2(soilTemp_PORT, soilTemp_PIN);   // set the pin as output
 800243a:	2140      	movs	r1, #64	; 0x40
 800243c:	4813      	ldr	r0, [pc, #76]	; (800248c <DS18B20_Start1+0x5c>)
 800243e:	f7ff ffbb 	bl	80023b8 <Set_Pin_Output2>
	HAL_GPIO_WritePin (soilTemp_PORT, soilTemp_PIN, 0);  // pull the pin low
 8002442:	2200      	movs	r2, #0
 8002444:	2140      	movs	r1, #64	; 0x40
 8002446:	4811      	ldr	r0, [pc, #68]	; (800248c <DS18B20_Start1+0x5c>)
 8002448:	f001 fa18 	bl	800387c <HAL_GPIO_WritePin>
	DelayUS(480);   // delay according to datasheet
 800244c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8002450:	f7ff fbe8 	bl	8001c24 <DelayUS>

	Set_Pin_Input2(soilTemp_PORT, soilTemp_PIN);    // set the pin as input
 8002454:	2140      	movs	r1, #64	; 0x40
 8002456:	480d      	ldr	r0, [pc, #52]	; (800248c <DS18B20_Start1+0x5c>)
 8002458:	f7ff ffcc 	bl	80023f4 <Set_Pin_Input2>
	DelayUS (80);    // delay according to datasheet
 800245c:	2050      	movs	r0, #80	; 0x50
 800245e:	f7ff fbe1 	bl	8001c24 <DelayUS>

	if (!(HAL_GPIO_ReadPin (soilTemp_PORT, soilTemp_PIN)))
 8002462:	2140      	movs	r1, #64	; 0x40
 8002464:	4809      	ldr	r0, [pc, #36]	; (800248c <DS18B20_Start1+0x5c>)
 8002466:	f001 f9f1 	bl	800384c <HAL_GPIO_ReadPin>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d102      	bne.n	8002476 <DS18B20_Start1+0x46>
		Response = 1;    // if the pin is low i.e the presence pulse is detected
 8002470:	2301      	movs	r3, #1
 8002472:	71fb      	strb	r3, [r7, #7]
 8002474:	e001      	b.n	800247a <DS18B20_Start1+0x4a>
	else Response = -1;
 8002476:	23ff      	movs	r3, #255	; 0xff
 8002478:	71fb      	strb	r3, [r7, #7]

	DelayUS(400); // 480 us delay totally.
 800247a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800247e:	f7ff fbd1 	bl	8001c24 <DelayUS>

	return Response;
 8002482:	79fb      	ldrb	r3, [r7, #7]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40020800 	.word	0x40020800

08002490 <DS18B20_Write1>:

void DS18B20_Write1 (uint8_t data)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output2(soilTemp_PORT, soilTemp_PIN);  // set as output
 800249a:	2140      	movs	r1, #64	; 0x40
 800249c:	481e      	ldr	r0, [pc, #120]	; (8002518 <DS18B20_Write1+0x88>)
 800249e:	f7ff ff8b 	bl	80023b8 <Set_Pin_Output2>

	for (int i=0; i<8; i++)
 80024a2:	2300      	movs	r3, #0
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	e02e      	b.n	8002506 <DS18B20_Write1+0x76>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 80024a8:	79fa      	ldrb	r2, [r7, #7]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	fa42 f303 	asr.w	r3, r2, r3
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d013      	beq.n	80024e0 <DS18B20_Write1+0x50>
		{
			// write 1
			Set_Pin_Output2(soilTemp_PORT, soilTemp_PIN);  // set as output
 80024b8:	2140      	movs	r1, #64	; 0x40
 80024ba:	4817      	ldr	r0, [pc, #92]	; (8002518 <DS18B20_Write1+0x88>)
 80024bc:	f7ff ff7c 	bl	80023b8 <Set_Pin_Output2>
			HAL_GPIO_WritePin (soilTemp_PORT, soilTemp_PIN, 0);  // pull the pin LOW
 80024c0:	2200      	movs	r2, #0
 80024c2:	2140      	movs	r1, #64	; 0x40
 80024c4:	4814      	ldr	r0, [pc, #80]	; (8002518 <DS18B20_Write1+0x88>)
 80024c6:	f001 f9d9 	bl	800387c <HAL_GPIO_WritePin>
			DelayUS(1);  // wait for 1 us
 80024ca:	2001      	movs	r0, #1
 80024cc:	f7ff fbaa 	bl	8001c24 <DelayUS>

			Set_Pin_Input2(soilTemp_PORT, soilTemp_PIN);  // set as input
 80024d0:	2140      	movs	r1, #64	; 0x40
 80024d2:	4811      	ldr	r0, [pc, #68]	; (8002518 <DS18B20_Write1+0x88>)
 80024d4:	f7ff ff8e 	bl	80023f4 <Set_Pin_Input2>
			DelayUS(50);  // wait for 60 us
 80024d8:	2032      	movs	r0, #50	; 0x32
 80024da:	f7ff fba3 	bl	8001c24 <DelayUS>
 80024de:	e00f      	b.n	8002500 <DS18B20_Write1+0x70>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output2(soilTemp_PORT, soilTemp_PIN);
 80024e0:	2140      	movs	r1, #64	; 0x40
 80024e2:	480d      	ldr	r0, [pc, #52]	; (8002518 <DS18B20_Write1+0x88>)
 80024e4:	f7ff ff68 	bl	80023b8 <Set_Pin_Output2>
			HAL_GPIO_WritePin (soilTemp_PORT, soilTemp_PIN, 0);  // pull the pin LOW
 80024e8:	2200      	movs	r2, #0
 80024ea:	2140      	movs	r1, #64	; 0x40
 80024ec:	480a      	ldr	r0, [pc, #40]	; (8002518 <DS18B20_Write1+0x88>)
 80024ee:	f001 f9c5 	bl	800387c <HAL_GPIO_WritePin>
			DelayUS(50);	// wait for 60 us
 80024f2:	2032      	movs	r0, #50	; 0x32
 80024f4:	f7ff fb96 	bl	8001c24 <DelayUS>
			Set_Pin_Input2(soilTemp_PORT, soilTemp_PIN);
 80024f8:	2140      	movs	r1, #64	; 0x40
 80024fa:	4807      	ldr	r0, [pc, #28]	; (8002518 <DS18B20_Write1+0x88>)
 80024fc:	f7ff ff7a 	bl	80023f4 <Set_Pin_Input2>
	for (int i=0; i<8; i++)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	3301      	adds	r3, #1
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2b07      	cmp	r3, #7
 800250a:	ddcd      	ble.n	80024a8 <DS18B20_Write1+0x18>
		}
	}
}
 800250c:	bf00      	nop
 800250e:	bf00      	nop
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40020800 	.word	0x40020800

0800251c <DS18B20_Read1>:

uint8_t DS18B20_Read1 (void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
	uint8_t value=0;
 8002522:	2300      	movs	r3, #0
 8002524:	71fb      	strb	r3, [r7, #7]

	Set_Pin_Input2(soilTemp_PORT, soilTemp_PIN);
 8002526:	2140      	movs	r1, #64	; 0x40
 8002528:	481a      	ldr	r0, [pc, #104]	; (8002594 <DS18B20_Read1+0x78>)
 800252a:	f7ff ff63 	bl	80023f4 <Set_Pin_Input2>

	for (int i=0;i<8;i++)
 800252e:	2300      	movs	r3, #0
 8002530:	603b      	str	r3, [r7, #0]
 8002532:	e026      	b.n	8002582 <DS18B20_Read1+0x66>
	{
		Set_Pin_Output2(soilTemp_PORT, soilTemp_PIN);   // set as output
 8002534:	2140      	movs	r1, #64	; 0x40
 8002536:	4817      	ldr	r0, [pc, #92]	; (8002594 <DS18B20_Read1+0x78>)
 8002538:	f7ff ff3e 	bl	80023b8 <Set_Pin_Output2>

		HAL_GPIO_WritePin (soilTemp_PORT, soilTemp_PIN, 0);  // pull the data pin LOW
 800253c:	2200      	movs	r2, #0
 800253e:	2140      	movs	r1, #64	; 0x40
 8002540:	4814      	ldr	r0, [pc, #80]	; (8002594 <DS18B20_Read1+0x78>)
 8002542:	f001 f99b 	bl	800387c <HAL_GPIO_WritePin>
		DelayUS(1);			// wait for > 1us
 8002546:	2001      	movs	r0, #1
 8002548:	f7ff fb6c 	bl	8001c24 <DelayUS>

		Set_Pin_Input2(soilTemp_PORT, soilTemp_PIN);  // set as input
 800254c:	2140      	movs	r1, #64	; 0x40
 800254e:	4811      	ldr	r0, [pc, #68]	; (8002594 <DS18B20_Read1+0x78>)
 8002550:	f7ff ff50 	bl	80023f4 <Set_Pin_Input2>
		if (HAL_GPIO_ReadPin (soilTemp_PORT, soilTemp_PIN))  // if the pin is HIGH
 8002554:	2140      	movs	r1, #64	; 0x40
 8002556:	480f      	ldr	r0, [pc, #60]	; (8002594 <DS18B20_Read1+0x78>)
 8002558:	f001 f978 	bl	800384c <HAL_GPIO_ReadPin>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d009      	beq.n	8002576 <DS18B20_Read1+0x5a>
		{
			value |= 1<<i;  // read = 1
 8002562:	2201      	movs	r2, #1
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	b25a      	sxtb	r2, r3
 800256c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002570:	4313      	orrs	r3, r2
 8002572:	b25b      	sxtb	r3, r3
 8002574:	71fb      	strb	r3, [r7, #7]
		}
		DelayUS(50);  // wait for 60 us
 8002576:	2032      	movs	r0, #50	; 0x32
 8002578:	f7ff fb54 	bl	8001c24 <DelayUS>
	for (int i=0;i<8;i++)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	3301      	adds	r3, #1
 8002580:	603b      	str	r3, [r7, #0]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	2b07      	cmp	r3, #7
 8002586:	ddd5      	ble.n	8002534 <DS18B20_Read1+0x18>
	}
	return value;
 8002588:	79fb      	ldrb	r3, [r7, #7]
}
 800258a:	4618      	mov	r0, r3
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40020800 	.word	0x40020800

08002598 <soilTemp_Task>:


/****************** TASK DEFINITIONS *********************************/

int soilTemp_Task ()					// Check Soil Temperature
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
	uint16_t TEMP;
	char lcdBuffer[20];
	//while(1)
	{
        DS18B20_Start1();
 800259e:	f7ff ff47 	bl	8002430 <DS18B20_Start1>
        HAL_Delay (1);
 80025a2:	2001      	movs	r0, #1
 80025a4:	f000 fad2 	bl	8002b4c <HAL_Delay>
	    DS18B20_Write1 (0xCC);  					// skip ROM
 80025a8:	20cc      	movs	r0, #204	; 0xcc
 80025aa:	f7ff ff71 	bl	8002490 <DS18B20_Write1>
	    DS18B20_Write1 (0x44);  					// convert t
 80025ae:	2044      	movs	r0, #68	; 0x44
 80025b0:	f7ff ff6e 	bl	8002490 <DS18B20_Write1>
	    HAL_Delay (800);
 80025b4:	f44f 7048 	mov.w	r0, #800	; 0x320
 80025b8:	f000 fac8 	bl	8002b4c <HAL_Delay>

	    DS18B20_Start1();
 80025bc:	f7ff ff38 	bl	8002430 <DS18B20_Start1>
	    HAL_Delay(1);
 80025c0:	2001      	movs	r0, #1
 80025c2:	f000 fac3 	bl	8002b4c <HAL_Delay>
	    DS18B20_Write1 (0xCC);  					// skip ROM
 80025c6:	20cc      	movs	r0, #204	; 0xcc
 80025c8:	f7ff ff62 	bl	8002490 <DS18B20_Write1>
	    DS18B20_Write1 (0xBE);  					// Read Scratch-pad
 80025cc:	20be      	movs	r0, #190	; 0xbe
 80025ce:	f7ff ff5f 	bl	8002490 <DS18B20_Write1>

	    soil_byte1 = DS18B20_Read1();
 80025d2:	f7ff ffa3 	bl	800251c <DS18B20_Read1>
 80025d6:	4603      	mov	r3, r0
 80025d8:	461a      	mov	r2, r3
 80025da:	4b1d      	ldr	r3, [pc, #116]	; (8002650 <soilTemp_Task+0xb8>)
 80025dc:	701a      	strb	r2, [r3, #0]
	    soil_byte2 = DS18B20_Read1();
 80025de:	f7ff ff9d 	bl	800251c <DS18B20_Read1>
 80025e2:	4603      	mov	r3, r0
 80025e4:	461a      	mov	r2, r3
 80025e6:	4b1b      	ldr	r3, [pc, #108]	; (8002654 <soilTemp_Task+0xbc>)
 80025e8:	701a      	strb	r2, [r3, #0]
	    TEMP = (soil_byte2<<8)|soil_byte1;
 80025ea:	4b1a      	ldr	r3, [pc, #104]	; (8002654 <soilTemp_Task+0xbc>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	021b      	lsls	r3, r3, #8
 80025f0:	b21a      	sxth	r2, r3
 80025f2:	4b17      	ldr	r3, [pc, #92]	; (8002650 <soilTemp_Task+0xb8>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	b21b      	sxth	r3, r3
 80025f8:	4313      	orrs	r3, r2
 80025fa:	b21b      	sxth	r3, r3
 80025fc:	82fb      	strh	r3, [r7, #22]
	    //soilTemp = (float)TEMP/16;
	    soilTemp = TEMP/16;
 80025fe:	8afb      	ldrh	r3, [r7, #22]
 8002600:	091b      	lsrs	r3, r3, #4
 8002602:	b29b      	uxth	r3, r3
 8002604:	b2da      	uxtb	r2, r3
 8002606:	4b14      	ldr	r3, [pc, #80]	; (8002658 <soilTemp_Task+0xc0>)
 8002608:	701a      	strb	r2, [r3, #0]

		/***** Display on LCD ****/

		lcd_Clear();
 800260a:	f7ff f9bd 	bl	8001988 <lcd_Clear>
		lcd_SetCursor(0,0);
 800260e:	2100      	movs	r1, #0
 8002610:	2000      	movs	r0, #0
 8002612:	f7ff f9cf 	bl	80019b4 <lcd_SetCursor>

		lcd_PrintStr("Soil Temperature");
 8002616:	4811      	ldr	r0, [pc, #68]	; (800265c <soilTemp_Task+0xc4>)
 8002618:	f7ff fa3d 	bl	8001a96 <lcd_PrintStr>

		lcd_SetCursor(0,1);
 800261c:	2101      	movs	r1, #1
 800261e:	2000      	movs	r0, #0
 8002620:	f7ff f9c8 	bl	80019b4 <lcd_SetCursor>
		sprintf(lcdBuffer,"Value: %d C", soilTemp);
 8002624:	4b0c      	ldr	r3, [pc, #48]	; (8002658 <soilTemp_Task+0xc0>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	461a      	mov	r2, r3
 800262a:	463b      	mov	r3, r7
 800262c:	490c      	ldr	r1, [pc, #48]	; (8002660 <soilTemp_Task+0xc8>)
 800262e:	4618      	mov	r0, r3
 8002630:	f003 fd86 	bl	8006140 <siprintf>
		lcd_PrintStr(lcdBuffer);
 8002634:	463b      	mov	r3, r7
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff fa2d 	bl	8001a96 <lcd_PrintStr>
		HAL_Delay(2000);
 800263c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002640:	f000 fa84 	bl	8002b4c <HAL_Delay>
	}
 return soilTemp;
 8002644:	4b04      	ldr	r3, [pc, #16]	; (8002658 <soilTemp_Task+0xc0>)
 8002646:	781b      	ldrb	r3, [r3, #0]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3718      	adds	r7, #24
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	2000026d 	.word	0x2000026d
 8002654:	2000026e 	.word	0x2000026e
 8002658:	2000026c 	.word	0x2000026c
 800265c:	08006ae4 	.word	0x08006ae4
 8002660:	08006af8 	.word	0x08006af8

08002664 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	607b      	str	r3, [r7, #4]
 800266e:	4b10      	ldr	r3, [pc, #64]	; (80026b0 <HAL_MspInit+0x4c>)
 8002670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002672:	4a0f      	ldr	r2, [pc, #60]	; (80026b0 <HAL_MspInit+0x4c>)
 8002674:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002678:	6453      	str	r3, [r2, #68]	; 0x44
 800267a:	4b0d      	ldr	r3, [pc, #52]	; (80026b0 <HAL_MspInit+0x4c>)
 800267c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002682:	607b      	str	r3, [r7, #4]
 8002684:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	603b      	str	r3, [r7, #0]
 800268a:	4b09      	ldr	r3, [pc, #36]	; (80026b0 <HAL_MspInit+0x4c>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	4a08      	ldr	r2, [pc, #32]	; (80026b0 <HAL_MspInit+0x4c>)
 8002690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002694:	6413      	str	r3, [r2, #64]	; 0x40
 8002696:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <HAL_MspInit+0x4c>)
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269e:	603b      	str	r3, [r7, #0]
 80026a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	40023800 	.word	0x40023800

080026b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b08a      	sub	sp, #40	; 0x28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026bc:	f107 0314 	add.w	r3, r7, #20
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	605a      	str	r2, [r3, #4]
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	60da      	str	r2, [r3, #12]
 80026ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a17      	ldr	r2, [pc, #92]	; (8002730 <HAL_ADC_MspInit+0x7c>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d127      	bne.n	8002726 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	613b      	str	r3, [r7, #16]
 80026da:	4b16      	ldr	r3, [pc, #88]	; (8002734 <HAL_ADC_MspInit+0x80>)
 80026dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026de:	4a15      	ldr	r2, [pc, #84]	; (8002734 <HAL_ADC_MspInit+0x80>)
 80026e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e4:	6453      	str	r3, [r2, #68]	; 0x44
 80026e6:	4b13      	ldr	r3, [pc, #76]	; (8002734 <HAL_ADC_MspInit+0x80>)
 80026e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ee:	613b      	str	r3, [r7, #16]
 80026f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	4b0f      	ldr	r3, [pc, #60]	; (8002734 <HAL_ADC_MspInit+0x80>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	4a0e      	ldr	r2, [pc, #56]	; (8002734 <HAL_ADC_MspInit+0x80>)
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	6313      	str	r3, [r2, #48]	; 0x30
 8002702:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <HAL_ADC_MspInit+0x80>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = SoilMoisture_Pin|BatteryVol_Pin;
 800270e:	2306      	movs	r3, #6
 8002710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002712:	2303      	movs	r3, #3
 8002714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002716:	2300      	movs	r3, #0
 8002718:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800271a:	f107 0314 	add.w	r3, r7, #20
 800271e:	4619      	mov	r1, r3
 8002720:	4805      	ldr	r0, [pc, #20]	; (8002738 <HAL_ADC_MspInit+0x84>)
 8002722:	f000 ff0f 	bl	8003544 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002726:	bf00      	nop
 8002728:	3728      	adds	r7, #40	; 0x28
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40012000 	.word	0x40012000
 8002734:	40023800 	.word	0x40023800
 8002738:	40020000 	.word	0x40020000

0800273c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b08a      	sub	sp, #40	; 0x28
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002744:	f107 0314 	add.w	r3, r7, #20
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	605a      	str	r2, [r3, #4]
 800274e:	609a      	str	r2, [r3, #8]
 8002750:	60da      	str	r2, [r3, #12]
 8002752:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a19      	ldr	r2, [pc, #100]	; (80027c0 <HAL_I2C_MspInit+0x84>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d12c      	bne.n	80027b8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	613b      	str	r3, [r7, #16]
 8002762:	4b18      	ldr	r3, [pc, #96]	; (80027c4 <HAL_I2C_MspInit+0x88>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	4a17      	ldr	r2, [pc, #92]	; (80027c4 <HAL_I2C_MspInit+0x88>)
 8002768:	f043 0302 	orr.w	r3, r3, #2
 800276c:	6313      	str	r3, [r2, #48]	; 0x30
 800276e:	4b15      	ldr	r3, [pc, #84]	; (80027c4 <HAL_I2C_MspInit+0x88>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	613b      	str	r3, [r7, #16]
 8002778:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800277a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800277e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002780:	2312      	movs	r3, #18
 8002782:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002784:	2300      	movs	r3, #0
 8002786:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002788:	2303      	movs	r3, #3
 800278a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800278c:	2304      	movs	r3, #4
 800278e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002790:	f107 0314 	add.w	r3, r7, #20
 8002794:	4619      	mov	r1, r3
 8002796:	480c      	ldr	r0, [pc, #48]	; (80027c8 <HAL_I2C_MspInit+0x8c>)
 8002798:	f000 fed4 	bl	8003544 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800279c:	2300      	movs	r3, #0
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	4b08      	ldr	r3, [pc, #32]	; (80027c4 <HAL_I2C_MspInit+0x88>)
 80027a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a4:	4a07      	ldr	r2, [pc, #28]	; (80027c4 <HAL_I2C_MspInit+0x88>)
 80027a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027aa:	6413      	str	r3, [r2, #64]	; 0x40
 80027ac:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <HAL_I2C_MspInit+0x88>)
 80027ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80027b8:	bf00      	nop
 80027ba:	3728      	adds	r7, #40	; 0x28
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40005400 	.word	0x40005400
 80027c4:	40023800 	.word	0x40023800
 80027c8:	40020400 	.word	0x40020400

080027cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b08a      	sub	sp, #40	; 0x28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d4:	f107 0314 	add.w	r3, r7, #20
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	605a      	str	r2, [r3, #4]
 80027de:	609a      	str	r2, [r3, #8]
 80027e0:	60da      	str	r2, [r3, #12]
 80027e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a19      	ldr	r2, [pc, #100]	; (8002850 <HAL_SPI_MspInit+0x84>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d12b      	bne.n	8002846 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80027ee:	2300      	movs	r3, #0
 80027f0:	613b      	str	r3, [r7, #16]
 80027f2:	4b18      	ldr	r3, [pc, #96]	; (8002854 <HAL_SPI_MspInit+0x88>)
 80027f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f6:	4a17      	ldr	r2, [pc, #92]	; (8002854 <HAL_SPI_MspInit+0x88>)
 80027f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027fc:	6453      	str	r3, [r2, #68]	; 0x44
 80027fe:	4b15      	ldr	r3, [pc, #84]	; (8002854 <HAL_SPI_MspInit+0x88>)
 8002800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002802:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002806:	613b      	str	r3, [r7, #16]
 8002808:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800280a:	2300      	movs	r3, #0
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	4b11      	ldr	r3, [pc, #68]	; (8002854 <HAL_SPI_MspInit+0x88>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	4a10      	ldr	r2, [pc, #64]	; (8002854 <HAL_SPI_MspInit+0x88>)
 8002814:	f043 0301 	orr.w	r3, r3, #1
 8002818:	6313      	str	r3, [r2, #48]	; 0x30
 800281a:	4b0e      	ldr	r3, [pc, #56]	; (8002854 <HAL_SPI_MspInit+0x88>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002826:	23e0      	movs	r3, #224	; 0xe0
 8002828:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282a:	2302      	movs	r3, #2
 800282c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282e:	2300      	movs	r3, #0
 8002830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002832:	2303      	movs	r3, #3
 8002834:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002836:	2305      	movs	r3, #5
 8002838:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800283a:	f107 0314 	add.w	r3, r7, #20
 800283e:	4619      	mov	r1, r3
 8002840:	4805      	ldr	r0, [pc, #20]	; (8002858 <HAL_SPI_MspInit+0x8c>)
 8002842:	f000 fe7f 	bl	8003544 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002846:	bf00      	nop
 8002848:	3728      	adds	r7, #40	; 0x28
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40013000 	.word	0x40013000
 8002854:	40023800 	.word	0x40023800
 8002858:	40020000 	.word	0x40020000

0800285c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a0b      	ldr	r2, [pc, #44]	; (8002898 <HAL_TIM_Base_MspInit+0x3c>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d10d      	bne.n	800288a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	4b0a      	ldr	r3, [pc, #40]	; (800289c <HAL_TIM_Base_MspInit+0x40>)
 8002874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002876:	4a09      	ldr	r2, [pc, #36]	; (800289c <HAL_TIM_Base_MspInit+0x40>)
 8002878:	f043 0301 	orr.w	r3, r3, #1
 800287c:	6453      	str	r3, [r2, #68]	; 0x44
 800287e:	4b07      	ldr	r3, [pc, #28]	; (800289c <HAL_TIM_Base_MspInit+0x40>)
 8002880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800288a:	bf00      	nop
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	40010000 	.word	0x40010000
 800289c:	40023800 	.word	0x40023800

080028a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b08a      	sub	sp, #40	; 0x28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a8:	f107 0314 	add.w	r3, r7, #20
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]
 80028b0:	605a      	str	r2, [r3, #4]
 80028b2:	609a      	str	r2, [r3, #8]
 80028b4:	60da      	str	r2, [r3, #12]
 80028b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a19      	ldr	r2, [pc, #100]	; (8002924 <HAL_UART_MspInit+0x84>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d12c      	bne.n	800291c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028c2:	2300      	movs	r3, #0
 80028c4:	613b      	str	r3, [r7, #16]
 80028c6:	4b18      	ldr	r3, [pc, #96]	; (8002928 <HAL_UART_MspInit+0x88>)
 80028c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ca:	4a17      	ldr	r2, [pc, #92]	; (8002928 <HAL_UART_MspInit+0x88>)
 80028cc:	f043 0310 	orr.w	r3, r3, #16
 80028d0:	6453      	str	r3, [r2, #68]	; 0x44
 80028d2:	4b15      	ldr	r3, [pc, #84]	; (8002928 <HAL_UART_MspInit+0x88>)
 80028d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d6:	f003 0310 	and.w	r3, r3, #16
 80028da:	613b      	str	r3, [r7, #16]
 80028dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	60fb      	str	r3, [r7, #12]
 80028e2:	4b11      	ldr	r3, [pc, #68]	; (8002928 <HAL_UART_MspInit+0x88>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	4a10      	ldr	r2, [pc, #64]	; (8002928 <HAL_UART_MspInit+0x88>)
 80028e8:	f043 0301 	orr.w	r3, r3, #1
 80028ec:	6313      	str	r3, [r2, #48]	; 0x30
 80028ee:	4b0e      	ldr	r3, [pc, #56]	; (8002928 <HAL_UART_MspInit+0x88>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80028fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80028fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002900:	2302      	movs	r3, #2
 8002902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002904:	2300      	movs	r3, #0
 8002906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002908:	2303      	movs	r3, #3
 800290a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800290c:	2307      	movs	r3, #7
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002910:	f107 0314 	add.w	r3, r7, #20
 8002914:	4619      	mov	r1, r3
 8002916:	4805      	ldr	r0, [pc, #20]	; (800292c <HAL_UART_MspInit+0x8c>)
 8002918:	f000 fe14 	bl	8003544 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800291c:	bf00      	nop
 800291e:	3728      	adds	r7, #40	; 0x28
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40011000 	.word	0x40011000
 8002928:	40023800 	.word	0x40023800
 800292c:	40020000 	.word	0x40020000

08002930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002934:	e7fe      	b.n	8002934 <NMI_Handler+0x4>

08002936 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002936:	b480      	push	{r7}
 8002938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800293a:	e7fe      	b.n	800293a <HardFault_Handler+0x4>

0800293c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002940:	e7fe      	b.n	8002940 <MemManage_Handler+0x4>

08002942 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002942:	b480      	push	{r7}
 8002944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002946:	e7fe      	b.n	8002946 <BusFault_Handler+0x4>

08002948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800294c:	e7fe      	b.n	800294c <UsageFault_Handler+0x4>

0800294e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800294e:	b480      	push	{r7}
 8002950:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002952:	bf00      	nop
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002960:	bf00      	nop
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800296a:	b480      	push	{r7}
 800296c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800296e:	bf00      	nop
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800297c:	f000 f8c6 	bl	8002b0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002980:	bf00      	nop
 8002982:	bd80      	pop	{r7, pc}

08002984 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800298c:	4a14      	ldr	r2, [pc, #80]	; (80029e0 <_sbrk+0x5c>)
 800298e:	4b15      	ldr	r3, [pc, #84]	; (80029e4 <_sbrk+0x60>)
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002998:	4b13      	ldr	r3, [pc, #76]	; (80029e8 <_sbrk+0x64>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d102      	bne.n	80029a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029a0:	4b11      	ldr	r3, [pc, #68]	; (80029e8 <_sbrk+0x64>)
 80029a2:	4a12      	ldr	r2, [pc, #72]	; (80029ec <_sbrk+0x68>)
 80029a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029a6:	4b10      	ldr	r3, [pc, #64]	; (80029e8 <_sbrk+0x64>)
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4413      	add	r3, r2
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d207      	bcs.n	80029c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029b4:	f003 fb92 	bl	80060dc <__errno>
 80029b8:	4603      	mov	r3, r0
 80029ba:	220c      	movs	r2, #12
 80029bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029be:	f04f 33ff 	mov.w	r3, #4294967295
 80029c2:	e009      	b.n	80029d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029c4:	4b08      	ldr	r3, [pc, #32]	; (80029e8 <_sbrk+0x64>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029ca:	4b07      	ldr	r3, [pc, #28]	; (80029e8 <_sbrk+0x64>)
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4413      	add	r3, r2
 80029d2:	4a05      	ldr	r2, [pc, #20]	; (80029e8 <_sbrk+0x64>)
 80029d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029d6:	68fb      	ldr	r3, [r7, #12]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	20020000 	.word	0x20020000
 80029e4:	00000400 	.word	0x00000400
 80029e8:	20000270 	.word	0x20000270
 80029ec:	20000288 	.word	0x20000288

080029f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029f4:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <SystemInit+0x20>)
 80029f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fa:	4a05      	ldr	r2, [pc, #20]	; (8002a10 <SystemInit+0x20>)
 80029fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a04:	bf00      	nop
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	e000ed00 	.word	0xe000ed00

08002a14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a18:	480d      	ldr	r0, [pc, #52]	; (8002a50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a1a:	490e      	ldr	r1, [pc, #56]	; (8002a54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a1c:	4a0e      	ldr	r2, [pc, #56]	; (8002a58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a20:	e002      	b.n	8002a28 <LoopCopyDataInit>

08002a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a26:	3304      	adds	r3, #4

08002a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a2c:	d3f9      	bcc.n	8002a22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a2e:	4a0b      	ldr	r2, [pc, #44]	; (8002a5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a30:	4c0b      	ldr	r4, [pc, #44]	; (8002a60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a34:	e001      	b.n	8002a3a <LoopFillZerobss>

08002a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a38:	3204      	adds	r2, #4

08002a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a3c:	d3fb      	bcc.n	8002a36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a3e:	f7ff ffd7 	bl	80029f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a42:	f003 fb51 	bl	80060e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a46:	f7ff f955 	bl	8001cf4 <main>
  bx  lr    
 8002a4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a54:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002a58:	08006b60 	.word	0x08006b60
  ldr r2, =_sbss
 8002a5c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002a60:	20000288 	.word	0x20000288

08002a64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a64:	e7fe      	b.n	8002a64 <ADC_IRQHandler>
	...

08002a68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a6c:	4b0e      	ldr	r3, [pc, #56]	; (8002aa8 <HAL_Init+0x40>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a0d      	ldr	r2, [pc, #52]	; (8002aa8 <HAL_Init+0x40>)
 8002a72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a78:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <HAL_Init+0x40>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a0a      	ldr	r2, [pc, #40]	; (8002aa8 <HAL_Init+0x40>)
 8002a7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a84:	4b08      	ldr	r3, [pc, #32]	; (8002aa8 <HAL_Init+0x40>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a07      	ldr	r2, [pc, #28]	; (8002aa8 <HAL_Init+0x40>)
 8002a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a90:	2003      	movs	r0, #3
 8002a92:	f000 fd23 	bl	80034dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a96:	200f      	movs	r0, #15
 8002a98:	f000 f808 	bl	8002aac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a9c:	f7ff fde2 	bl	8002664 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40023c00 	.word	0x40023c00

08002aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ab4:	4b12      	ldr	r3, [pc, #72]	; (8002b00 <HAL_InitTick+0x54>)
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	4b12      	ldr	r3, [pc, #72]	; (8002b04 <HAL_InitTick+0x58>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	4619      	mov	r1, r3
 8002abe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ac2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 fd2d 	bl	800352a <HAL_SYSTICK_Config>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e00e      	b.n	8002af8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b0f      	cmp	r3, #15
 8002ade:	d80a      	bhi.n	8002af6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae8:	f000 fd03 	bl	80034f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002aec:	4a06      	ldr	r2, [pc, #24]	; (8002b08 <HAL_InitTick+0x5c>)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
 8002af4:	e000      	b.n	8002af8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3708      	adds	r7, #8
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	20000010 	.word	0x20000010
 8002b04:	20000018 	.word	0x20000018
 8002b08:	20000014 	.word	0x20000014

08002b0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b10:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <HAL_IncTick+0x20>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	461a      	mov	r2, r3
 8002b16:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <HAL_IncTick+0x24>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	4a04      	ldr	r2, [pc, #16]	; (8002b30 <HAL_IncTick+0x24>)
 8002b1e:	6013      	str	r3, [r2, #0]
}
 8002b20:	bf00      	nop
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	20000018 	.word	0x20000018
 8002b30:	20000274 	.word	0x20000274

08002b34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  return uwTick;
 8002b38:	4b03      	ldr	r3, [pc, #12]	; (8002b48 <HAL_GetTick+0x14>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	20000274 	.word	0x20000274

08002b4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b54:	f7ff ffee 	bl	8002b34 <HAL_GetTick>
 8002b58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b64:	d005      	beq.n	8002b72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b66:	4b0a      	ldr	r3, [pc, #40]	; (8002b90 <HAL_Delay+0x44>)
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4413      	add	r3, r2
 8002b70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b72:	bf00      	nop
 8002b74:	f7ff ffde 	bl	8002b34 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d8f7      	bhi.n	8002b74 <HAL_Delay+0x28>
  {
  }
}
 8002b84:	bf00      	nop
 8002b86:	bf00      	nop
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	20000018 	.word	0x20000018

08002b94 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e033      	b.n	8002c12 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d109      	bne.n	8002bc6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7ff fd7e 	bl	80026b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	f003 0310 	and.w	r3, r3, #16
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d118      	bne.n	8002c04 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002bda:	f023 0302 	bic.w	r3, r3, #2
 8002bde:	f043 0202 	orr.w	r2, r3, #2
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 faca 	bl	8003180 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	f023 0303 	bic.w	r3, r3, #3
 8002bfa:	f043 0201 	orr.w	r2, r3, #1
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	641a      	str	r2, [r3, #64]	; 0x40
 8002c02:	e001      	b.n	8002c08 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
	...

08002c1c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <HAL_ADC_Start+0x1a>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e097      	b.n	8002d66 <HAL_ADC_Start+0x14a>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d018      	beq.n	8002c7e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f042 0201 	orr.w	r2, r2, #1
 8002c5a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c5c:	4b45      	ldr	r3, [pc, #276]	; (8002d74 <HAL_ADC_Start+0x158>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a45      	ldr	r2, [pc, #276]	; (8002d78 <HAL_ADC_Start+0x15c>)
 8002c62:	fba2 2303 	umull	r2, r3, r2, r3
 8002c66:	0c9a      	lsrs	r2, r3, #18
 8002c68:	4613      	mov	r3, r2
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	4413      	add	r3, r2
 8002c6e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002c70:	e002      	b.n	8002c78 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	3b01      	subs	r3, #1
 8002c76:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1f9      	bne.n	8002c72 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d15f      	bne.n	8002d4c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c90:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002c94:	f023 0301 	bic.w	r3, r3, #1
 8002c98:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d007      	beq.n	8002cbe <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002cb6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cca:	d106      	bne.n	8002cda <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd0:	f023 0206 	bic.w	r2, r3, #6
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	645a      	str	r2, [r3, #68]	; 0x44
 8002cd8:	e002      	b.n	8002ce0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ce8:	4b24      	ldr	r3, [pc, #144]	; (8002d7c <HAL_ADC_Start+0x160>)
 8002cea:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002cf4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f003 031f 	and.w	r3, r3, #31
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10f      	bne.n	8002d22 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d129      	bne.n	8002d64 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689a      	ldr	r2, [r3, #8]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d1e:	609a      	str	r2, [r3, #8]
 8002d20:	e020      	b.n	8002d64 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a16      	ldr	r2, [pc, #88]	; (8002d80 <HAL_ADC_Start+0x164>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d11b      	bne.n	8002d64 <HAL_ADC_Start+0x148>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d114      	bne.n	8002d64 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d48:	609a      	str	r2, [r3, #8]
 8002d4a:	e00b      	b.n	8002d64 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d50:	f043 0210 	orr.w	r2, r3, #16
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5c:	f043 0201 	orr.w	r2, r3, #1
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3714      	adds	r7, #20
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	20000010 	.word	0x20000010
 8002d78:	431bde83 	.word	0x431bde83
 8002d7c:	40012300 	.word	0x40012300
 8002d80:	40012000 	.word	0x40012000

08002d84 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d101      	bne.n	8002d9a <HAL_ADC_Stop+0x16>
 8002d96:	2302      	movs	r3, #2
 8002d98:	e021      	b.n	8002dde <HAL_ADC_Stop+0x5a>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 0201 	bic.w	r2, r2, #1
 8002db0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d109      	bne.n	8002dd4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002dc8:	f023 0301 	bic.w	r3, r3, #1
 8002dcc:	f043 0201 	orr.w	r2, r3, #1
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b084      	sub	sp, #16
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
 8002df2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002df4:	2300      	movs	r3, #0
 8002df6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e06:	d113      	bne.n	8002e30 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002e12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e16:	d10b      	bne.n	8002e30 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1c:	f043 0220 	orr.w	r2, r3, #32
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e063      	b.n	8002ef8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002e30:	f7ff fe80 	bl	8002b34 <HAL_GetTick>
 8002e34:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e36:	e021      	b.n	8002e7c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e3e:	d01d      	beq.n	8002e7c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d007      	beq.n	8002e56 <HAL_ADC_PollForConversion+0x6c>
 8002e46:	f7ff fe75 	bl	8002b34 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d212      	bcs.n	8002e7c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d00b      	beq.n	8002e7c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e68:	f043 0204 	orr.w	r2, r3, #4
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e03d      	b.n	8002ef8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d1d6      	bne.n	8002e38 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f06f 0212 	mvn.w	r2, #18
 8002e92:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e98:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d123      	bne.n	8002ef6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d11f      	bne.n	8002ef6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d006      	beq.n	8002ed2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d111      	bne.n	8002ef6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d105      	bne.n	8002ef6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	f043 0201 	orr.w	r2, r3, #1
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
	...

08002f1c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002f26:	2300      	movs	r3, #0
 8002f28:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d101      	bne.n	8002f38 <HAL_ADC_ConfigChannel+0x1c>
 8002f34:	2302      	movs	r3, #2
 8002f36:	e113      	b.n	8003160 <HAL_ADC_ConfigChannel+0x244>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2b09      	cmp	r3, #9
 8002f46:	d925      	bls.n	8002f94 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68d9      	ldr	r1, [r3, #12]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	461a      	mov	r2, r3
 8002f56:	4613      	mov	r3, r2
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	4413      	add	r3, r2
 8002f5c:	3b1e      	subs	r3, #30
 8002f5e:	2207      	movs	r2, #7
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	43da      	mvns	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	400a      	ands	r2, r1
 8002f6c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68d9      	ldr	r1, [r3, #12]
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	4618      	mov	r0, r3
 8002f80:	4603      	mov	r3, r0
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	4403      	add	r3, r0
 8002f86:	3b1e      	subs	r3, #30
 8002f88:	409a      	lsls	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	60da      	str	r2, [r3, #12]
 8002f92:	e022      	b.n	8002fda <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6919      	ldr	r1, [r3, #16]
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	4413      	add	r3, r2
 8002fa8:	2207      	movs	r2, #7
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	43da      	mvns	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	400a      	ands	r2, r1
 8002fb6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6919      	ldr	r1, [r3, #16]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	689a      	ldr	r2, [r3, #8]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	4618      	mov	r0, r3
 8002fca:	4603      	mov	r3, r0
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	4403      	add	r3, r0
 8002fd0:	409a      	lsls	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b06      	cmp	r3, #6
 8002fe0:	d824      	bhi.n	800302c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	4613      	mov	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	3b05      	subs	r3, #5
 8002ff4:	221f      	movs	r2, #31
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	43da      	mvns	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	400a      	ands	r2, r1
 8003002:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	b29b      	uxth	r3, r3
 8003010:	4618      	mov	r0, r3
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	4613      	mov	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4413      	add	r3, r2
 800301c:	3b05      	subs	r3, #5
 800301e:	fa00 f203 	lsl.w	r2, r0, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	635a      	str	r2, [r3, #52]	; 0x34
 800302a:	e04c      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2b0c      	cmp	r3, #12
 8003032:	d824      	bhi.n	800307e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	4613      	mov	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4413      	add	r3, r2
 8003044:	3b23      	subs	r3, #35	; 0x23
 8003046:	221f      	movs	r2, #31
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	43da      	mvns	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	400a      	ands	r2, r1
 8003054:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	b29b      	uxth	r3, r3
 8003062:	4618      	mov	r0, r3
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	4613      	mov	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4413      	add	r3, r2
 800306e:	3b23      	subs	r3, #35	; 0x23
 8003070:	fa00 f203 	lsl.w	r2, r0, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	631a      	str	r2, [r3, #48]	; 0x30
 800307c:	e023      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	4613      	mov	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	4413      	add	r3, r2
 800308e:	3b41      	subs	r3, #65	; 0x41
 8003090:	221f      	movs	r2, #31
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	43da      	mvns	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	400a      	ands	r2, r1
 800309e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	4618      	mov	r0, r3
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	4613      	mov	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4413      	add	r3, r2
 80030b8:	3b41      	subs	r3, #65	; 0x41
 80030ba:	fa00 f203 	lsl.w	r2, r0, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030c6:	4b29      	ldr	r3, [pc, #164]	; (800316c <HAL_ADC_ConfigChannel+0x250>)
 80030c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a28      	ldr	r2, [pc, #160]	; (8003170 <HAL_ADC_ConfigChannel+0x254>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d10f      	bne.n	80030f4 <HAL_ADC_ConfigChannel+0x1d8>
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2b12      	cmp	r3, #18
 80030da:	d10b      	bne.n	80030f4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a1d      	ldr	r2, [pc, #116]	; (8003170 <HAL_ADC_ConfigChannel+0x254>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d12b      	bne.n	8003156 <HAL_ADC_ConfigChannel+0x23a>
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a1c      	ldr	r2, [pc, #112]	; (8003174 <HAL_ADC_ConfigChannel+0x258>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d003      	beq.n	8003110 <HAL_ADC_ConfigChannel+0x1f4>
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2b11      	cmp	r3, #17
 800310e:	d122      	bne.n	8003156 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a11      	ldr	r2, [pc, #68]	; (8003174 <HAL_ADC_ConfigChannel+0x258>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d111      	bne.n	8003156 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003132:	4b11      	ldr	r3, [pc, #68]	; (8003178 <HAL_ADC_ConfigChannel+0x25c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a11      	ldr	r2, [pc, #68]	; (800317c <HAL_ADC_ConfigChannel+0x260>)
 8003138:	fba2 2303 	umull	r2, r3, r2, r3
 800313c:	0c9a      	lsrs	r2, r3, #18
 800313e:	4613      	mov	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003148:	e002      	b.n	8003150 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	3b01      	subs	r3, #1
 800314e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f9      	bne.n	800314a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3714      	adds	r7, #20
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	40012300 	.word	0x40012300
 8003170:	40012000 	.word	0x40012000
 8003174:	10000012 	.word	0x10000012
 8003178:	20000010 	.word	0x20000010
 800317c:	431bde83 	.word	0x431bde83

08003180 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003188:	4b79      	ldr	r3, [pc, #484]	; (8003370 <ADC_Init+0x1f0>)
 800318a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	431a      	orrs	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6859      	ldr	r1, [r3, #4]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	021a      	lsls	r2, r3, #8
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80031d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6859      	ldr	r1, [r3, #4]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689a      	ldr	r2, [r3, #8]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6899      	ldr	r1, [r3, #8]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68da      	ldr	r2, [r3, #12]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003212:	4a58      	ldr	r2, [pc, #352]	; (8003374 <ADC_Init+0x1f4>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d022      	beq.n	800325e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689a      	ldr	r2, [r3, #8]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003226:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6899      	ldr	r1, [r3, #8]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003248:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6899      	ldr	r1, [r3, #8]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	430a      	orrs	r2, r1
 800325a:	609a      	str	r2, [r3, #8]
 800325c:	e00f      	b.n	800327e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800326c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800327c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0202 	bic.w	r2, r2, #2
 800328c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6899      	ldr	r1, [r3, #8]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	7e1b      	ldrb	r3, [r3, #24]
 8003298:	005a      	lsls	r2, r3, #1
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	430a      	orrs	r2, r1
 80032a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d01b      	beq.n	80032e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80032ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6859      	ldr	r1, [r3, #4]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	3b01      	subs	r3, #1
 80032d8:	035a      	lsls	r2, r3, #13
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	430a      	orrs	r2, r1
 80032e0:	605a      	str	r2, [r3, #4]
 80032e2:	e007      	b.n	80032f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003302:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	69db      	ldr	r3, [r3, #28]
 800330e:	3b01      	subs	r3, #1
 8003310:	051a      	lsls	r2, r3, #20
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003328:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6899      	ldr	r1, [r3, #8]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003336:	025a      	lsls	r2, r3, #9
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689a      	ldr	r2, [r3, #8]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800334e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6899      	ldr	r1, [r3, #8]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	029a      	lsls	r2, r3, #10
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	430a      	orrs	r2, r1
 8003362:	609a      	str	r2, [r3, #8]
}
 8003364:	bf00      	nop
 8003366:	3714      	adds	r7, #20
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	40012300 	.word	0x40012300
 8003374:	0f000001 	.word	0x0f000001

08003378 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f003 0307 	and.w	r3, r3, #7
 8003386:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003388:	4b0c      	ldr	r3, [pc, #48]	; (80033bc <__NVIC_SetPriorityGrouping+0x44>)
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003394:	4013      	ands	r3, r2
 8003396:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033aa:	4a04      	ldr	r2, [pc, #16]	; (80033bc <__NVIC_SetPriorityGrouping+0x44>)
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	60d3      	str	r3, [r2, #12]
}
 80033b0:	bf00      	nop
 80033b2:	3714      	adds	r7, #20
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr
 80033bc:	e000ed00 	.word	0xe000ed00

080033c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033c4:	4b04      	ldr	r3, [pc, #16]	; (80033d8 <__NVIC_GetPriorityGrouping+0x18>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	0a1b      	lsrs	r3, r3, #8
 80033ca:	f003 0307 	and.w	r3, r3, #7
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	e000ed00 	.word	0xe000ed00

080033dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	6039      	str	r1, [r7, #0]
 80033e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	db0a      	blt.n	8003406 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	b2da      	uxtb	r2, r3
 80033f4:	490c      	ldr	r1, [pc, #48]	; (8003428 <__NVIC_SetPriority+0x4c>)
 80033f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fa:	0112      	lsls	r2, r2, #4
 80033fc:	b2d2      	uxtb	r2, r2
 80033fe:	440b      	add	r3, r1
 8003400:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003404:	e00a      	b.n	800341c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	b2da      	uxtb	r2, r3
 800340a:	4908      	ldr	r1, [pc, #32]	; (800342c <__NVIC_SetPriority+0x50>)
 800340c:	79fb      	ldrb	r3, [r7, #7]
 800340e:	f003 030f 	and.w	r3, r3, #15
 8003412:	3b04      	subs	r3, #4
 8003414:	0112      	lsls	r2, r2, #4
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	440b      	add	r3, r1
 800341a:	761a      	strb	r2, [r3, #24]
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	e000e100 	.word	0xe000e100
 800342c:	e000ed00 	.word	0xe000ed00

08003430 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003430:	b480      	push	{r7}
 8003432:	b089      	sub	sp, #36	; 0x24
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	f1c3 0307 	rsb	r3, r3, #7
 800344a:	2b04      	cmp	r3, #4
 800344c:	bf28      	it	cs
 800344e:	2304      	movcs	r3, #4
 8003450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	3304      	adds	r3, #4
 8003456:	2b06      	cmp	r3, #6
 8003458:	d902      	bls.n	8003460 <NVIC_EncodePriority+0x30>
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	3b03      	subs	r3, #3
 800345e:	e000      	b.n	8003462 <NVIC_EncodePriority+0x32>
 8003460:	2300      	movs	r3, #0
 8003462:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003464:	f04f 32ff 	mov.w	r2, #4294967295
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	43da      	mvns	r2, r3
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	401a      	ands	r2, r3
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003478:	f04f 31ff 	mov.w	r1, #4294967295
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	fa01 f303 	lsl.w	r3, r1, r3
 8003482:	43d9      	mvns	r1, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003488:	4313      	orrs	r3, r2
         );
}
 800348a:	4618      	mov	r0, r3
 800348c:	3724      	adds	r7, #36	; 0x24
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
	...

08003498 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3b01      	subs	r3, #1
 80034a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034a8:	d301      	bcc.n	80034ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034aa:	2301      	movs	r3, #1
 80034ac:	e00f      	b.n	80034ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034ae:	4a0a      	ldr	r2, [pc, #40]	; (80034d8 <SysTick_Config+0x40>)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3b01      	subs	r3, #1
 80034b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034b6:	210f      	movs	r1, #15
 80034b8:	f04f 30ff 	mov.w	r0, #4294967295
 80034bc:	f7ff ff8e 	bl	80033dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034c0:	4b05      	ldr	r3, [pc, #20]	; (80034d8 <SysTick_Config+0x40>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034c6:	4b04      	ldr	r3, [pc, #16]	; (80034d8 <SysTick_Config+0x40>)
 80034c8:	2207      	movs	r2, #7
 80034ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	e000e010 	.word	0xe000e010

080034dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7ff ff47 	bl	8003378 <__NVIC_SetPriorityGrouping>
}
 80034ea:	bf00      	nop
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b086      	sub	sp, #24
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	4603      	mov	r3, r0
 80034fa:	60b9      	str	r1, [r7, #8]
 80034fc:	607a      	str	r2, [r7, #4]
 80034fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003500:	2300      	movs	r3, #0
 8003502:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003504:	f7ff ff5c 	bl	80033c0 <__NVIC_GetPriorityGrouping>
 8003508:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	68b9      	ldr	r1, [r7, #8]
 800350e:	6978      	ldr	r0, [r7, #20]
 8003510:	f7ff ff8e 	bl	8003430 <NVIC_EncodePriority>
 8003514:	4602      	mov	r2, r0
 8003516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800351a:	4611      	mov	r1, r2
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff ff5d 	bl	80033dc <__NVIC_SetPriority>
}
 8003522:	bf00      	nop
 8003524:	3718      	adds	r7, #24
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b082      	sub	sp, #8
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7ff ffb0 	bl	8003498 <SysTick_Config>
 8003538:	4603      	mov	r3, r0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
	...

08003544 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003544:	b480      	push	{r7}
 8003546:	b089      	sub	sp, #36	; 0x24
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800354e:	2300      	movs	r3, #0
 8003550:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003552:	2300      	movs	r3, #0
 8003554:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003556:	2300      	movs	r3, #0
 8003558:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800355a:	2300      	movs	r3, #0
 800355c:	61fb      	str	r3, [r7, #28]
 800355e:	e159      	b.n	8003814 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003560:	2201      	movs	r2, #1
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	4013      	ands	r3, r2
 8003572:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	429a      	cmp	r2, r3
 800357a:	f040 8148 	bne.w	800380e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f003 0303 	and.w	r3, r3, #3
 8003586:	2b01      	cmp	r3, #1
 8003588:	d005      	beq.n	8003596 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003592:	2b02      	cmp	r3, #2
 8003594:	d130      	bne.n	80035f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	2203      	movs	r2, #3
 80035a2:	fa02 f303 	lsl.w	r3, r2, r3
 80035a6:	43db      	mvns	r3, r3
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	4013      	ands	r3, r2
 80035ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	68da      	ldr	r2, [r3, #12]
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	4313      	orrs	r3, r2
 80035be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035cc:	2201      	movs	r2, #1
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	43db      	mvns	r3, r3
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	4013      	ands	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	091b      	lsrs	r3, r3, #4
 80035e2:	f003 0201 	and.w	r2, r3, #1
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f003 0303 	and.w	r3, r3, #3
 8003600:	2b03      	cmp	r3, #3
 8003602:	d017      	beq.n	8003634 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	2203      	movs	r2, #3
 8003610:	fa02 f303 	lsl.w	r3, r2, r3
 8003614:	43db      	mvns	r3, r3
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	4013      	ands	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	4313      	orrs	r3, r2
 800362c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f003 0303 	and.w	r3, r3, #3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d123      	bne.n	8003688 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	08da      	lsrs	r2, r3, #3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3208      	adds	r2, #8
 8003648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800364c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	220f      	movs	r2, #15
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	43db      	mvns	r3, r3
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	4013      	ands	r3, r2
 8003662:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	691a      	ldr	r2, [r3, #16]
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	fa02 f303 	lsl.w	r3, r2, r3
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	4313      	orrs	r3, r2
 8003678:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	08da      	lsrs	r2, r3, #3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	3208      	adds	r2, #8
 8003682:	69b9      	ldr	r1, [r7, #24]
 8003684:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	2203      	movs	r2, #3
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	43db      	mvns	r3, r3
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	4013      	ands	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f003 0203 	and.w	r2, r3, #3
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f000 80a2 	beq.w	800380e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ca:	2300      	movs	r3, #0
 80036cc:	60fb      	str	r3, [r7, #12]
 80036ce:	4b57      	ldr	r3, [pc, #348]	; (800382c <HAL_GPIO_Init+0x2e8>)
 80036d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d2:	4a56      	ldr	r2, [pc, #344]	; (800382c <HAL_GPIO_Init+0x2e8>)
 80036d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036d8:	6453      	str	r3, [r2, #68]	; 0x44
 80036da:	4b54      	ldr	r3, [pc, #336]	; (800382c <HAL_GPIO_Init+0x2e8>)
 80036dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036e2:	60fb      	str	r3, [r7, #12]
 80036e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036e6:	4a52      	ldr	r2, [pc, #328]	; (8003830 <HAL_GPIO_Init+0x2ec>)
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	089b      	lsrs	r3, r3, #2
 80036ec:	3302      	adds	r3, #2
 80036ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	f003 0303 	and.w	r3, r3, #3
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	220f      	movs	r2, #15
 80036fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003702:	43db      	mvns	r3, r3
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	4013      	ands	r3, r2
 8003708:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a49      	ldr	r2, [pc, #292]	; (8003834 <HAL_GPIO_Init+0x2f0>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d019      	beq.n	8003746 <HAL_GPIO_Init+0x202>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a48      	ldr	r2, [pc, #288]	; (8003838 <HAL_GPIO_Init+0x2f4>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d013      	beq.n	8003742 <HAL_GPIO_Init+0x1fe>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a47      	ldr	r2, [pc, #284]	; (800383c <HAL_GPIO_Init+0x2f8>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d00d      	beq.n	800373e <HAL_GPIO_Init+0x1fa>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a46      	ldr	r2, [pc, #280]	; (8003840 <HAL_GPIO_Init+0x2fc>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d007      	beq.n	800373a <HAL_GPIO_Init+0x1f6>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a45      	ldr	r2, [pc, #276]	; (8003844 <HAL_GPIO_Init+0x300>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d101      	bne.n	8003736 <HAL_GPIO_Init+0x1f2>
 8003732:	2304      	movs	r3, #4
 8003734:	e008      	b.n	8003748 <HAL_GPIO_Init+0x204>
 8003736:	2307      	movs	r3, #7
 8003738:	e006      	b.n	8003748 <HAL_GPIO_Init+0x204>
 800373a:	2303      	movs	r3, #3
 800373c:	e004      	b.n	8003748 <HAL_GPIO_Init+0x204>
 800373e:	2302      	movs	r3, #2
 8003740:	e002      	b.n	8003748 <HAL_GPIO_Init+0x204>
 8003742:	2301      	movs	r3, #1
 8003744:	e000      	b.n	8003748 <HAL_GPIO_Init+0x204>
 8003746:	2300      	movs	r3, #0
 8003748:	69fa      	ldr	r2, [r7, #28]
 800374a:	f002 0203 	and.w	r2, r2, #3
 800374e:	0092      	lsls	r2, r2, #2
 8003750:	4093      	lsls	r3, r2
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	4313      	orrs	r3, r2
 8003756:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003758:	4935      	ldr	r1, [pc, #212]	; (8003830 <HAL_GPIO_Init+0x2ec>)
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	089b      	lsrs	r3, r3, #2
 800375e:	3302      	adds	r3, #2
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003766:	4b38      	ldr	r3, [pc, #224]	; (8003848 <HAL_GPIO_Init+0x304>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	43db      	mvns	r3, r3
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	4013      	ands	r3, r2
 8003774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d003      	beq.n	800378a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	4313      	orrs	r3, r2
 8003788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800378a:	4a2f      	ldr	r2, [pc, #188]	; (8003848 <HAL_GPIO_Init+0x304>)
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003790:	4b2d      	ldr	r3, [pc, #180]	; (8003848 <HAL_GPIO_Init+0x304>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	43db      	mvns	r3, r3
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	4013      	ands	r3, r2
 800379e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d003      	beq.n	80037b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037b4:	4a24      	ldr	r2, [pc, #144]	; (8003848 <HAL_GPIO_Init+0x304>)
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037ba:	4b23      	ldr	r3, [pc, #140]	; (8003848 <HAL_GPIO_Init+0x304>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	43db      	mvns	r3, r3
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	4013      	ands	r3, r2
 80037c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	4313      	orrs	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037de:	4a1a      	ldr	r2, [pc, #104]	; (8003848 <HAL_GPIO_Init+0x304>)
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037e4:	4b18      	ldr	r3, [pc, #96]	; (8003848 <HAL_GPIO_Init+0x304>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	43db      	mvns	r3, r3
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	4013      	ands	r3, r2
 80037f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d003      	beq.n	8003808 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	4313      	orrs	r3, r2
 8003806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003808:	4a0f      	ldr	r2, [pc, #60]	; (8003848 <HAL_GPIO_Init+0x304>)
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	3301      	adds	r3, #1
 8003812:	61fb      	str	r3, [r7, #28]
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	2b0f      	cmp	r3, #15
 8003818:	f67f aea2 	bls.w	8003560 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800381c:	bf00      	nop
 800381e:	bf00      	nop
 8003820:	3724      	adds	r7, #36	; 0x24
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	40023800 	.word	0x40023800
 8003830:	40013800 	.word	0x40013800
 8003834:	40020000 	.word	0x40020000
 8003838:	40020400 	.word	0x40020400
 800383c:	40020800 	.word	0x40020800
 8003840:	40020c00 	.word	0x40020c00
 8003844:	40021000 	.word	0x40021000
 8003848:	40013c00 	.word	0x40013c00

0800384c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	460b      	mov	r3, r1
 8003856:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	691a      	ldr	r2, [r3, #16]
 800385c:	887b      	ldrh	r3, [r7, #2]
 800385e:	4013      	ands	r3, r2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d002      	beq.n	800386a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003864:	2301      	movs	r3, #1
 8003866:	73fb      	strb	r3, [r7, #15]
 8003868:	e001      	b.n	800386e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800386a:	2300      	movs	r3, #0
 800386c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800386e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3714      	adds	r7, #20
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	460b      	mov	r3, r1
 8003886:	807b      	strh	r3, [r7, #2]
 8003888:	4613      	mov	r3, r2
 800388a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800388c:	787b      	ldrb	r3, [r7, #1]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003892:	887a      	ldrh	r2, [r7, #2]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003898:	e003      	b.n	80038a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800389a:	887b      	ldrh	r3, [r7, #2]
 800389c:	041a      	lsls	r2, r3, #16
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	619a      	str	r2, [r3, #24]
}
 80038a2:	bf00      	nop
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
	...

080038b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e12b      	b.n	8003b1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d106      	bne.n	80038dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7fe ff30 	bl	800273c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2224      	movs	r2, #36	; 0x24
 80038e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 0201 	bic.w	r2, r2, #1
 80038f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003902:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003912:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003914:	f001 f848 	bl	80049a8 <HAL_RCC_GetPCLK1Freq>
 8003918:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	4a81      	ldr	r2, [pc, #516]	; (8003b24 <HAL_I2C_Init+0x274>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d807      	bhi.n	8003934 <HAL_I2C_Init+0x84>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	4a80      	ldr	r2, [pc, #512]	; (8003b28 <HAL_I2C_Init+0x278>)
 8003928:	4293      	cmp	r3, r2
 800392a:	bf94      	ite	ls
 800392c:	2301      	movls	r3, #1
 800392e:	2300      	movhi	r3, #0
 8003930:	b2db      	uxtb	r3, r3
 8003932:	e006      	b.n	8003942 <HAL_I2C_Init+0x92>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	4a7d      	ldr	r2, [pc, #500]	; (8003b2c <HAL_I2C_Init+0x27c>)
 8003938:	4293      	cmp	r3, r2
 800393a:	bf94      	ite	ls
 800393c:	2301      	movls	r3, #1
 800393e:	2300      	movhi	r3, #0
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e0e7      	b.n	8003b1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	4a78      	ldr	r2, [pc, #480]	; (8003b30 <HAL_I2C_Init+0x280>)
 800394e:	fba2 2303 	umull	r2, r3, r2, r3
 8003952:	0c9b      	lsrs	r3, r3, #18
 8003954:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	430a      	orrs	r2, r1
 8003968:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	4a6a      	ldr	r2, [pc, #424]	; (8003b24 <HAL_I2C_Init+0x274>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d802      	bhi.n	8003984 <HAL_I2C_Init+0xd4>
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	3301      	adds	r3, #1
 8003982:	e009      	b.n	8003998 <HAL_I2C_Init+0xe8>
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800398a:	fb02 f303 	mul.w	r3, r2, r3
 800398e:	4a69      	ldr	r2, [pc, #420]	; (8003b34 <HAL_I2C_Init+0x284>)
 8003990:	fba2 2303 	umull	r2, r3, r2, r3
 8003994:	099b      	lsrs	r3, r3, #6
 8003996:	3301      	adds	r3, #1
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	6812      	ldr	r2, [r2, #0]
 800399c:	430b      	orrs	r3, r1
 800399e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	495c      	ldr	r1, [pc, #368]	; (8003b24 <HAL_I2C_Init+0x274>)
 80039b4:	428b      	cmp	r3, r1
 80039b6:	d819      	bhi.n	80039ec <HAL_I2C_Init+0x13c>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	1e59      	subs	r1, r3, #1
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80039c6:	1c59      	adds	r1, r3, #1
 80039c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80039cc:	400b      	ands	r3, r1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00a      	beq.n	80039e8 <HAL_I2C_Init+0x138>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	1e59      	subs	r1, r3, #1
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80039e0:	3301      	adds	r3, #1
 80039e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039e6:	e051      	b.n	8003a8c <HAL_I2C_Init+0x1dc>
 80039e8:	2304      	movs	r3, #4
 80039ea:	e04f      	b.n	8003a8c <HAL_I2C_Init+0x1dc>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d111      	bne.n	8003a18 <HAL_I2C_Init+0x168>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	1e58      	subs	r0, r3, #1
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6859      	ldr	r1, [r3, #4]
 80039fc:	460b      	mov	r3, r1
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	440b      	add	r3, r1
 8003a02:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a06:	3301      	adds	r3, #1
 8003a08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	bf0c      	ite	eq
 8003a10:	2301      	moveq	r3, #1
 8003a12:	2300      	movne	r3, #0
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	e012      	b.n	8003a3e <HAL_I2C_Init+0x18e>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	1e58      	subs	r0, r3, #1
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6859      	ldr	r1, [r3, #4]
 8003a20:	460b      	mov	r3, r1
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	440b      	add	r3, r1
 8003a26:	0099      	lsls	r1, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a2e:	3301      	adds	r3, #1
 8003a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	bf0c      	ite	eq
 8003a38:	2301      	moveq	r3, #1
 8003a3a:	2300      	movne	r3, #0
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <HAL_I2C_Init+0x196>
 8003a42:	2301      	movs	r3, #1
 8003a44:	e022      	b.n	8003a8c <HAL_I2C_Init+0x1dc>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10e      	bne.n	8003a6c <HAL_I2C_Init+0x1bc>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	1e58      	subs	r0, r3, #1
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6859      	ldr	r1, [r3, #4]
 8003a56:	460b      	mov	r3, r1
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	440b      	add	r3, r1
 8003a5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a60:	3301      	adds	r3, #1
 8003a62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a6a:	e00f      	b.n	8003a8c <HAL_I2C_Init+0x1dc>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	1e58      	subs	r0, r3, #1
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6859      	ldr	r1, [r3, #4]
 8003a74:	460b      	mov	r3, r1
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	0099      	lsls	r1, r3, #2
 8003a7c:	440b      	add	r3, r1
 8003a7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a82:	3301      	adds	r3, #1
 8003a84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a8c:	6879      	ldr	r1, [r7, #4]
 8003a8e:	6809      	ldr	r1, [r1, #0]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	69da      	ldr	r2, [r3, #28]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003aba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	6911      	ldr	r1, [r2, #16]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	68d2      	ldr	r2, [r2, #12]
 8003ac6:	4311      	orrs	r1, r2
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	6812      	ldr	r2, [r2, #0]
 8003acc:	430b      	orrs	r3, r1
 8003ace:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	695a      	ldr	r2, [r3, #20]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f042 0201 	orr.w	r2, r2, #1
 8003afa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2220      	movs	r2, #32
 8003b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	000186a0 	.word	0x000186a0
 8003b28:	001e847f 	.word	0x001e847f
 8003b2c:	003d08ff 	.word	0x003d08ff
 8003b30:	431bde83 	.word	0x431bde83
 8003b34:	10624dd3 	.word	0x10624dd3

08003b38 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b088      	sub	sp, #32
 8003b3c:	af02      	add	r7, sp, #8
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	607a      	str	r2, [r7, #4]
 8003b42:	461a      	mov	r2, r3
 8003b44:	460b      	mov	r3, r1
 8003b46:	817b      	strh	r3, [r7, #10]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b4c:	f7fe fff2 	bl	8002b34 <HAL_GetTick>
 8003b50:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b20      	cmp	r3, #32
 8003b5c:	f040 80e0 	bne.w	8003d20 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	9300      	str	r3, [sp, #0]
 8003b64:	2319      	movs	r3, #25
 8003b66:	2201      	movs	r2, #1
 8003b68:	4970      	ldr	r1, [pc, #448]	; (8003d2c <HAL_I2C_Master_Transmit+0x1f4>)
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 f964 	bl	8003e38 <I2C_WaitOnFlagUntilTimeout>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b76:	2302      	movs	r3, #2
 8003b78:	e0d3      	b.n	8003d22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d101      	bne.n	8003b88 <HAL_I2C_Master_Transmit+0x50>
 8003b84:	2302      	movs	r3, #2
 8003b86:	e0cc      	b.n	8003d22 <HAL_I2C_Master_Transmit+0x1ea>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d007      	beq.n	8003bae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f042 0201 	orr.w	r2, r2, #1
 8003bac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bbc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2221      	movs	r2, #33	; 0x21
 8003bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2210      	movs	r2, #16
 8003bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	893a      	ldrh	r2, [r7, #8]
 8003bde:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	4a50      	ldr	r2, [pc, #320]	; (8003d30 <HAL_I2C_Master_Transmit+0x1f8>)
 8003bee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003bf0:	8979      	ldrh	r1, [r7, #10]
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	6a3a      	ldr	r2, [r7, #32]
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 f89c 	bl	8003d34 <I2C_MasterRequestWrite>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e08d      	b.n	8003d22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c06:	2300      	movs	r3, #0
 8003c08:	613b      	str	r3, [r7, #16]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	613b      	str	r3, [r7, #16]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	613b      	str	r3, [r7, #16]
 8003c1a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003c1c:	e066      	b.n	8003cec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	6a39      	ldr	r1, [r7, #32]
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f000 f9de 	bl	8003fe4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00d      	beq.n	8003c4a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	2b04      	cmp	r3, #4
 8003c34:	d107      	bne.n	8003c46 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e06b      	b.n	8003d22 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4e:	781a      	ldrb	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5a:	1c5a      	adds	r2, r3, #1
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	3b01      	subs	r3, #1
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c72:	3b01      	subs	r3, #1
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	2b04      	cmp	r3, #4
 8003c86:	d11b      	bne.n	8003cc0 <HAL_I2C_Master_Transmit+0x188>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d017      	beq.n	8003cc0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c94:	781a      	ldrb	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca0:	1c5a      	adds	r2, r3, #1
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	3b01      	subs	r3, #1
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	6a39      	ldr	r1, [r7, #32]
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f000 f9ce 	bl	8004066 <I2C_WaitOnBTFFlagUntilTimeout>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00d      	beq.n	8003cec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd4:	2b04      	cmp	r3, #4
 8003cd6:	d107      	bne.n	8003ce8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ce6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e01a      	b.n	8003d22 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d194      	bne.n	8003c1e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2220      	movs	r2, #32
 8003d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	e000      	b.n	8003d22 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003d20:	2302      	movs	r3, #2
  }
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3718      	adds	r7, #24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	00100002 	.word	0x00100002
 8003d30:	ffff0000 	.word	0xffff0000

08003d34 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b088      	sub	sp, #32
 8003d38:	af02      	add	r7, sp, #8
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	607a      	str	r2, [r7, #4]
 8003d3e:	603b      	str	r3, [r7, #0]
 8003d40:	460b      	mov	r3, r1
 8003d42:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d48:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	2b08      	cmp	r3, #8
 8003d4e:	d006      	beq.n	8003d5e <I2C_MasterRequestWrite+0x2a>
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d003      	beq.n	8003d5e <I2C_MasterRequestWrite+0x2a>
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d5c:	d108      	bne.n	8003d70 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	e00b      	b.n	8003d88 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d74:	2b12      	cmp	r3, #18
 8003d76:	d107      	bne.n	8003d88 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d86:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	9300      	str	r3, [sp, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f000 f84f 	bl	8003e38 <I2C_WaitOnFlagUntilTimeout>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00d      	beq.n	8003dbc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003daa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dae:	d103      	bne.n	8003db8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003db6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e035      	b.n	8003e28 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dc4:	d108      	bne.n	8003dd8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003dc6:	897b      	ldrh	r3, [r7, #10]
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	461a      	mov	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003dd4:	611a      	str	r2, [r3, #16]
 8003dd6:	e01b      	b.n	8003e10 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003dd8:	897b      	ldrh	r3, [r7, #10]
 8003dda:	11db      	asrs	r3, r3, #7
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	f003 0306 	and.w	r3, r3, #6
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	f063 030f 	orn	r3, r3, #15
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	490e      	ldr	r1, [pc, #56]	; (8003e30 <I2C_MasterRequestWrite+0xfc>)
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 f875 	bl	8003ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e010      	b.n	8003e28 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e06:	897b      	ldrh	r3, [r7, #10]
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	4907      	ldr	r1, [pc, #28]	; (8003e34 <I2C_MasterRequestWrite+0x100>)
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f000 f865 	bl	8003ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e000      	b.n	8003e28 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3718      	adds	r7, #24
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	00010008 	.word	0x00010008
 8003e34:	00010002 	.word	0x00010002

08003e38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	603b      	str	r3, [r7, #0]
 8003e44:	4613      	mov	r3, r2
 8003e46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e48:	e025      	b.n	8003e96 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e50:	d021      	beq.n	8003e96 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e52:	f7fe fe6f 	bl	8002b34 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d302      	bcc.n	8003e68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d116      	bne.n	8003e96 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2220      	movs	r2, #32
 8003e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	f043 0220 	orr.w	r2, r3, #32
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e023      	b.n	8003ede <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	0c1b      	lsrs	r3, r3, #16
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d10d      	bne.n	8003ebc <I2C_WaitOnFlagUntilTimeout+0x84>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	43da      	mvns	r2, r3
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	bf0c      	ite	eq
 8003eb2:	2301      	moveq	r3, #1
 8003eb4:	2300      	movne	r3, #0
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	461a      	mov	r2, r3
 8003eba:	e00c      	b.n	8003ed6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	43da      	mvns	r2, r3
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	bf0c      	ite	eq
 8003ece:	2301      	moveq	r3, #1
 8003ed0:	2300      	movne	r3, #0
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	79fb      	ldrb	r3, [r7, #7]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d0b6      	beq.n	8003e4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b084      	sub	sp, #16
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	60f8      	str	r0, [r7, #12]
 8003eee:	60b9      	str	r1, [r7, #8]
 8003ef0:	607a      	str	r2, [r7, #4]
 8003ef2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ef4:	e051      	b.n	8003f9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f04:	d123      	bne.n	8003f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f14:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f1e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	f043 0204 	orr.w	r2, r3, #4
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e046      	b.n	8003fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f54:	d021      	beq.n	8003f9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f56:	f7fe fded 	bl	8002b34 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d302      	bcc.n	8003f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d116      	bne.n	8003f9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2220      	movs	r2, #32
 8003f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	f043 0220 	orr.w	r2, r3, #32
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e020      	b.n	8003fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	0c1b      	lsrs	r3, r3, #16
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d10c      	bne.n	8003fbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	43da      	mvns	r2, r3
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	4013      	ands	r3, r2
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	bf14      	ite	ne
 8003fb6:	2301      	movne	r3, #1
 8003fb8:	2300      	moveq	r3, #0
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	e00b      	b.n	8003fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	43da      	mvns	r2, r3
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	bf14      	ite	ne
 8003fd0:	2301      	movne	r3, #1
 8003fd2:	2300      	moveq	r3, #0
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d18d      	bne.n	8003ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ff0:	e02d      	b.n	800404e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f000 f878 	bl	80040e8 <I2C_IsAcknowledgeFailed>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e02d      	b.n	800405e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004008:	d021      	beq.n	800404e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800400a:	f7fe fd93 	bl	8002b34 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	429a      	cmp	r2, r3
 8004018:	d302      	bcc.n	8004020 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d116      	bne.n	800404e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2220      	movs	r2, #32
 800402a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	f043 0220 	orr.w	r2, r3, #32
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e007      	b.n	800405e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004058:	2b80      	cmp	r3, #128	; 0x80
 800405a:	d1ca      	bne.n	8003ff2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b084      	sub	sp, #16
 800406a:	af00      	add	r7, sp, #0
 800406c:	60f8      	str	r0, [r7, #12]
 800406e:	60b9      	str	r1, [r7, #8]
 8004070:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004072:	e02d      	b.n	80040d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f000 f837 	bl	80040e8 <I2C_IsAcknowledgeFailed>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e02d      	b.n	80040e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800408a:	d021      	beq.n	80040d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800408c:	f7fe fd52 	bl	8002b34 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	68ba      	ldr	r2, [r7, #8]
 8004098:	429a      	cmp	r2, r3
 800409a:	d302      	bcc.n	80040a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d116      	bne.n	80040d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2220      	movs	r2, #32
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040bc:	f043 0220 	orr.w	r2, r3, #32
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e007      	b.n	80040e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	f003 0304 	and.w	r3, r3, #4
 80040da:	2b04      	cmp	r3, #4
 80040dc:	d1ca      	bne.n	8004074 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040fe:	d11b      	bne.n	8004138 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004108:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2220      	movs	r2, #32
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004124:	f043 0204 	orr.w	r2, r3, #4
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e000      	b.n	800413a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
	...

08004148 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e267      	b.n	800462a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b00      	cmp	r3, #0
 8004164:	d075      	beq.n	8004252 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004166:	4b88      	ldr	r3, [pc, #544]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 030c 	and.w	r3, r3, #12
 800416e:	2b04      	cmp	r3, #4
 8004170:	d00c      	beq.n	800418c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004172:	4b85      	ldr	r3, [pc, #532]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800417a:	2b08      	cmp	r3, #8
 800417c:	d112      	bne.n	80041a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800417e:	4b82      	ldr	r3, [pc, #520]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004186:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800418a:	d10b      	bne.n	80041a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800418c:	4b7e      	ldr	r3, [pc, #504]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d05b      	beq.n	8004250 <HAL_RCC_OscConfig+0x108>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d157      	bne.n	8004250 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e242      	b.n	800462a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ac:	d106      	bne.n	80041bc <HAL_RCC_OscConfig+0x74>
 80041ae:	4b76      	ldr	r3, [pc, #472]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a75      	ldr	r2, [pc, #468]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 80041b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b8:	6013      	str	r3, [r2, #0]
 80041ba:	e01d      	b.n	80041f8 <HAL_RCC_OscConfig+0xb0>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041c4:	d10c      	bne.n	80041e0 <HAL_RCC_OscConfig+0x98>
 80041c6:	4b70      	ldr	r3, [pc, #448]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a6f      	ldr	r2, [pc, #444]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 80041cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041d0:	6013      	str	r3, [r2, #0]
 80041d2:	4b6d      	ldr	r3, [pc, #436]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a6c      	ldr	r2, [pc, #432]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 80041d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041dc:	6013      	str	r3, [r2, #0]
 80041de:	e00b      	b.n	80041f8 <HAL_RCC_OscConfig+0xb0>
 80041e0:	4b69      	ldr	r3, [pc, #420]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a68      	ldr	r2, [pc, #416]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 80041e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041ea:	6013      	str	r3, [r2, #0]
 80041ec:	4b66      	ldr	r3, [pc, #408]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a65      	ldr	r2, [pc, #404]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 80041f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d013      	beq.n	8004228 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004200:	f7fe fc98 	bl	8002b34 <HAL_GetTick>
 8004204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004206:	e008      	b.n	800421a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004208:	f7fe fc94 	bl	8002b34 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b64      	cmp	r3, #100	; 0x64
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e207      	b.n	800462a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800421a:	4b5b      	ldr	r3, [pc, #364]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d0f0      	beq.n	8004208 <HAL_RCC_OscConfig+0xc0>
 8004226:	e014      	b.n	8004252 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004228:	f7fe fc84 	bl	8002b34 <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004230:	f7fe fc80 	bl	8002b34 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b64      	cmp	r3, #100	; 0x64
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e1f3      	b.n	800462a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004242:	4b51      	ldr	r3, [pc, #324]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1f0      	bne.n	8004230 <HAL_RCC_OscConfig+0xe8>
 800424e:	e000      	b.n	8004252 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004250:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d063      	beq.n	8004326 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800425e:	4b4a      	ldr	r3, [pc, #296]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 030c 	and.w	r3, r3, #12
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00b      	beq.n	8004282 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800426a:	4b47      	ldr	r3, [pc, #284]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004272:	2b08      	cmp	r3, #8
 8004274:	d11c      	bne.n	80042b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004276:	4b44      	ldr	r3, [pc, #272]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d116      	bne.n	80042b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004282:	4b41      	ldr	r3, [pc, #260]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d005      	beq.n	800429a <HAL_RCC_OscConfig+0x152>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d001      	beq.n	800429a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e1c7      	b.n	800462a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800429a:	4b3b      	ldr	r3, [pc, #236]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	4937      	ldr	r1, [pc, #220]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ae:	e03a      	b.n	8004326 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d020      	beq.n	80042fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042b8:	4b34      	ldr	r3, [pc, #208]	; (800438c <HAL_RCC_OscConfig+0x244>)
 80042ba:	2201      	movs	r2, #1
 80042bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042be:	f7fe fc39 	bl	8002b34 <HAL_GetTick>
 80042c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042c4:	e008      	b.n	80042d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042c6:	f7fe fc35 	bl	8002b34 <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d901      	bls.n	80042d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e1a8      	b.n	800462a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042d8:	4b2b      	ldr	r3, [pc, #172]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d0f0      	beq.n	80042c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042e4:	4b28      	ldr	r3, [pc, #160]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	00db      	lsls	r3, r3, #3
 80042f2:	4925      	ldr	r1, [pc, #148]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	600b      	str	r3, [r1, #0]
 80042f8:	e015      	b.n	8004326 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042fa:	4b24      	ldr	r3, [pc, #144]	; (800438c <HAL_RCC_OscConfig+0x244>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004300:	f7fe fc18 	bl	8002b34 <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004308:	f7fe fc14 	bl	8002b34 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e187      	b.n	800462a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800431a:	4b1b      	ldr	r3, [pc, #108]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1f0      	bne.n	8004308 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0308 	and.w	r3, r3, #8
 800432e:	2b00      	cmp	r3, #0
 8004330:	d036      	beq.n	80043a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d016      	beq.n	8004368 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800433a:	4b15      	ldr	r3, [pc, #84]	; (8004390 <HAL_RCC_OscConfig+0x248>)
 800433c:	2201      	movs	r2, #1
 800433e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004340:	f7fe fbf8 	bl	8002b34 <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004346:	e008      	b.n	800435a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004348:	f7fe fbf4 	bl	8002b34 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b02      	cmp	r3, #2
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e167      	b.n	800462a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800435a:	4b0b      	ldr	r3, [pc, #44]	; (8004388 <HAL_RCC_OscConfig+0x240>)
 800435c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0f0      	beq.n	8004348 <HAL_RCC_OscConfig+0x200>
 8004366:	e01b      	b.n	80043a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004368:	4b09      	ldr	r3, [pc, #36]	; (8004390 <HAL_RCC_OscConfig+0x248>)
 800436a:	2200      	movs	r2, #0
 800436c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800436e:	f7fe fbe1 	bl	8002b34 <HAL_GetTick>
 8004372:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004374:	e00e      	b.n	8004394 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004376:	f7fe fbdd 	bl	8002b34 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	2b02      	cmp	r3, #2
 8004382:	d907      	bls.n	8004394 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e150      	b.n	800462a <HAL_RCC_OscConfig+0x4e2>
 8004388:	40023800 	.word	0x40023800
 800438c:	42470000 	.word	0x42470000
 8004390:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004394:	4b88      	ldr	r3, [pc, #544]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 8004396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1ea      	bne.n	8004376 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0304 	and.w	r3, r3, #4
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	f000 8097 	beq.w	80044dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043ae:	2300      	movs	r3, #0
 80043b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043b2:	4b81      	ldr	r3, [pc, #516]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10f      	bne.n	80043de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043be:	2300      	movs	r3, #0
 80043c0:	60bb      	str	r3, [r7, #8]
 80043c2:	4b7d      	ldr	r3, [pc, #500]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	4a7c      	ldr	r2, [pc, #496]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 80043c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043cc:	6413      	str	r3, [r2, #64]	; 0x40
 80043ce:	4b7a      	ldr	r3, [pc, #488]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 80043d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d6:	60bb      	str	r3, [r7, #8]
 80043d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043da:	2301      	movs	r3, #1
 80043dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043de:	4b77      	ldr	r3, [pc, #476]	; (80045bc <HAL_RCC_OscConfig+0x474>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d118      	bne.n	800441c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043ea:	4b74      	ldr	r3, [pc, #464]	; (80045bc <HAL_RCC_OscConfig+0x474>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a73      	ldr	r2, [pc, #460]	; (80045bc <HAL_RCC_OscConfig+0x474>)
 80043f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043f6:	f7fe fb9d 	bl	8002b34 <HAL_GetTick>
 80043fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043fc:	e008      	b.n	8004410 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043fe:	f7fe fb99 	bl	8002b34 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	2b02      	cmp	r3, #2
 800440a:	d901      	bls.n	8004410 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e10c      	b.n	800462a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004410:	4b6a      	ldr	r3, [pc, #424]	; (80045bc <HAL_RCC_OscConfig+0x474>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004418:	2b00      	cmp	r3, #0
 800441a:	d0f0      	beq.n	80043fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d106      	bne.n	8004432 <HAL_RCC_OscConfig+0x2ea>
 8004424:	4b64      	ldr	r3, [pc, #400]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 8004426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004428:	4a63      	ldr	r2, [pc, #396]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 800442a:	f043 0301 	orr.w	r3, r3, #1
 800442e:	6713      	str	r3, [r2, #112]	; 0x70
 8004430:	e01c      	b.n	800446c <HAL_RCC_OscConfig+0x324>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	2b05      	cmp	r3, #5
 8004438:	d10c      	bne.n	8004454 <HAL_RCC_OscConfig+0x30c>
 800443a:	4b5f      	ldr	r3, [pc, #380]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 800443c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443e:	4a5e      	ldr	r2, [pc, #376]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 8004440:	f043 0304 	orr.w	r3, r3, #4
 8004444:	6713      	str	r3, [r2, #112]	; 0x70
 8004446:	4b5c      	ldr	r3, [pc, #368]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 8004448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444a:	4a5b      	ldr	r2, [pc, #364]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 800444c:	f043 0301 	orr.w	r3, r3, #1
 8004450:	6713      	str	r3, [r2, #112]	; 0x70
 8004452:	e00b      	b.n	800446c <HAL_RCC_OscConfig+0x324>
 8004454:	4b58      	ldr	r3, [pc, #352]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 8004456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004458:	4a57      	ldr	r2, [pc, #348]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 800445a:	f023 0301 	bic.w	r3, r3, #1
 800445e:	6713      	str	r3, [r2, #112]	; 0x70
 8004460:	4b55      	ldr	r3, [pc, #340]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 8004462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004464:	4a54      	ldr	r2, [pc, #336]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 8004466:	f023 0304 	bic.w	r3, r3, #4
 800446a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d015      	beq.n	80044a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004474:	f7fe fb5e 	bl	8002b34 <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800447a:	e00a      	b.n	8004492 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800447c:	f7fe fb5a 	bl	8002b34 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	f241 3288 	movw	r2, #5000	; 0x1388
 800448a:	4293      	cmp	r3, r2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e0cb      	b.n	800462a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004492:	4b49      	ldr	r3, [pc, #292]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 8004494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d0ee      	beq.n	800447c <HAL_RCC_OscConfig+0x334>
 800449e:	e014      	b.n	80044ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044a0:	f7fe fb48 	bl	8002b34 <HAL_GetTick>
 80044a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044a6:	e00a      	b.n	80044be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044a8:	f7fe fb44 	bl	8002b34 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e0b5      	b.n	800462a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044be:	4b3e      	ldr	r3, [pc, #248]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 80044c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1ee      	bne.n	80044a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044ca:	7dfb      	ldrb	r3, [r7, #23]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d105      	bne.n	80044dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044d0:	4b39      	ldr	r3, [pc, #228]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 80044d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d4:	4a38      	ldr	r2, [pc, #224]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 80044d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f000 80a1 	beq.w	8004628 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044e6:	4b34      	ldr	r3, [pc, #208]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f003 030c 	and.w	r3, r3, #12
 80044ee:	2b08      	cmp	r3, #8
 80044f0:	d05c      	beq.n	80045ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d141      	bne.n	800457e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044fa:	4b31      	ldr	r3, [pc, #196]	; (80045c0 <HAL_RCC_OscConfig+0x478>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004500:	f7fe fb18 	bl	8002b34 <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004508:	f7fe fb14 	bl	8002b34 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e087      	b.n	800462a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800451a:	4b27      	ldr	r3, [pc, #156]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1f0      	bne.n	8004508 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	69da      	ldr	r2, [r3, #28]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	431a      	orrs	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	019b      	lsls	r3, r3, #6
 8004536:	431a      	orrs	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453c:	085b      	lsrs	r3, r3, #1
 800453e:	3b01      	subs	r3, #1
 8004540:	041b      	lsls	r3, r3, #16
 8004542:	431a      	orrs	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004548:	061b      	lsls	r3, r3, #24
 800454a:	491b      	ldr	r1, [pc, #108]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 800454c:	4313      	orrs	r3, r2
 800454e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004550:	4b1b      	ldr	r3, [pc, #108]	; (80045c0 <HAL_RCC_OscConfig+0x478>)
 8004552:	2201      	movs	r2, #1
 8004554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004556:	f7fe faed 	bl	8002b34 <HAL_GetTick>
 800455a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800455c:	e008      	b.n	8004570 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800455e:	f7fe fae9 	bl	8002b34 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b02      	cmp	r3, #2
 800456a:	d901      	bls.n	8004570 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e05c      	b.n	800462a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004570:	4b11      	ldr	r3, [pc, #68]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0f0      	beq.n	800455e <HAL_RCC_OscConfig+0x416>
 800457c:	e054      	b.n	8004628 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800457e:	4b10      	ldr	r3, [pc, #64]	; (80045c0 <HAL_RCC_OscConfig+0x478>)
 8004580:	2200      	movs	r2, #0
 8004582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004584:	f7fe fad6 	bl	8002b34 <HAL_GetTick>
 8004588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800458a:	e008      	b.n	800459e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800458c:	f7fe fad2 	bl	8002b34 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b02      	cmp	r3, #2
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e045      	b.n	800462a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800459e:	4b06      	ldr	r3, [pc, #24]	; (80045b8 <HAL_RCC_OscConfig+0x470>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1f0      	bne.n	800458c <HAL_RCC_OscConfig+0x444>
 80045aa:	e03d      	b.n	8004628 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d107      	bne.n	80045c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e038      	b.n	800462a <HAL_RCC_OscConfig+0x4e2>
 80045b8:	40023800 	.word	0x40023800
 80045bc:	40007000 	.word	0x40007000
 80045c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045c4:	4b1b      	ldr	r3, [pc, #108]	; (8004634 <HAL_RCC_OscConfig+0x4ec>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d028      	beq.n	8004624 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045dc:	429a      	cmp	r2, r3
 80045de:	d121      	bne.n	8004624 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d11a      	bne.n	8004624 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80045f4:	4013      	ands	r3, r2
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d111      	bne.n	8004624 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460a:	085b      	lsrs	r3, r3, #1
 800460c:	3b01      	subs	r3, #1
 800460e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004610:	429a      	cmp	r2, r3
 8004612:	d107      	bne.n	8004624 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004620:	429a      	cmp	r2, r3
 8004622:	d001      	beq.n	8004628 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e000      	b.n	800462a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3718      	adds	r7, #24
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	40023800 	.word	0x40023800

08004638 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e0cc      	b.n	80047e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800464c:	4b68      	ldr	r3, [pc, #416]	; (80047f0 <HAL_RCC_ClockConfig+0x1b8>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	683a      	ldr	r2, [r7, #0]
 8004656:	429a      	cmp	r2, r3
 8004658:	d90c      	bls.n	8004674 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800465a:	4b65      	ldr	r3, [pc, #404]	; (80047f0 <HAL_RCC_ClockConfig+0x1b8>)
 800465c:	683a      	ldr	r2, [r7, #0]
 800465e:	b2d2      	uxtb	r2, r2
 8004660:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004662:	4b63      	ldr	r3, [pc, #396]	; (80047f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0307 	and.w	r3, r3, #7
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	429a      	cmp	r2, r3
 800466e:	d001      	beq.n	8004674 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e0b8      	b.n	80047e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d020      	beq.n	80046c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	2b00      	cmp	r3, #0
 800468a:	d005      	beq.n	8004698 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800468c:	4b59      	ldr	r3, [pc, #356]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	4a58      	ldr	r2, [pc, #352]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004692:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004696:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0308 	and.w	r3, r3, #8
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d005      	beq.n	80046b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046a4:	4b53      	ldr	r3, [pc, #332]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	4a52      	ldr	r2, [pc, #328]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 80046aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80046ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046b0:	4b50      	ldr	r3, [pc, #320]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	494d      	ldr	r1, [pc, #308]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d044      	beq.n	8004758 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d107      	bne.n	80046e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046d6:	4b47      	ldr	r3, [pc, #284]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d119      	bne.n	8004716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e07f      	b.n	80047e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d003      	beq.n	80046f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046f2:	2b03      	cmp	r3, #3
 80046f4:	d107      	bne.n	8004706 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046f6:	4b3f      	ldr	r3, [pc, #252]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d109      	bne.n	8004716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e06f      	b.n	80047e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004706:	4b3b      	ldr	r3, [pc, #236]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e067      	b.n	80047e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004716:	4b37      	ldr	r3, [pc, #220]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f023 0203 	bic.w	r2, r3, #3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	4934      	ldr	r1, [pc, #208]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004724:	4313      	orrs	r3, r2
 8004726:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004728:	f7fe fa04 	bl	8002b34 <HAL_GetTick>
 800472c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800472e:	e00a      	b.n	8004746 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004730:	f7fe fa00 	bl	8002b34 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	f241 3288 	movw	r2, #5000	; 0x1388
 800473e:	4293      	cmp	r3, r2
 8004740:	d901      	bls.n	8004746 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e04f      	b.n	80047e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004746:	4b2b      	ldr	r3, [pc, #172]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f003 020c 	and.w	r2, r3, #12
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	429a      	cmp	r2, r3
 8004756:	d1eb      	bne.n	8004730 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004758:	4b25      	ldr	r3, [pc, #148]	; (80047f0 <HAL_RCC_ClockConfig+0x1b8>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0307 	and.w	r3, r3, #7
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	429a      	cmp	r2, r3
 8004764:	d20c      	bcs.n	8004780 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004766:	4b22      	ldr	r3, [pc, #136]	; (80047f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	b2d2      	uxtb	r2, r2
 800476c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800476e:	4b20      	ldr	r3, [pc, #128]	; (80047f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0307 	and.w	r3, r3, #7
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	429a      	cmp	r2, r3
 800477a:	d001      	beq.n	8004780 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e032      	b.n	80047e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b00      	cmp	r3, #0
 800478a:	d008      	beq.n	800479e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800478c:	4b19      	ldr	r3, [pc, #100]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	4916      	ldr	r1, [pc, #88]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 800479a:	4313      	orrs	r3, r2
 800479c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0308 	and.w	r3, r3, #8
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d009      	beq.n	80047be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047aa:	4b12      	ldr	r3, [pc, #72]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	00db      	lsls	r3, r3, #3
 80047b8:	490e      	ldr	r1, [pc, #56]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047be:	f000 f821 	bl	8004804 <HAL_RCC_GetSysClockFreq>
 80047c2:	4602      	mov	r2, r0
 80047c4:	4b0b      	ldr	r3, [pc, #44]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	091b      	lsrs	r3, r3, #4
 80047ca:	f003 030f 	and.w	r3, r3, #15
 80047ce:	490a      	ldr	r1, [pc, #40]	; (80047f8 <HAL_RCC_ClockConfig+0x1c0>)
 80047d0:	5ccb      	ldrb	r3, [r1, r3]
 80047d2:	fa22 f303 	lsr.w	r3, r2, r3
 80047d6:	4a09      	ldr	r2, [pc, #36]	; (80047fc <HAL_RCC_ClockConfig+0x1c4>)
 80047d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047da:	4b09      	ldr	r3, [pc, #36]	; (8004800 <HAL_RCC_ClockConfig+0x1c8>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4618      	mov	r0, r3
 80047e0:	f7fe f964 	bl	8002aac <HAL_InitTick>

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	40023c00 	.word	0x40023c00
 80047f4:	40023800 	.word	0x40023800
 80047f8:	08006b04 	.word	0x08006b04
 80047fc:	20000010 	.word	0x20000010
 8004800:	20000014 	.word	0x20000014

08004804 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004804:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004808:	b090      	sub	sp, #64	; 0x40
 800480a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800480c:	2300      	movs	r3, #0
 800480e:	637b      	str	r3, [r7, #52]	; 0x34
 8004810:	2300      	movs	r3, #0
 8004812:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004814:	2300      	movs	r3, #0
 8004816:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004818:	2300      	movs	r3, #0
 800481a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800481c:	4b59      	ldr	r3, [pc, #356]	; (8004984 <HAL_RCC_GetSysClockFreq+0x180>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f003 030c 	and.w	r3, r3, #12
 8004824:	2b08      	cmp	r3, #8
 8004826:	d00d      	beq.n	8004844 <HAL_RCC_GetSysClockFreq+0x40>
 8004828:	2b08      	cmp	r3, #8
 800482a:	f200 80a1 	bhi.w	8004970 <HAL_RCC_GetSysClockFreq+0x16c>
 800482e:	2b00      	cmp	r3, #0
 8004830:	d002      	beq.n	8004838 <HAL_RCC_GetSysClockFreq+0x34>
 8004832:	2b04      	cmp	r3, #4
 8004834:	d003      	beq.n	800483e <HAL_RCC_GetSysClockFreq+0x3a>
 8004836:	e09b      	b.n	8004970 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004838:	4b53      	ldr	r3, [pc, #332]	; (8004988 <HAL_RCC_GetSysClockFreq+0x184>)
 800483a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800483c:	e09b      	b.n	8004976 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800483e:	4b53      	ldr	r3, [pc, #332]	; (800498c <HAL_RCC_GetSysClockFreq+0x188>)
 8004840:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004842:	e098      	b.n	8004976 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004844:	4b4f      	ldr	r3, [pc, #316]	; (8004984 <HAL_RCC_GetSysClockFreq+0x180>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800484c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800484e:	4b4d      	ldr	r3, [pc, #308]	; (8004984 <HAL_RCC_GetSysClockFreq+0x180>)
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d028      	beq.n	80048ac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800485a:	4b4a      	ldr	r3, [pc, #296]	; (8004984 <HAL_RCC_GetSysClockFreq+0x180>)
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	099b      	lsrs	r3, r3, #6
 8004860:	2200      	movs	r2, #0
 8004862:	623b      	str	r3, [r7, #32]
 8004864:	627a      	str	r2, [r7, #36]	; 0x24
 8004866:	6a3b      	ldr	r3, [r7, #32]
 8004868:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800486c:	2100      	movs	r1, #0
 800486e:	4b47      	ldr	r3, [pc, #284]	; (800498c <HAL_RCC_GetSysClockFreq+0x188>)
 8004870:	fb03 f201 	mul.w	r2, r3, r1
 8004874:	2300      	movs	r3, #0
 8004876:	fb00 f303 	mul.w	r3, r0, r3
 800487a:	4413      	add	r3, r2
 800487c:	4a43      	ldr	r2, [pc, #268]	; (800498c <HAL_RCC_GetSysClockFreq+0x188>)
 800487e:	fba0 1202 	umull	r1, r2, r0, r2
 8004882:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004884:	460a      	mov	r2, r1
 8004886:	62ba      	str	r2, [r7, #40]	; 0x28
 8004888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800488a:	4413      	add	r3, r2
 800488c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800488e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004890:	2200      	movs	r2, #0
 8004892:	61bb      	str	r3, [r7, #24]
 8004894:	61fa      	str	r2, [r7, #28]
 8004896:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800489a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800489e:	f7fb fff5 	bl	800088c <__aeabi_uldivmod>
 80048a2:	4602      	mov	r2, r0
 80048a4:	460b      	mov	r3, r1
 80048a6:	4613      	mov	r3, r2
 80048a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048aa:	e053      	b.n	8004954 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048ac:	4b35      	ldr	r3, [pc, #212]	; (8004984 <HAL_RCC_GetSysClockFreq+0x180>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	099b      	lsrs	r3, r3, #6
 80048b2:	2200      	movs	r2, #0
 80048b4:	613b      	str	r3, [r7, #16]
 80048b6:	617a      	str	r2, [r7, #20]
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80048be:	f04f 0b00 	mov.w	fp, #0
 80048c2:	4652      	mov	r2, sl
 80048c4:	465b      	mov	r3, fp
 80048c6:	f04f 0000 	mov.w	r0, #0
 80048ca:	f04f 0100 	mov.w	r1, #0
 80048ce:	0159      	lsls	r1, r3, #5
 80048d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048d4:	0150      	lsls	r0, r2, #5
 80048d6:	4602      	mov	r2, r0
 80048d8:	460b      	mov	r3, r1
 80048da:	ebb2 080a 	subs.w	r8, r2, sl
 80048de:	eb63 090b 	sbc.w	r9, r3, fp
 80048e2:	f04f 0200 	mov.w	r2, #0
 80048e6:	f04f 0300 	mov.w	r3, #0
 80048ea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80048ee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80048f2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80048f6:	ebb2 0408 	subs.w	r4, r2, r8
 80048fa:	eb63 0509 	sbc.w	r5, r3, r9
 80048fe:	f04f 0200 	mov.w	r2, #0
 8004902:	f04f 0300 	mov.w	r3, #0
 8004906:	00eb      	lsls	r3, r5, #3
 8004908:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800490c:	00e2      	lsls	r2, r4, #3
 800490e:	4614      	mov	r4, r2
 8004910:	461d      	mov	r5, r3
 8004912:	eb14 030a 	adds.w	r3, r4, sl
 8004916:	603b      	str	r3, [r7, #0]
 8004918:	eb45 030b 	adc.w	r3, r5, fp
 800491c:	607b      	str	r3, [r7, #4]
 800491e:	f04f 0200 	mov.w	r2, #0
 8004922:	f04f 0300 	mov.w	r3, #0
 8004926:	e9d7 4500 	ldrd	r4, r5, [r7]
 800492a:	4629      	mov	r1, r5
 800492c:	028b      	lsls	r3, r1, #10
 800492e:	4621      	mov	r1, r4
 8004930:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004934:	4621      	mov	r1, r4
 8004936:	028a      	lsls	r2, r1, #10
 8004938:	4610      	mov	r0, r2
 800493a:	4619      	mov	r1, r3
 800493c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800493e:	2200      	movs	r2, #0
 8004940:	60bb      	str	r3, [r7, #8]
 8004942:	60fa      	str	r2, [r7, #12]
 8004944:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004948:	f7fb ffa0 	bl	800088c <__aeabi_uldivmod>
 800494c:	4602      	mov	r2, r0
 800494e:	460b      	mov	r3, r1
 8004950:	4613      	mov	r3, r2
 8004952:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004954:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <HAL_RCC_GetSysClockFreq+0x180>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	0c1b      	lsrs	r3, r3, #16
 800495a:	f003 0303 	and.w	r3, r3, #3
 800495e:	3301      	adds	r3, #1
 8004960:	005b      	lsls	r3, r3, #1
 8004962:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004964:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004968:	fbb2 f3f3 	udiv	r3, r2, r3
 800496c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800496e:	e002      	b.n	8004976 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004970:	4b05      	ldr	r3, [pc, #20]	; (8004988 <HAL_RCC_GetSysClockFreq+0x184>)
 8004972:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004974:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004978:	4618      	mov	r0, r3
 800497a:	3740      	adds	r7, #64	; 0x40
 800497c:	46bd      	mov	sp, r7
 800497e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004982:	bf00      	nop
 8004984:	40023800 	.word	0x40023800
 8004988:	00f42400 	.word	0x00f42400
 800498c:	017d7840 	.word	0x017d7840

08004990 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004990:	b480      	push	{r7}
 8004992:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004994:	4b03      	ldr	r3, [pc, #12]	; (80049a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004996:	681b      	ldr	r3, [r3, #0]
}
 8004998:	4618      	mov	r0, r3
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	20000010 	.word	0x20000010

080049a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80049ac:	f7ff fff0 	bl	8004990 <HAL_RCC_GetHCLKFreq>
 80049b0:	4602      	mov	r2, r0
 80049b2:	4b05      	ldr	r3, [pc, #20]	; (80049c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	0a9b      	lsrs	r3, r3, #10
 80049b8:	f003 0307 	and.w	r3, r3, #7
 80049bc:	4903      	ldr	r1, [pc, #12]	; (80049cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80049be:	5ccb      	ldrb	r3, [r1, r3]
 80049c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	40023800 	.word	0x40023800
 80049cc:	08006b14 	.word	0x08006b14

080049d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80049d4:	f7ff ffdc 	bl	8004990 <HAL_RCC_GetHCLKFreq>
 80049d8:	4602      	mov	r2, r0
 80049da:	4b05      	ldr	r3, [pc, #20]	; (80049f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	0b5b      	lsrs	r3, r3, #13
 80049e0:	f003 0307 	and.w	r3, r3, #7
 80049e4:	4903      	ldr	r1, [pc, #12]	; (80049f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049e6:	5ccb      	ldrb	r3, [r1, r3]
 80049e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	40023800 	.word	0x40023800
 80049f4:	08006b14 	.word	0x08006b14

080049f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e07b      	b.n	8004b02 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d108      	bne.n	8004a24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a1a:	d009      	beq.n	8004a30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	61da      	str	r2, [r3, #28]
 8004a22:	e005      	b.n	8004a30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d106      	bne.n	8004a50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7fd febe 	bl	80027cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2202      	movs	r2, #2
 8004a54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a66:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a82:	431a      	orrs	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	431a      	orrs	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	431a      	orrs	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	69db      	ldr	r3, [r3, #28]
 8004aa6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a1b      	ldr	r3, [r3, #32]
 8004ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab4:	ea42 0103 	orr.w	r1, r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004abc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	0c1b      	lsrs	r3, r3, #16
 8004ace:	f003 0104 	and.w	r1, r3, #4
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad6:	f003 0210 	and.w	r2, r3, #16
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	69da      	ldr	r2, [r3, #28]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004af0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b088      	sub	sp, #32
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	60f8      	str	r0, [r7, #12]
 8004b12:	60b9      	str	r1, [r7, #8]
 8004b14:	603b      	str	r3, [r7, #0]
 8004b16:	4613      	mov	r3, r2
 8004b18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d101      	bne.n	8004b2c <HAL_SPI_Transmit+0x22>
 8004b28:	2302      	movs	r3, #2
 8004b2a:	e126      	b.n	8004d7a <HAL_SPI_Transmit+0x270>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b34:	f7fd fffe 	bl	8002b34 <HAL_GetTick>
 8004b38:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004b3a:	88fb      	ldrh	r3, [r7, #6]
 8004b3c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d002      	beq.n	8004b50 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b4e:	e10b      	b.n	8004d68 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d002      	beq.n	8004b5c <HAL_SPI_Transmit+0x52>
 8004b56:	88fb      	ldrh	r3, [r7, #6]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d102      	bne.n	8004b62 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b60:	e102      	b.n	8004d68 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2203      	movs	r2, #3
 8004b66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	88fa      	ldrh	r2, [r7, #6]
 8004b7a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	88fa      	ldrh	r2, [r7, #6]
 8004b80:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ba8:	d10f      	bne.n	8004bca <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bb8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bc8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd4:	2b40      	cmp	r3, #64	; 0x40
 8004bd6:	d007      	beq.n	8004be8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004be6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bf0:	d14b      	bne.n	8004c8a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d002      	beq.n	8004c00 <HAL_SPI_Transmit+0xf6>
 8004bfa:	8afb      	ldrh	r3, [r7, #22]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d13e      	bne.n	8004c7e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c04:	881a      	ldrh	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c10:	1c9a      	adds	r2, r3, #2
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c24:	e02b      	b.n	8004c7e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d112      	bne.n	8004c5a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c38:	881a      	ldrh	r2, [r3, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c44:	1c9a      	adds	r2, r3, #2
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	3b01      	subs	r3, #1
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c58:	e011      	b.n	8004c7e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c5a:	f7fd ff6b 	bl	8002b34 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d803      	bhi.n	8004c72 <HAL_SPI_Transmit+0x168>
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c70:	d102      	bne.n	8004c78 <HAL_SPI_Transmit+0x16e>
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d102      	bne.n	8004c7e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c7c:	e074      	b.n	8004d68 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1ce      	bne.n	8004c26 <HAL_SPI_Transmit+0x11c>
 8004c88:	e04c      	b.n	8004d24 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d002      	beq.n	8004c98 <HAL_SPI_Transmit+0x18e>
 8004c92:	8afb      	ldrh	r3, [r7, #22]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d140      	bne.n	8004d1a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	330c      	adds	r3, #12
 8004ca2:	7812      	ldrb	r2, [r2, #0]
 8004ca4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004caa:	1c5a      	adds	r2, r3, #1
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	b29a      	uxth	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004cbe:	e02c      	b.n	8004d1a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d113      	bne.n	8004cf6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	330c      	adds	r3, #12
 8004cd8:	7812      	ldrb	r2, [r2, #0]
 8004cda:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce0:	1c5a      	adds	r2, r3, #1
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	3b01      	subs	r3, #1
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	86da      	strh	r2, [r3, #54]	; 0x36
 8004cf4:	e011      	b.n	8004d1a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cf6:	f7fd ff1d 	bl	8002b34 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	683a      	ldr	r2, [r7, #0]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d803      	bhi.n	8004d0e <HAL_SPI_Transmit+0x204>
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d0c:	d102      	bne.n	8004d14 <HAL_SPI_Transmit+0x20a>
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d102      	bne.n	8004d1a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d18:	e026      	b.n	8004d68 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1cd      	bne.n	8004cc0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	6839      	ldr	r1, [r7, #0]
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f000 fbd9 	bl	80054e0 <SPI_EndRxTxTransaction>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d002      	beq.n	8004d3a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2220      	movs	r2, #32
 8004d38:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10a      	bne.n	8004d58 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d42:	2300      	movs	r3, #0
 8004d44:	613b      	str	r3, [r7, #16]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	613b      	str	r3, [r7, #16]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	613b      	str	r3, [r7, #16]
 8004d56:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d002      	beq.n	8004d66 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	77fb      	strb	r3, [r7, #31]
 8004d64:	e000      	b.n	8004d68 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004d66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d78:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3720      	adds	r7, #32
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b088      	sub	sp, #32
 8004d86:	af02      	add	r7, sp, #8
 8004d88:	60f8      	str	r0, [r7, #12]
 8004d8a:	60b9      	str	r1, [r7, #8]
 8004d8c:	603b      	str	r3, [r7, #0]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d92:	2300      	movs	r3, #0
 8004d94:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d9e:	d112      	bne.n	8004dc6 <HAL_SPI_Receive+0x44>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d10e      	bne.n	8004dc6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2204      	movs	r2, #4
 8004dac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004db0:	88fa      	ldrh	r2, [r7, #6]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	4613      	mov	r3, r2
 8004db8:	68ba      	ldr	r2, [r7, #8]
 8004dba:	68b9      	ldr	r1, [r7, #8]
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f000 f8f1 	bl	8004fa4 <HAL_SPI_TransmitReceive>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	e0ea      	b.n	8004f9c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d101      	bne.n	8004dd4 <HAL_SPI_Receive+0x52>
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	e0e3      	b.n	8004f9c <HAL_SPI_Receive+0x21a>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ddc:	f7fd feaa 	bl	8002b34 <HAL_GetTick>
 8004de0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d002      	beq.n	8004df4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004dee:	2302      	movs	r3, #2
 8004df0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004df2:	e0ca      	b.n	8004f8a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d002      	beq.n	8004e00 <HAL_SPI_Receive+0x7e>
 8004dfa:	88fb      	ldrh	r3, [r7, #6]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d102      	bne.n	8004e06 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e04:	e0c1      	b.n	8004f8a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2204      	movs	r2, #4
 8004e0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2200      	movs	r2, #0
 8004e12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	88fa      	ldrh	r2, [r7, #6]
 8004e1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	88fa      	ldrh	r2, [r7, #6]
 8004e24:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e4c:	d10f      	bne.n	8004e6e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e6c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e78:	2b40      	cmp	r3, #64	; 0x40
 8004e7a:	d007      	beq.n	8004e8c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e8a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d162      	bne.n	8004f5a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004e94:	e02e      	b.n	8004ef4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	f003 0301 	and.w	r3, r3, #1
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d115      	bne.n	8004ed0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f103 020c 	add.w	r2, r3, #12
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb0:	7812      	ldrb	r2, [r2, #0]
 8004eb2:	b2d2      	uxtb	r2, r2
 8004eb4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eba:	1c5a      	adds	r2, r3, #1
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ece:	e011      	b.n	8004ef4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ed0:	f7fd fe30 	bl	8002b34 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	683a      	ldr	r2, [r7, #0]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d803      	bhi.n	8004ee8 <HAL_SPI_Receive+0x166>
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee6:	d102      	bne.n	8004eee <HAL_SPI_Receive+0x16c>
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d102      	bne.n	8004ef4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004ef2:	e04a      	b.n	8004f8a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1cb      	bne.n	8004e96 <HAL_SPI_Receive+0x114>
 8004efe:	e031      	b.n	8004f64 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d113      	bne.n	8004f36 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68da      	ldr	r2, [r3, #12]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f18:	b292      	uxth	r2, r2
 8004f1a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f20:	1c9a      	adds	r2, r3, #2
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f34:	e011      	b.n	8004f5a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f36:	f7fd fdfd 	bl	8002b34 <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d803      	bhi.n	8004f4e <HAL_SPI_Receive+0x1cc>
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f4c:	d102      	bne.n	8004f54 <HAL_SPI_Receive+0x1d2>
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d102      	bne.n	8004f5a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004f58:	e017      	b.n	8004f8a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1cd      	bne.n	8004f00 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f64:	693a      	ldr	r2, [r7, #16]
 8004f66:	6839      	ldr	r1, [r7, #0]
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f000 fa53 	bl	8005414 <SPI_EndRxTransaction>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d002      	beq.n	8004f7a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2220      	movs	r2, #32
 8004f78:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d002      	beq.n	8004f88 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	75fb      	strb	r3, [r7, #23]
 8004f86:	e000      	b.n	8004f8a <HAL_SPI_Receive+0x208>
  }

error :
 8004f88:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3718      	adds	r7, #24
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b08c      	sub	sp, #48	; 0x30
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
 8004fb0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d101      	bne.n	8004fca <HAL_SPI_TransmitReceive+0x26>
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	e18a      	b.n	80052e0 <HAL_SPI_TransmitReceive+0x33c>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fd2:	f7fd fdaf 	bl	8002b34 <HAL_GetTick>
 8004fd6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004fe8:	887b      	ldrh	r3, [r7, #2]
 8004fea:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004fec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d00f      	beq.n	8005014 <HAL_SPI_TransmitReceive+0x70>
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ffa:	d107      	bne.n	800500c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d103      	bne.n	800500c <HAL_SPI_TransmitReceive+0x68>
 8005004:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005008:	2b04      	cmp	r3, #4
 800500a:	d003      	beq.n	8005014 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800500c:	2302      	movs	r3, #2
 800500e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005012:	e15b      	b.n	80052cc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d005      	beq.n	8005026 <HAL_SPI_TransmitReceive+0x82>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d002      	beq.n	8005026 <HAL_SPI_TransmitReceive+0x82>
 8005020:	887b      	ldrh	r3, [r7, #2]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d103      	bne.n	800502e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800502c:	e14e      	b.n	80052cc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b04      	cmp	r3, #4
 8005038:	d003      	beq.n	8005042 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2205      	movs	r2, #5
 800503e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	887a      	ldrh	r2, [r7, #2]
 8005052:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	887a      	ldrh	r2, [r7, #2]
 8005058:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	887a      	ldrh	r2, [r7, #2]
 8005064:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	887a      	ldrh	r2, [r7, #2]
 800506a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005082:	2b40      	cmp	r3, #64	; 0x40
 8005084:	d007      	beq.n	8005096 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005094:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800509e:	d178      	bne.n	8005192 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d002      	beq.n	80050ae <HAL_SPI_TransmitReceive+0x10a>
 80050a8:	8b7b      	ldrh	r3, [r7, #26]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d166      	bne.n	800517c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b2:	881a      	ldrh	r2, [r3, #0]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050be:	1c9a      	adds	r2, r3, #2
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	3b01      	subs	r3, #1
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050d2:	e053      	b.n	800517c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d11b      	bne.n	800511a <HAL_SPI_TransmitReceive+0x176>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d016      	beq.n	800511a <HAL_SPI_TransmitReceive+0x176>
 80050ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d113      	bne.n	800511a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f6:	881a      	ldrh	r2, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005102:	1c9a      	adds	r2, r3, #2
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800510c:	b29b      	uxth	r3, r3
 800510e:	3b01      	subs	r3, #1
 8005110:	b29a      	uxth	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005116:	2300      	movs	r3, #0
 8005118:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f003 0301 	and.w	r3, r3, #1
 8005124:	2b01      	cmp	r3, #1
 8005126:	d119      	bne.n	800515c <HAL_SPI_TransmitReceive+0x1b8>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800512c:	b29b      	uxth	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d014      	beq.n	800515c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68da      	ldr	r2, [r3, #12]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513c:	b292      	uxth	r2, r2
 800513e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005144:	1c9a      	adds	r2, r3, #2
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800514e:	b29b      	uxth	r3, r3
 8005150:	3b01      	subs	r3, #1
 8005152:	b29a      	uxth	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005158:	2301      	movs	r3, #1
 800515a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800515c:	f7fd fcea 	bl	8002b34 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005168:	429a      	cmp	r2, r3
 800516a:	d807      	bhi.n	800517c <HAL_SPI_TransmitReceive+0x1d8>
 800516c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005172:	d003      	beq.n	800517c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800517a:	e0a7      	b.n	80052cc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005180:	b29b      	uxth	r3, r3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1a6      	bne.n	80050d4 <HAL_SPI_TransmitReceive+0x130>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800518a:	b29b      	uxth	r3, r3
 800518c:	2b00      	cmp	r3, #0
 800518e:	d1a1      	bne.n	80050d4 <HAL_SPI_TransmitReceive+0x130>
 8005190:	e07c      	b.n	800528c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d002      	beq.n	80051a0 <HAL_SPI_TransmitReceive+0x1fc>
 800519a:	8b7b      	ldrh	r3, [r7, #26]
 800519c:	2b01      	cmp	r3, #1
 800519e:	d16b      	bne.n	8005278 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	330c      	adds	r3, #12
 80051aa:	7812      	ldrb	r2, [r2, #0]
 80051ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b2:	1c5a      	adds	r2, r3, #1
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051bc:	b29b      	uxth	r3, r3
 80051be:	3b01      	subs	r3, #1
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051c6:	e057      	b.n	8005278 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f003 0302 	and.w	r3, r3, #2
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d11c      	bne.n	8005210 <HAL_SPI_TransmitReceive+0x26c>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051da:	b29b      	uxth	r3, r3
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d017      	beq.n	8005210 <HAL_SPI_TransmitReceive+0x26c>
 80051e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d114      	bne.n	8005210 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	330c      	adds	r3, #12
 80051f0:	7812      	ldrb	r2, [r2, #0]
 80051f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f8:	1c5a      	adds	r2, r3, #1
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005202:	b29b      	uxth	r3, r3
 8005204:	3b01      	subs	r3, #1
 8005206:	b29a      	uxth	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800520c:	2300      	movs	r3, #0
 800520e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b01      	cmp	r3, #1
 800521c:	d119      	bne.n	8005252 <HAL_SPI_TransmitReceive+0x2ae>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005222:	b29b      	uxth	r3, r3
 8005224:	2b00      	cmp	r3, #0
 8005226:	d014      	beq.n	8005252 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68da      	ldr	r2, [r3, #12]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005232:	b2d2      	uxtb	r2, r2
 8005234:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523a:	1c5a      	adds	r2, r3, #1
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005244:	b29b      	uxth	r3, r3
 8005246:	3b01      	subs	r3, #1
 8005248:	b29a      	uxth	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800524e:	2301      	movs	r3, #1
 8005250:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005252:	f7fd fc6f 	bl	8002b34 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800525e:	429a      	cmp	r2, r3
 8005260:	d803      	bhi.n	800526a <HAL_SPI_TransmitReceive+0x2c6>
 8005262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005268:	d102      	bne.n	8005270 <HAL_SPI_TransmitReceive+0x2cc>
 800526a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526c:	2b00      	cmp	r3, #0
 800526e:	d103      	bne.n	8005278 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005276:	e029      	b.n	80052cc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800527c:	b29b      	uxth	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1a2      	bne.n	80051c8 <HAL_SPI_TransmitReceive+0x224>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005286:	b29b      	uxth	r3, r3
 8005288:	2b00      	cmp	r3, #0
 800528a:	d19d      	bne.n	80051c8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800528c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800528e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f000 f925 	bl	80054e0 <SPI_EndRxTxTransaction>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d006      	beq.n	80052aa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2220      	movs	r2, #32
 80052a6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80052a8:	e010      	b.n	80052cc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10b      	bne.n	80052ca <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052b2:	2300      	movs	r3, #0
 80052b4:	617b      	str	r3, [r7, #20]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	617b      	str	r3, [r7, #20]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	617b      	str	r3, [r7, #20]
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	e000      	b.n	80052cc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80052ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80052dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3730      	adds	r7, #48	; 0x30
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052f6:	b2db      	uxtb	r3, r3
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b088      	sub	sp, #32
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	603b      	str	r3, [r7, #0]
 8005310:	4613      	mov	r3, r2
 8005312:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005314:	f7fd fc0e 	bl	8002b34 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531c:	1a9b      	subs	r3, r3, r2
 800531e:	683a      	ldr	r2, [r7, #0]
 8005320:	4413      	add	r3, r2
 8005322:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005324:	f7fd fc06 	bl	8002b34 <HAL_GetTick>
 8005328:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800532a:	4b39      	ldr	r3, [pc, #228]	; (8005410 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	015b      	lsls	r3, r3, #5
 8005330:	0d1b      	lsrs	r3, r3, #20
 8005332:	69fa      	ldr	r2, [r7, #28]
 8005334:	fb02 f303 	mul.w	r3, r2, r3
 8005338:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800533a:	e054      	b.n	80053e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005342:	d050      	beq.n	80053e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005344:	f7fd fbf6 	bl	8002b34 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	69fa      	ldr	r2, [r7, #28]
 8005350:	429a      	cmp	r2, r3
 8005352:	d902      	bls.n	800535a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d13d      	bne.n	80053d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005368:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005372:	d111      	bne.n	8005398 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800537c:	d004      	beq.n	8005388 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005386:	d107      	bne.n	8005398 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005396:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053a0:	d10f      	bne.n	80053c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053b0:	601a      	str	r2, [r3, #0]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e017      	b.n	8005406 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d101      	bne.n	80053e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80053dc:	2300      	movs	r3, #0
 80053de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	3b01      	subs	r3, #1
 80053e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	689a      	ldr	r2, [r3, #8]
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	4013      	ands	r3, r2
 80053f0:	68ba      	ldr	r2, [r7, #8]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	bf0c      	ite	eq
 80053f6:	2301      	moveq	r3, #1
 80053f8:	2300      	movne	r3, #0
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	461a      	mov	r2, r3
 80053fe:	79fb      	ldrb	r3, [r7, #7]
 8005400:	429a      	cmp	r2, r3
 8005402:	d19b      	bne.n	800533c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3720      	adds	r7, #32
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	20000010 	.word	0x20000010

08005414 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af02      	add	r7, sp, #8
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005428:	d111      	bne.n	800544e <SPI_EndRxTransaction+0x3a>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005432:	d004      	beq.n	800543e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800543c:	d107      	bne.n	800544e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800544c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005456:	d12a      	bne.n	80054ae <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005460:	d012      	beq.n	8005488 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	9300      	str	r3, [sp, #0]
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	2200      	movs	r2, #0
 800546a:	2180      	movs	r1, #128	; 0x80
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f7ff ff49 	bl	8005304 <SPI_WaitFlagStateUntilTimeout>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d02d      	beq.n	80054d4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800547c:	f043 0220 	orr.w	r2, r3, #32
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e026      	b.n	80054d6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	9300      	str	r3, [sp, #0]
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	2200      	movs	r2, #0
 8005490:	2101      	movs	r1, #1
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	f7ff ff36 	bl	8005304 <SPI_WaitFlagStateUntilTimeout>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d01a      	beq.n	80054d4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a2:	f043 0220 	orr.w	r2, r3, #32
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e013      	b.n	80054d6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	9300      	str	r3, [sp, #0]
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	2200      	movs	r2, #0
 80054b6:	2101      	movs	r1, #1
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f7ff ff23 	bl	8005304 <SPI_WaitFlagStateUntilTimeout>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d007      	beq.n	80054d4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c8:	f043 0220 	orr.w	r2, r3, #32
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e000      	b.n	80054d6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
	...

080054e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b088      	sub	sp, #32
 80054e4:	af02      	add	r7, sp, #8
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80054ec:	4b1b      	ldr	r3, [pc, #108]	; (800555c <SPI_EndRxTxTransaction+0x7c>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a1b      	ldr	r2, [pc, #108]	; (8005560 <SPI_EndRxTxTransaction+0x80>)
 80054f2:	fba2 2303 	umull	r2, r3, r2, r3
 80054f6:	0d5b      	lsrs	r3, r3, #21
 80054f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80054fc:	fb02 f303 	mul.w	r3, r2, r3
 8005500:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800550a:	d112      	bne.n	8005532 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	9300      	str	r3, [sp, #0]
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	2200      	movs	r2, #0
 8005514:	2180      	movs	r1, #128	; 0x80
 8005516:	68f8      	ldr	r0, [r7, #12]
 8005518:	f7ff fef4 	bl	8005304 <SPI_WaitFlagStateUntilTimeout>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d016      	beq.n	8005550 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005526:	f043 0220 	orr.w	r2, r3, #32
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e00f      	b.n	8005552 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00a      	beq.n	800554e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	3b01      	subs	r3, #1
 800553c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005548:	2b80      	cmp	r3, #128	; 0x80
 800554a:	d0f2      	beq.n	8005532 <SPI_EndRxTxTransaction+0x52>
 800554c:	e000      	b.n	8005550 <SPI_EndRxTxTransaction+0x70>
        break;
 800554e:	bf00      	nop
  }

  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3718      	adds	r7, #24
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	20000010 	.word	0x20000010
 8005560:	165e9f81 	.word	0x165e9f81

08005564 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e041      	b.n	80055fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d106      	bne.n	8005590 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f7fd f966 	bl	800285c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	3304      	adds	r3, #4
 80055a0:	4619      	mov	r1, r3
 80055a2:	4610      	mov	r0, r2
 80055a4:	f000 f950 	bl	8005848 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3708      	adds	r7, #8
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
	...

08005604 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005612:	b2db      	uxtb	r3, r3
 8005614:	2b01      	cmp	r3, #1
 8005616:	d001      	beq.n	800561c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e03c      	b.n	8005696 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2202      	movs	r2, #2
 8005620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a1e      	ldr	r2, [pc, #120]	; (80056a4 <HAL_TIM_Base_Start+0xa0>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d018      	beq.n	8005660 <HAL_TIM_Base_Start+0x5c>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005636:	d013      	beq.n	8005660 <HAL_TIM_Base_Start+0x5c>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a1a      	ldr	r2, [pc, #104]	; (80056a8 <HAL_TIM_Base_Start+0xa4>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d00e      	beq.n	8005660 <HAL_TIM_Base_Start+0x5c>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a19      	ldr	r2, [pc, #100]	; (80056ac <HAL_TIM_Base_Start+0xa8>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d009      	beq.n	8005660 <HAL_TIM_Base_Start+0x5c>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a17      	ldr	r2, [pc, #92]	; (80056b0 <HAL_TIM_Base_Start+0xac>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d004      	beq.n	8005660 <HAL_TIM_Base_Start+0x5c>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a16      	ldr	r2, [pc, #88]	; (80056b4 <HAL_TIM_Base_Start+0xb0>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d111      	bne.n	8005684 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	f003 0307 	and.w	r3, r3, #7
 800566a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2b06      	cmp	r3, #6
 8005670:	d010      	beq.n	8005694 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f042 0201 	orr.w	r2, r2, #1
 8005680:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005682:	e007      	b.n	8005694 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f042 0201 	orr.w	r2, r2, #1
 8005692:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3714      	adds	r7, #20
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	40010000 	.word	0x40010000
 80056a8:	40000400 	.word	0x40000400
 80056ac:	40000800 	.word	0x40000800
 80056b0:	40000c00 	.word	0x40000c00
 80056b4:	40014000 	.word	0x40014000

080056b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056c2:	2300      	movs	r3, #0
 80056c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d101      	bne.n	80056d4 <HAL_TIM_ConfigClockSource+0x1c>
 80056d0:	2302      	movs	r3, #2
 80056d2:	e0b4      	b.n	800583e <HAL_TIM_ConfigClockSource+0x186>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2202      	movs	r2, #2
 80056e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80056f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68ba      	ldr	r2, [r7, #8]
 8005702:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800570c:	d03e      	beq.n	800578c <HAL_TIM_ConfigClockSource+0xd4>
 800570e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005712:	f200 8087 	bhi.w	8005824 <HAL_TIM_ConfigClockSource+0x16c>
 8005716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800571a:	f000 8086 	beq.w	800582a <HAL_TIM_ConfigClockSource+0x172>
 800571e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005722:	d87f      	bhi.n	8005824 <HAL_TIM_ConfigClockSource+0x16c>
 8005724:	2b70      	cmp	r3, #112	; 0x70
 8005726:	d01a      	beq.n	800575e <HAL_TIM_ConfigClockSource+0xa6>
 8005728:	2b70      	cmp	r3, #112	; 0x70
 800572a:	d87b      	bhi.n	8005824 <HAL_TIM_ConfigClockSource+0x16c>
 800572c:	2b60      	cmp	r3, #96	; 0x60
 800572e:	d050      	beq.n	80057d2 <HAL_TIM_ConfigClockSource+0x11a>
 8005730:	2b60      	cmp	r3, #96	; 0x60
 8005732:	d877      	bhi.n	8005824 <HAL_TIM_ConfigClockSource+0x16c>
 8005734:	2b50      	cmp	r3, #80	; 0x50
 8005736:	d03c      	beq.n	80057b2 <HAL_TIM_ConfigClockSource+0xfa>
 8005738:	2b50      	cmp	r3, #80	; 0x50
 800573a:	d873      	bhi.n	8005824 <HAL_TIM_ConfigClockSource+0x16c>
 800573c:	2b40      	cmp	r3, #64	; 0x40
 800573e:	d058      	beq.n	80057f2 <HAL_TIM_ConfigClockSource+0x13a>
 8005740:	2b40      	cmp	r3, #64	; 0x40
 8005742:	d86f      	bhi.n	8005824 <HAL_TIM_ConfigClockSource+0x16c>
 8005744:	2b30      	cmp	r3, #48	; 0x30
 8005746:	d064      	beq.n	8005812 <HAL_TIM_ConfigClockSource+0x15a>
 8005748:	2b30      	cmp	r3, #48	; 0x30
 800574a:	d86b      	bhi.n	8005824 <HAL_TIM_ConfigClockSource+0x16c>
 800574c:	2b20      	cmp	r3, #32
 800574e:	d060      	beq.n	8005812 <HAL_TIM_ConfigClockSource+0x15a>
 8005750:	2b20      	cmp	r3, #32
 8005752:	d867      	bhi.n	8005824 <HAL_TIM_ConfigClockSource+0x16c>
 8005754:	2b00      	cmp	r3, #0
 8005756:	d05c      	beq.n	8005812 <HAL_TIM_ConfigClockSource+0x15a>
 8005758:	2b10      	cmp	r3, #16
 800575a:	d05a      	beq.n	8005812 <HAL_TIM_ConfigClockSource+0x15a>
 800575c:	e062      	b.n	8005824 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6818      	ldr	r0, [r3, #0]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	6899      	ldr	r1, [r3, #8]
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	685a      	ldr	r2, [r3, #4]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	f000 f965 	bl	8005a3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005780:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	609a      	str	r2, [r3, #8]
      break;
 800578a:	e04f      	b.n	800582c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6818      	ldr	r0, [r3, #0]
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	6899      	ldr	r1, [r3, #8]
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	685a      	ldr	r2, [r3, #4]
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	f000 f94e 	bl	8005a3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	689a      	ldr	r2, [r3, #8]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057ae:	609a      	str	r2, [r3, #8]
      break;
 80057b0:	e03c      	b.n	800582c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6818      	ldr	r0, [r3, #0]
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	6859      	ldr	r1, [r3, #4]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	461a      	mov	r2, r3
 80057c0:	f000 f8c2 	bl	8005948 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2150      	movs	r1, #80	; 0x50
 80057ca:	4618      	mov	r0, r3
 80057cc:	f000 f91b 	bl	8005a06 <TIM_ITRx_SetConfig>
      break;
 80057d0:	e02c      	b.n	800582c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6818      	ldr	r0, [r3, #0]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	6859      	ldr	r1, [r3, #4]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	461a      	mov	r2, r3
 80057e0:	f000 f8e1 	bl	80059a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2160      	movs	r1, #96	; 0x60
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 f90b 	bl	8005a06 <TIM_ITRx_SetConfig>
      break;
 80057f0:	e01c      	b.n	800582c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6818      	ldr	r0, [r3, #0]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	6859      	ldr	r1, [r3, #4]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	461a      	mov	r2, r3
 8005800:	f000 f8a2 	bl	8005948 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2140      	movs	r1, #64	; 0x40
 800580a:	4618      	mov	r0, r3
 800580c:	f000 f8fb 	bl	8005a06 <TIM_ITRx_SetConfig>
      break;
 8005810:	e00c      	b.n	800582c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4619      	mov	r1, r3
 800581c:	4610      	mov	r0, r2
 800581e:	f000 f8f2 	bl	8005a06 <TIM_ITRx_SetConfig>
      break;
 8005822:	e003      	b.n	800582c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	73fb      	strb	r3, [r7, #15]
      break;
 8005828:	e000      	b.n	800582c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800582a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800583c:	7bfb      	ldrb	r3, [r7, #15]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
	...

08005848 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a34      	ldr	r2, [pc, #208]	; (800592c <TIM_Base_SetConfig+0xe4>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d00f      	beq.n	8005880 <TIM_Base_SetConfig+0x38>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005866:	d00b      	beq.n	8005880 <TIM_Base_SetConfig+0x38>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a31      	ldr	r2, [pc, #196]	; (8005930 <TIM_Base_SetConfig+0xe8>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d007      	beq.n	8005880 <TIM_Base_SetConfig+0x38>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a30      	ldr	r2, [pc, #192]	; (8005934 <TIM_Base_SetConfig+0xec>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d003      	beq.n	8005880 <TIM_Base_SetConfig+0x38>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a2f      	ldr	r2, [pc, #188]	; (8005938 <TIM_Base_SetConfig+0xf0>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d108      	bne.n	8005892 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005886:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	4313      	orrs	r3, r2
 8005890:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a25      	ldr	r2, [pc, #148]	; (800592c <TIM_Base_SetConfig+0xe4>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d01b      	beq.n	80058d2 <TIM_Base_SetConfig+0x8a>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058a0:	d017      	beq.n	80058d2 <TIM_Base_SetConfig+0x8a>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a22      	ldr	r2, [pc, #136]	; (8005930 <TIM_Base_SetConfig+0xe8>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d013      	beq.n	80058d2 <TIM_Base_SetConfig+0x8a>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a21      	ldr	r2, [pc, #132]	; (8005934 <TIM_Base_SetConfig+0xec>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d00f      	beq.n	80058d2 <TIM_Base_SetConfig+0x8a>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a20      	ldr	r2, [pc, #128]	; (8005938 <TIM_Base_SetConfig+0xf0>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d00b      	beq.n	80058d2 <TIM_Base_SetConfig+0x8a>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a1f      	ldr	r2, [pc, #124]	; (800593c <TIM_Base_SetConfig+0xf4>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d007      	beq.n	80058d2 <TIM_Base_SetConfig+0x8a>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a1e      	ldr	r2, [pc, #120]	; (8005940 <TIM_Base_SetConfig+0xf8>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d003      	beq.n	80058d2 <TIM_Base_SetConfig+0x8a>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a1d      	ldr	r2, [pc, #116]	; (8005944 <TIM_Base_SetConfig+0xfc>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d108      	bne.n	80058e4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a08      	ldr	r2, [pc, #32]	; (800592c <TIM_Base_SetConfig+0xe4>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d103      	bne.n	8005918 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	691a      	ldr	r2, [r3, #16]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	615a      	str	r2, [r3, #20]
}
 800591e:	bf00      	nop
 8005920:	3714      	adds	r7, #20
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	40010000 	.word	0x40010000
 8005930:	40000400 	.word	0x40000400
 8005934:	40000800 	.word	0x40000800
 8005938:	40000c00 	.word	0x40000c00
 800593c:	40014000 	.word	0x40014000
 8005940:	40014400 	.word	0x40014400
 8005944:	40014800 	.word	0x40014800

08005948 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005948:	b480      	push	{r7}
 800594a:	b087      	sub	sp, #28
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6a1b      	ldr	r3, [r3, #32]
 8005958:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	f023 0201 	bic.w	r2, r3, #1
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005972:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	011b      	lsls	r3, r3, #4
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	4313      	orrs	r3, r2
 800597c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f023 030a 	bic.w	r3, r3, #10
 8005984:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	4313      	orrs	r3, r2
 800598c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	621a      	str	r2, [r3, #32]
}
 800599a:	bf00      	nop
 800599c:	371c      	adds	r7, #28
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr

080059a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059a6:	b480      	push	{r7}
 80059a8:	b087      	sub	sp, #28
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	60f8      	str	r0, [r7, #12]
 80059ae:	60b9      	str	r1, [r7, #8]
 80059b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	f023 0210 	bic.w	r2, r3, #16
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6a1b      	ldr	r3, [r3, #32]
 80059c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	031b      	lsls	r3, r3, #12
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	4313      	orrs	r3, r2
 80059da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	011b      	lsls	r3, r3, #4
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	621a      	str	r2, [r3, #32]
}
 80059fa:	bf00      	nop
 80059fc:	371c      	adds	r7, #28
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a06:	b480      	push	{r7}
 8005a08:	b085      	sub	sp, #20
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
 8005a0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a1e:	683a      	ldr	r2, [r7, #0]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	f043 0307 	orr.w	r3, r3, #7
 8005a28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	609a      	str	r2, [r3, #8]
}
 8005a30:	bf00      	nop
 8005a32:	3714      	adds	r7, #20
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b087      	sub	sp, #28
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
 8005a48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	021a      	lsls	r2, r3, #8
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	431a      	orrs	r2, r3
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	609a      	str	r2, [r3, #8]
}
 8005a70:	bf00      	nop
 8005a72:	371c      	adds	r7, #28
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b085      	sub	sp, #20
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d101      	bne.n	8005a94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a90:	2302      	movs	r3, #2
 8005a92:	e050      	b.n	8005b36 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a1c      	ldr	r2, [pc, #112]	; (8005b44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d018      	beq.n	8005b0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ae0:	d013      	beq.n	8005b0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a18      	ldr	r2, [pc, #96]	; (8005b48 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d00e      	beq.n	8005b0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a16      	ldr	r2, [pc, #88]	; (8005b4c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d009      	beq.n	8005b0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a15      	ldr	r2, [pc, #84]	; (8005b50 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d004      	beq.n	8005b0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a13      	ldr	r2, [pc, #76]	; (8005b54 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d10c      	bne.n	8005b24 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	68ba      	ldr	r2, [r7, #8]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68ba      	ldr	r2, [r7, #8]
 8005b22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3714      	adds	r7, #20
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	40010000 	.word	0x40010000
 8005b48:	40000400 	.word	0x40000400
 8005b4c:	40000800 	.word	0x40000800
 8005b50:	40000c00 	.word	0x40000c00
 8005b54:	40014000 	.word	0x40014000

08005b58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d101      	bne.n	8005b6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e03f      	b.n	8005bea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d106      	bne.n	8005b84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f7fc fe8e 	bl	80028a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2224      	movs	r2, #36	; 0x24
 8005b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68da      	ldr	r2, [r3, #12]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 f829 	bl	8005bf4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	691a      	ldr	r2, [r3, #16]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	695a      	ldr	r2, [r3, #20]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68da      	ldr	r2, [r3, #12]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005bd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2220      	movs	r2, #32
 8005bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2220      	movs	r2, #32
 8005be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3708      	adds	r7, #8
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
	...

08005bf4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bf8:	b0c0      	sub	sp, #256	; 0x100
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c10:	68d9      	ldr	r1, [r3, #12]
 8005c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	ea40 0301 	orr.w	r3, r0, r1
 8005c1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c22:	689a      	ldr	r2, [r3, #8]
 8005c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	431a      	orrs	r2, r3
 8005c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	431a      	orrs	r2, r3
 8005c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c38:	69db      	ldr	r3, [r3, #28]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005c4c:	f021 010c 	bic.w	r1, r1, #12
 8005c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c5a:	430b      	orrs	r3, r1
 8005c5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c6e:	6999      	ldr	r1, [r3, #24]
 8005c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	ea40 0301 	orr.w	r3, r0, r1
 8005c7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	4b8f      	ldr	r3, [pc, #572]	; (8005ec0 <UART_SetConfig+0x2cc>)
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d005      	beq.n	8005c94 <UART_SetConfig+0xa0>
 8005c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	4b8d      	ldr	r3, [pc, #564]	; (8005ec4 <UART_SetConfig+0x2d0>)
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d104      	bne.n	8005c9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c94:	f7fe fe9c 	bl	80049d0 <HAL_RCC_GetPCLK2Freq>
 8005c98:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005c9c:	e003      	b.n	8005ca6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c9e:	f7fe fe83 	bl	80049a8 <HAL_RCC_GetPCLK1Freq>
 8005ca2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005caa:	69db      	ldr	r3, [r3, #28]
 8005cac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cb0:	f040 810c 	bne.w	8005ecc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005cb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005cbe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005cc2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005cc6:	4622      	mov	r2, r4
 8005cc8:	462b      	mov	r3, r5
 8005cca:	1891      	adds	r1, r2, r2
 8005ccc:	65b9      	str	r1, [r7, #88]	; 0x58
 8005cce:	415b      	adcs	r3, r3
 8005cd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cd2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005cd6:	4621      	mov	r1, r4
 8005cd8:	eb12 0801 	adds.w	r8, r2, r1
 8005cdc:	4629      	mov	r1, r5
 8005cde:	eb43 0901 	adc.w	r9, r3, r1
 8005ce2:	f04f 0200 	mov.w	r2, #0
 8005ce6:	f04f 0300 	mov.w	r3, #0
 8005cea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005cee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005cf2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005cf6:	4690      	mov	r8, r2
 8005cf8:	4699      	mov	r9, r3
 8005cfa:	4623      	mov	r3, r4
 8005cfc:	eb18 0303 	adds.w	r3, r8, r3
 8005d00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d04:	462b      	mov	r3, r5
 8005d06:	eb49 0303 	adc.w	r3, r9, r3
 8005d0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d1a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005d1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005d22:	460b      	mov	r3, r1
 8005d24:	18db      	adds	r3, r3, r3
 8005d26:	653b      	str	r3, [r7, #80]	; 0x50
 8005d28:	4613      	mov	r3, r2
 8005d2a:	eb42 0303 	adc.w	r3, r2, r3
 8005d2e:	657b      	str	r3, [r7, #84]	; 0x54
 8005d30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005d34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005d38:	f7fa fda8 	bl	800088c <__aeabi_uldivmod>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	460b      	mov	r3, r1
 8005d40:	4b61      	ldr	r3, [pc, #388]	; (8005ec8 <UART_SetConfig+0x2d4>)
 8005d42:	fba3 2302 	umull	r2, r3, r3, r2
 8005d46:	095b      	lsrs	r3, r3, #5
 8005d48:	011c      	lsls	r4, r3, #4
 8005d4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d54:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005d58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005d5c:	4642      	mov	r2, r8
 8005d5e:	464b      	mov	r3, r9
 8005d60:	1891      	adds	r1, r2, r2
 8005d62:	64b9      	str	r1, [r7, #72]	; 0x48
 8005d64:	415b      	adcs	r3, r3
 8005d66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005d6c:	4641      	mov	r1, r8
 8005d6e:	eb12 0a01 	adds.w	sl, r2, r1
 8005d72:	4649      	mov	r1, r9
 8005d74:	eb43 0b01 	adc.w	fp, r3, r1
 8005d78:	f04f 0200 	mov.w	r2, #0
 8005d7c:	f04f 0300 	mov.w	r3, #0
 8005d80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005d88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d8c:	4692      	mov	sl, r2
 8005d8e:	469b      	mov	fp, r3
 8005d90:	4643      	mov	r3, r8
 8005d92:	eb1a 0303 	adds.w	r3, sl, r3
 8005d96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d9a:	464b      	mov	r3, r9
 8005d9c:	eb4b 0303 	adc.w	r3, fp, r3
 8005da0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005db0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005db4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005db8:	460b      	mov	r3, r1
 8005dba:	18db      	adds	r3, r3, r3
 8005dbc:	643b      	str	r3, [r7, #64]	; 0x40
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	eb42 0303 	adc.w	r3, r2, r3
 8005dc4:	647b      	str	r3, [r7, #68]	; 0x44
 8005dc6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005dca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005dce:	f7fa fd5d 	bl	800088c <__aeabi_uldivmod>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	4611      	mov	r1, r2
 8005dd8:	4b3b      	ldr	r3, [pc, #236]	; (8005ec8 <UART_SetConfig+0x2d4>)
 8005dda:	fba3 2301 	umull	r2, r3, r3, r1
 8005dde:	095b      	lsrs	r3, r3, #5
 8005de0:	2264      	movs	r2, #100	; 0x64
 8005de2:	fb02 f303 	mul.w	r3, r2, r3
 8005de6:	1acb      	subs	r3, r1, r3
 8005de8:	00db      	lsls	r3, r3, #3
 8005dea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005dee:	4b36      	ldr	r3, [pc, #216]	; (8005ec8 <UART_SetConfig+0x2d4>)
 8005df0:	fba3 2302 	umull	r2, r3, r3, r2
 8005df4:	095b      	lsrs	r3, r3, #5
 8005df6:	005b      	lsls	r3, r3, #1
 8005df8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005dfc:	441c      	add	r4, r3
 8005dfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e02:	2200      	movs	r2, #0
 8005e04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e08:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005e0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005e10:	4642      	mov	r2, r8
 8005e12:	464b      	mov	r3, r9
 8005e14:	1891      	adds	r1, r2, r2
 8005e16:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e18:	415b      	adcs	r3, r3
 8005e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e20:	4641      	mov	r1, r8
 8005e22:	1851      	adds	r1, r2, r1
 8005e24:	6339      	str	r1, [r7, #48]	; 0x30
 8005e26:	4649      	mov	r1, r9
 8005e28:	414b      	adcs	r3, r1
 8005e2a:	637b      	str	r3, [r7, #52]	; 0x34
 8005e2c:	f04f 0200 	mov.w	r2, #0
 8005e30:	f04f 0300 	mov.w	r3, #0
 8005e34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005e38:	4659      	mov	r1, fp
 8005e3a:	00cb      	lsls	r3, r1, #3
 8005e3c:	4651      	mov	r1, sl
 8005e3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e42:	4651      	mov	r1, sl
 8005e44:	00ca      	lsls	r2, r1, #3
 8005e46:	4610      	mov	r0, r2
 8005e48:	4619      	mov	r1, r3
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	4642      	mov	r2, r8
 8005e4e:	189b      	adds	r3, r3, r2
 8005e50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e54:	464b      	mov	r3, r9
 8005e56:	460a      	mov	r2, r1
 8005e58:	eb42 0303 	adc.w	r3, r2, r3
 8005e5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005e6c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005e70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005e74:	460b      	mov	r3, r1
 8005e76:	18db      	adds	r3, r3, r3
 8005e78:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	eb42 0303 	adc.w	r3, r2, r3
 8005e80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005e8a:	f7fa fcff 	bl	800088c <__aeabi_uldivmod>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	460b      	mov	r3, r1
 8005e92:	4b0d      	ldr	r3, [pc, #52]	; (8005ec8 <UART_SetConfig+0x2d4>)
 8005e94:	fba3 1302 	umull	r1, r3, r3, r2
 8005e98:	095b      	lsrs	r3, r3, #5
 8005e9a:	2164      	movs	r1, #100	; 0x64
 8005e9c:	fb01 f303 	mul.w	r3, r1, r3
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	00db      	lsls	r3, r3, #3
 8005ea4:	3332      	adds	r3, #50	; 0x32
 8005ea6:	4a08      	ldr	r2, [pc, #32]	; (8005ec8 <UART_SetConfig+0x2d4>)
 8005ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8005eac:	095b      	lsrs	r3, r3, #5
 8005eae:	f003 0207 	and.w	r2, r3, #7
 8005eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4422      	add	r2, r4
 8005eba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ebc:	e105      	b.n	80060ca <UART_SetConfig+0x4d6>
 8005ebe:	bf00      	nop
 8005ec0:	40011000 	.word	0x40011000
 8005ec4:	40011400 	.word	0x40011400
 8005ec8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ecc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005ed6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005eda:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005ede:	4642      	mov	r2, r8
 8005ee0:	464b      	mov	r3, r9
 8005ee2:	1891      	adds	r1, r2, r2
 8005ee4:	6239      	str	r1, [r7, #32]
 8005ee6:	415b      	adcs	r3, r3
 8005ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8005eea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005eee:	4641      	mov	r1, r8
 8005ef0:	1854      	adds	r4, r2, r1
 8005ef2:	4649      	mov	r1, r9
 8005ef4:	eb43 0501 	adc.w	r5, r3, r1
 8005ef8:	f04f 0200 	mov.w	r2, #0
 8005efc:	f04f 0300 	mov.w	r3, #0
 8005f00:	00eb      	lsls	r3, r5, #3
 8005f02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f06:	00e2      	lsls	r2, r4, #3
 8005f08:	4614      	mov	r4, r2
 8005f0a:	461d      	mov	r5, r3
 8005f0c:	4643      	mov	r3, r8
 8005f0e:	18e3      	adds	r3, r4, r3
 8005f10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f14:	464b      	mov	r3, r9
 8005f16:	eb45 0303 	adc.w	r3, r5, r3
 8005f1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005f2e:	f04f 0200 	mov.w	r2, #0
 8005f32:	f04f 0300 	mov.w	r3, #0
 8005f36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005f3a:	4629      	mov	r1, r5
 8005f3c:	008b      	lsls	r3, r1, #2
 8005f3e:	4621      	mov	r1, r4
 8005f40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f44:	4621      	mov	r1, r4
 8005f46:	008a      	lsls	r2, r1, #2
 8005f48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005f4c:	f7fa fc9e 	bl	800088c <__aeabi_uldivmod>
 8005f50:	4602      	mov	r2, r0
 8005f52:	460b      	mov	r3, r1
 8005f54:	4b60      	ldr	r3, [pc, #384]	; (80060d8 <UART_SetConfig+0x4e4>)
 8005f56:	fba3 2302 	umull	r2, r3, r3, r2
 8005f5a:	095b      	lsrs	r3, r3, #5
 8005f5c:	011c      	lsls	r4, r3, #4
 8005f5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f62:	2200      	movs	r2, #0
 8005f64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f68:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005f6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005f70:	4642      	mov	r2, r8
 8005f72:	464b      	mov	r3, r9
 8005f74:	1891      	adds	r1, r2, r2
 8005f76:	61b9      	str	r1, [r7, #24]
 8005f78:	415b      	adcs	r3, r3
 8005f7a:	61fb      	str	r3, [r7, #28]
 8005f7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f80:	4641      	mov	r1, r8
 8005f82:	1851      	adds	r1, r2, r1
 8005f84:	6139      	str	r1, [r7, #16]
 8005f86:	4649      	mov	r1, r9
 8005f88:	414b      	adcs	r3, r1
 8005f8a:	617b      	str	r3, [r7, #20]
 8005f8c:	f04f 0200 	mov.w	r2, #0
 8005f90:	f04f 0300 	mov.w	r3, #0
 8005f94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f98:	4659      	mov	r1, fp
 8005f9a:	00cb      	lsls	r3, r1, #3
 8005f9c:	4651      	mov	r1, sl
 8005f9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fa2:	4651      	mov	r1, sl
 8005fa4:	00ca      	lsls	r2, r1, #3
 8005fa6:	4610      	mov	r0, r2
 8005fa8:	4619      	mov	r1, r3
 8005faa:	4603      	mov	r3, r0
 8005fac:	4642      	mov	r2, r8
 8005fae:	189b      	adds	r3, r3, r2
 8005fb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005fb4:	464b      	mov	r3, r9
 8005fb6:	460a      	mov	r2, r1
 8005fb8:	eb42 0303 	adc.w	r3, r2, r3
 8005fbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	67bb      	str	r3, [r7, #120]	; 0x78
 8005fca:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005fcc:	f04f 0200 	mov.w	r2, #0
 8005fd0:	f04f 0300 	mov.w	r3, #0
 8005fd4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005fd8:	4649      	mov	r1, r9
 8005fda:	008b      	lsls	r3, r1, #2
 8005fdc:	4641      	mov	r1, r8
 8005fde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fe2:	4641      	mov	r1, r8
 8005fe4:	008a      	lsls	r2, r1, #2
 8005fe6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005fea:	f7fa fc4f 	bl	800088c <__aeabi_uldivmod>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	4b39      	ldr	r3, [pc, #228]	; (80060d8 <UART_SetConfig+0x4e4>)
 8005ff4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ff8:	095b      	lsrs	r3, r3, #5
 8005ffa:	2164      	movs	r1, #100	; 0x64
 8005ffc:	fb01 f303 	mul.w	r3, r1, r3
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	011b      	lsls	r3, r3, #4
 8006004:	3332      	adds	r3, #50	; 0x32
 8006006:	4a34      	ldr	r2, [pc, #208]	; (80060d8 <UART_SetConfig+0x4e4>)
 8006008:	fba2 2303 	umull	r2, r3, r2, r3
 800600c:	095b      	lsrs	r3, r3, #5
 800600e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006012:	441c      	add	r4, r3
 8006014:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006018:	2200      	movs	r2, #0
 800601a:	673b      	str	r3, [r7, #112]	; 0x70
 800601c:	677a      	str	r2, [r7, #116]	; 0x74
 800601e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006022:	4642      	mov	r2, r8
 8006024:	464b      	mov	r3, r9
 8006026:	1891      	adds	r1, r2, r2
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	415b      	adcs	r3, r3
 800602c:	60fb      	str	r3, [r7, #12]
 800602e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006032:	4641      	mov	r1, r8
 8006034:	1851      	adds	r1, r2, r1
 8006036:	6039      	str	r1, [r7, #0]
 8006038:	4649      	mov	r1, r9
 800603a:	414b      	adcs	r3, r1
 800603c:	607b      	str	r3, [r7, #4]
 800603e:	f04f 0200 	mov.w	r2, #0
 8006042:	f04f 0300 	mov.w	r3, #0
 8006046:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800604a:	4659      	mov	r1, fp
 800604c:	00cb      	lsls	r3, r1, #3
 800604e:	4651      	mov	r1, sl
 8006050:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006054:	4651      	mov	r1, sl
 8006056:	00ca      	lsls	r2, r1, #3
 8006058:	4610      	mov	r0, r2
 800605a:	4619      	mov	r1, r3
 800605c:	4603      	mov	r3, r0
 800605e:	4642      	mov	r2, r8
 8006060:	189b      	adds	r3, r3, r2
 8006062:	66bb      	str	r3, [r7, #104]	; 0x68
 8006064:	464b      	mov	r3, r9
 8006066:	460a      	mov	r2, r1
 8006068:	eb42 0303 	adc.w	r3, r2, r3
 800606c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800606e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	663b      	str	r3, [r7, #96]	; 0x60
 8006078:	667a      	str	r2, [r7, #100]	; 0x64
 800607a:	f04f 0200 	mov.w	r2, #0
 800607e:	f04f 0300 	mov.w	r3, #0
 8006082:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006086:	4649      	mov	r1, r9
 8006088:	008b      	lsls	r3, r1, #2
 800608a:	4641      	mov	r1, r8
 800608c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006090:	4641      	mov	r1, r8
 8006092:	008a      	lsls	r2, r1, #2
 8006094:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006098:	f7fa fbf8 	bl	800088c <__aeabi_uldivmod>
 800609c:	4602      	mov	r2, r0
 800609e:	460b      	mov	r3, r1
 80060a0:	4b0d      	ldr	r3, [pc, #52]	; (80060d8 <UART_SetConfig+0x4e4>)
 80060a2:	fba3 1302 	umull	r1, r3, r3, r2
 80060a6:	095b      	lsrs	r3, r3, #5
 80060a8:	2164      	movs	r1, #100	; 0x64
 80060aa:	fb01 f303 	mul.w	r3, r1, r3
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	011b      	lsls	r3, r3, #4
 80060b2:	3332      	adds	r3, #50	; 0x32
 80060b4:	4a08      	ldr	r2, [pc, #32]	; (80060d8 <UART_SetConfig+0x4e4>)
 80060b6:	fba2 2303 	umull	r2, r3, r2, r3
 80060ba:	095b      	lsrs	r3, r3, #5
 80060bc:	f003 020f 	and.w	r2, r3, #15
 80060c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4422      	add	r2, r4
 80060c8:	609a      	str	r2, [r3, #8]
}
 80060ca:	bf00      	nop
 80060cc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80060d0:	46bd      	mov	sp, r7
 80060d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060d6:	bf00      	nop
 80060d8:	51eb851f 	.word	0x51eb851f

080060dc <__errno>:
 80060dc:	4b01      	ldr	r3, [pc, #4]	; (80060e4 <__errno+0x8>)
 80060de:	6818      	ldr	r0, [r3, #0]
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	2000001c 	.word	0x2000001c

080060e8 <__libc_init_array>:
 80060e8:	b570      	push	{r4, r5, r6, lr}
 80060ea:	4d0d      	ldr	r5, [pc, #52]	; (8006120 <__libc_init_array+0x38>)
 80060ec:	4c0d      	ldr	r4, [pc, #52]	; (8006124 <__libc_init_array+0x3c>)
 80060ee:	1b64      	subs	r4, r4, r5
 80060f0:	10a4      	asrs	r4, r4, #2
 80060f2:	2600      	movs	r6, #0
 80060f4:	42a6      	cmp	r6, r4
 80060f6:	d109      	bne.n	800610c <__libc_init_array+0x24>
 80060f8:	4d0b      	ldr	r5, [pc, #44]	; (8006128 <__libc_init_array+0x40>)
 80060fa:	4c0c      	ldr	r4, [pc, #48]	; (800612c <__libc_init_array+0x44>)
 80060fc:	f000 fc8e 	bl	8006a1c <_init>
 8006100:	1b64      	subs	r4, r4, r5
 8006102:	10a4      	asrs	r4, r4, #2
 8006104:	2600      	movs	r6, #0
 8006106:	42a6      	cmp	r6, r4
 8006108:	d105      	bne.n	8006116 <__libc_init_array+0x2e>
 800610a:	bd70      	pop	{r4, r5, r6, pc}
 800610c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006110:	4798      	blx	r3
 8006112:	3601      	adds	r6, #1
 8006114:	e7ee      	b.n	80060f4 <__libc_init_array+0xc>
 8006116:	f855 3b04 	ldr.w	r3, [r5], #4
 800611a:	4798      	blx	r3
 800611c:	3601      	adds	r6, #1
 800611e:	e7f2      	b.n	8006106 <__libc_init_array+0x1e>
 8006120:	08006b58 	.word	0x08006b58
 8006124:	08006b58 	.word	0x08006b58
 8006128:	08006b58 	.word	0x08006b58
 800612c:	08006b5c 	.word	0x08006b5c

08006130 <memset>:
 8006130:	4402      	add	r2, r0
 8006132:	4603      	mov	r3, r0
 8006134:	4293      	cmp	r3, r2
 8006136:	d100      	bne.n	800613a <memset+0xa>
 8006138:	4770      	bx	lr
 800613a:	f803 1b01 	strb.w	r1, [r3], #1
 800613e:	e7f9      	b.n	8006134 <memset+0x4>

08006140 <siprintf>:
 8006140:	b40e      	push	{r1, r2, r3}
 8006142:	b500      	push	{lr}
 8006144:	b09c      	sub	sp, #112	; 0x70
 8006146:	ab1d      	add	r3, sp, #116	; 0x74
 8006148:	9002      	str	r0, [sp, #8]
 800614a:	9006      	str	r0, [sp, #24]
 800614c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006150:	4809      	ldr	r0, [pc, #36]	; (8006178 <siprintf+0x38>)
 8006152:	9107      	str	r1, [sp, #28]
 8006154:	9104      	str	r1, [sp, #16]
 8006156:	4909      	ldr	r1, [pc, #36]	; (800617c <siprintf+0x3c>)
 8006158:	f853 2b04 	ldr.w	r2, [r3], #4
 800615c:	9105      	str	r1, [sp, #20]
 800615e:	6800      	ldr	r0, [r0, #0]
 8006160:	9301      	str	r3, [sp, #4]
 8006162:	a902      	add	r1, sp, #8
 8006164:	f000 f868 	bl	8006238 <_svfiprintf_r>
 8006168:	9b02      	ldr	r3, [sp, #8]
 800616a:	2200      	movs	r2, #0
 800616c:	701a      	strb	r2, [r3, #0]
 800616e:	b01c      	add	sp, #112	; 0x70
 8006170:	f85d eb04 	ldr.w	lr, [sp], #4
 8006174:	b003      	add	sp, #12
 8006176:	4770      	bx	lr
 8006178:	2000001c 	.word	0x2000001c
 800617c:	ffff0208 	.word	0xffff0208

08006180 <__ssputs_r>:
 8006180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006184:	688e      	ldr	r6, [r1, #8]
 8006186:	429e      	cmp	r6, r3
 8006188:	4682      	mov	sl, r0
 800618a:	460c      	mov	r4, r1
 800618c:	4690      	mov	r8, r2
 800618e:	461f      	mov	r7, r3
 8006190:	d838      	bhi.n	8006204 <__ssputs_r+0x84>
 8006192:	898a      	ldrh	r2, [r1, #12]
 8006194:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006198:	d032      	beq.n	8006200 <__ssputs_r+0x80>
 800619a:	6825      	ldr	r5, [r4, #0]
 800619c:	6909      	ldr	r1, [r1, #16]
 800619e:	eba5 0901 	sub.w	r9, r5, r1
 80061a2:	6965      	ldr	r5, [r4, #20]
 80061a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80061ac:	3301      	adds	r3, #1
 80061ae:	444b      	add	r3, r9
 80061b0:	106d      	asrs	r5, r5, #1
 80061b2:	429d      	cmp	r5, r3
 80061b4:	bf38      	it	cc
 80061b6:	461d      	movcc	r5, r3
 80061b8:	0553      	lsls	r3, r2, #21
 80061ba:	d531      	bpl.n	8006220 <__ssputs_r+0xa0>
 80061bc:	4629      	mov	r1, r5
 80061be:	f000 fb63 	bl	8006888 <_malloc_r>
 80061c2:	4606      	mov	r6, r0
 80061c4:	b950      	cbnz	r0, 80061dc <__ssputs_r+0x5c>
 80061c6:	230c      	movs	r3, #12
 80061c8:	f8ca 3000 	str.w	r3, [sl]
 80061cc:	89a3      	ldrh	r3, [r4, #12]
 80061ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061d2:	81a3      	strh	r3, [r4, #12]
 80061d4:	f04f 30ff 	mov.w	r0, #4294967295
 80061d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061dc:	6921      	ldr	r1, [r4, #16]
 80061de:	464a      	mov	r2, r9
 80061e0:	f000 fabe 	bl	8006760 <memcpy>
 80061e4:	89a3      	ldrh	r3, [r4, #12]
 80061e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80061ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061ee:	81a3      	strh	r3, [r4, #12]
 80061f0:	6126      	str	r6, [r4, #16]
 80061f2:	6165      	str	r5, [r4, #20]
 80061f4:	444e      	add	r6, r9
 80061f6:	eba5 0509 	sub.w	r5, r5, r9
 80061fa:	6026      	str	r6, [r4, #0]
 80061fc:	60a5      	str	r5, [r4, #8]
 80061fe:	463e      	mov	r6, r7
 8006200:	42be      	cmp	r6, r7
 8006202:	d900      	bls.n	8006206 <__ssputs_r+0x86>
 8006204:	463e      	mov	r6, r7
 8006206:	6820      	ldr	r0, [r4, #0]
 8006208:	4632      	mov	r2, r6
 800620a:	4641      	mov	r1, r8
 800620c:	f000 fab6 	bl	800677c <memmove>
 8006210:	68a3      	ldr	r3, [r4, #8]
 8006212:	1b9b      	subs	r3, r3, r6
 8006214:	60a3      	str	r3, [r4, #8]
 8006216:	6823      	ldr	r3, [r4, #0]
 8006218:	4433      	add	r3, r6
 800621a:	6023      	str	r3, [r4, #0]
 800621c:	2000      	movs	r0, #0
 800621e:	e7db      	b.n	80061d8 <__ssputs_r+0x58>
 8006220:	462a      	mov	r2, r5
 8006222:	f000 fba5 	bl	8006970 <_realloc_r>
 8006226:	4606      	mov	r6, r0
 8006228:	2800      	cmp	r0, #0
 800622a:	d1e1      	bne.n	80061f0 <__ssputs_r+0x70>
 800622c:	6921      	ldr	r1, [r4, #16]
 800622e:	4650      	mov	r0, sl
 8006230:	f000 fabe 	bl	80067b0 <_free_r>
 8006234:	e7c7      	b.n	80061c6 <__ssputs_r+0x46>
	...

08006238 <_svfiprintf_r>:
 8006238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800623c:	4698      	mov	r8, r3
 800623e:	898b      	ldrh	r3, [r1, #12]
 8006240:	061b      	lsls	r3, r3, #24
 8006242:	b09d      	sub	sp, #116	; 0x74
 8006244:	4607      	mov	r7, r0
 8006246:	460d      	mov	r5, r1
 8006248:	4614      	mov	r4, r2
 800624a:	d50e      	bpl.n	800626a <_svfiprintf_r+0x32>
 800624c:	690b      	ldr	r3, [r1, #16]
 800624e:	b963      	cbnz	r3, 800626a <_svfiprintf_r+0x32>
 8006250:	2140      	movs	r1, #64	; 0x40
 8006252:	f000 fb19 	bl	8006888 <_malloc_r>
 8006256:	6028      	str	r0, [r5, #0]
 8006258:	6128      	str	r0, [r5, #16]
 800625a:	b920      	cbnz	r0, 8006266 <_svfiprintf_r+0x2e>
 800625c:	230c      	movs	r3, #12
 800625e:	603b      	str	r3, [r7, #0]
 8006260:	f04f 30ff 	mov.w	r0, #4294967295
 8006264:	e0d1      	b.n	800640a <_svfiprintf_r+0x1d2>
 8006266:	2340      	movs	r3, #64	; 0x40
 8006268:	616b      	str	r3, [r5, #20]
 800626a:	2300      	movs	r3, #0
 800626c:	9309      	str	r3, [sp, #36]	; 0x24
 800626e:	2320      	movs	r3, #32
 8006270:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006274:	f8cd 800c 	str.w	r8, [sp, #12]
 8006278:	2330      	movs	r3, #48	; 0x30
 800627a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006424 <_svfiprintf_r+0x1ec>
 800627e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006282:	f04f 0901 	mov.w	r9, #1
 8006286:	4623      	mov	r3, r4
 8006288:	469a      	mov	sl, r3
 800628a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800628e:	b10a      	cbz	r2, 8006294 <_svfiprintf_r+0x5c>
 8006290:	2a25      	cmp	r2, #37	; 0x25
 8006292:	d1f9      	bne.n	8006288 <_svfiprintf_r+0x50>
 8006294:	ebba 0b04 	subs.w	fp, sl, r4
 8006298:	d00b      	beq.n	80062b2 <_svfiprintf_r+0x7a>
 800629a:	465b      	mov	r3, fp
 800629c:	4622      	mov	r2, r4
 800629e:	4629      	mov	r1, r5
 80062a0:	4638      	mov	r0, r7
 80062a2:	f7ff ff6d 	bl	8006180 <__ssputs_r>
 80062a6:	3001      	adds	r0, #1
 80062a8:	f000 80aa 	beq.w	8006400 <_svfiprintf_r+0x1c8>
 80062ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062ae:	445a      	add	r2, fp
 80062b0:	9209      	str	r2, [sp, #36]	; 0x24
 80062b2:	f89a 3000 	ldrb.w	r3, [sl]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f000 80a2 	beq.w	8006400 <_svfiprintf_r+0x1c8>
 80062bc:	2300      	movs	r3, #0
 80062be:	f04f 32ff 	mov.w	r2, #4294967295
 80062c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062c6:	f10a 0a01 	add.w	sl, sl, #1
 80062ca:	9304      	str	r3, [sp, #16]
 80062cc:	9307      	str	r3, [sp, #28]
 80062ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062d2:	931a      	str	r3, [sp, #104]	; 0x68
 80062d4:	4654      	mov	r4, sl
 80062d6:	2205      	movs	r2, #5
 80062d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062dc:	4851      	ldr	r0, [pc, #324]	; (8006424 <_svfiprintf_r+0x1ec>)
 80062de:	f7f9 ff7f 	bl	80001e0 <memchr>
 80062e2:	9a04      	ldr	r2, [sp, #16]
 80062e4:	b9d8      	cbnz	r0, 800631e <_svfiprintf_r+0xe6>
 80062e6:	06d0      	lsls	r0, r2, #27
 80062e8:	bf44      	itt	mi
 80062ea:	2320      	movmi	r3, #32
 80062ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062f0:	0711      	lsls	r1, r2, #28
 80062f2:	bf44      	itt	mi
 80062f4:	232b      	movmi	r3, #43	; 0x2b
 80062f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062fa:	f89a 3000 	ldrb.w	r3, [sl]
 80062fe:	2b2a      	cmp	r3, #42	; 0x2a
 8006300:	d015      	beq.n	800632e <_svfiprintf_r+0xf6>
 8006302:	9a07      	ldr	r2, [sp, #28]
 8006304:	4654      	mov	r4, sl
 8006306:	2000      	movs	r0, #0
 8006308:	f04f 0c0a 	mov.w	ip, #10
 800630c:	4621      	mov	r1, r4
 800630e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006312:	3b30      	subs	r3, #48	; 0x30
 8006314:	2b09      	cmp	r3, #9
 8006316:	d94e      	bls.n	80063b6 <_svfiprintf_r+0x17e>
 8006318:	b1b0      	cbz	r0, 8006348 <_svfiprintf_r+0x110>
 800631a:	9207      	str	r2, [sp, #28]
 800631c:	e014      	b.n	8006348 <_svfiprintf_r+0x110>
 800631e:	eba0 0308 	sub.w	r3, r0, r8
 8006322:	fa09 f303 	lsl.w	r3, r9, r3
 8006326:	4313      	orrs	r3, r2
 8006328:	9304      	str	r3, [sp, #16]
 800632a:	46a2      	mov	sl, r4
 800632c:	e7d2      	b.n	80062d4 <_svfiprintf_r+0x9c>
 800632e:	9b03      	ldr	r3, [sp, #12]
 8006330:	1d19      	adds	r1, r3, #4
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	9103      	str	r1, [sp, #12]
 8006336:	2b00      	cmp	r3, #0
 8006338:	bfbb      	ittet	lt
 800633a:	425b      	neglt	r3, r3
 800633c:	f042 0202 	orrlt.w	r2, r2, #2
 8006340:	9307      	strge	r3, [sp, #28]
 8006342:	9307      	strlt	r3, [sp, #28]
 8006344:	bfb8      	it	lt
 8006346:	9204      	strlt	r2, [sp, #16]
 8006348:	7823      	ldrb	r3, [r4, #0]
 800634a:	2b2e      	cmp	r3, #46	; 0x2e
 800634c:	d10c      	bne.n	8006368 <_svfiprintf_r+0x130>
 800634e:	7863      	ldrb	r3, [r4, #1]
 8006350:	2b2a      	cmp	r3, #42	; 0x2a
 8006352:	d135      	bne.n	80063c0 <_svfiprintf_r+0x188>
 8006354:	9b03      	ldr	r3, [sp, #12]
 8006356:	1d1a      	adds	r2, r3, #4
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	9203      	str	r2, [sp, #12]
 800635c:	2b00      	cmp	r3, #0
 800635e:	bfb8      	it	lt
 8006360:	f04f 33ff 	movlt.w	r3, #4294967295
 8006364:	3402      	adds	r4, #2
 8006366:	9305      	str	r3, [sp, #20]
 8006368:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006434 <_svfiprintf_r+0x1fc>
 800636c:	7821      	ldrb	r1, [r4, #0]
 800636e:	2203      	movs	r2, #3
 8006370:	4650      	mov	r0, sl
 8006372:	f7f9 ff35 	bl	80001e0 <memchr>
 8006376:	b140      	cbz	r0, 800638a <_svfiprintf_r+0x152>
 8006378:	2340      	movs	r3, #64	; 0x40
 800637a:	eba0 000a 	sub.w	r0, r0, sl
 800637e:	fa03 f000 	lsl.w	r0, r3, r0
 8006382:	9b04      	ldr	r3, [sp, #16]
 8006384:	4303      	orrs	r3, r0
 8006386:	3401      	adds	r4, #1
 8006388:	9304      	str	r3, [sp, #16]
 800638a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800638e:	4826      	ldr	r0, [pc, #152]	; (8006428 <_svfiprintf_r+0x1f0>)
 8006390:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006394:	2206      	movs	r2, #6
 8006396:	f7f9 ff23 	bl	80001e0 <memchr>
 800639a:	2800      	cmp	r0, #0
 800639c:	d038      	beq.n	8006410 <_svfiprintf_r+0x1d8>
 800639e:	4b23      	ldr	r3, [pc, #140]	; (800642c <_svfiprintf_r+0x1f4>)
 80063a0:	bb1b      	cbnz	r3, 80063ea <_svfiprintf_r+0x1b2>
 80063a2:	9b03      	ldr	r3, [sp, #12]
 80063a4:	3307      	adds	r3, #7
 80063a6:	f023 0307 	bic.w	r3, r3, #7
 80063aa:	3308      	adds	r3, #8
 80063ac:	9303      	str	r3, [sp, #12]
 80063ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063b0:	4433      	add	r3, r6
 80063b2:	9309      	str	r3, [sp, #36]	; 0x24
 80063b4:	e767      	b.n	8006286 <_svfiprintf_r+0x4e>
 80063b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80063ba:	460c      	mov	r4, r1
 80063bc:	2001      	movs	r0, #1
 80063be:	e7a5      	b.n	800630c <_svfiprintf_r+0xd4>
 80063c0:	2300      	movs	r3, #0
 80063c2:	3401      	adds	r4, #1
 80063c4:	9305      	str	r3, [sp, #20]
 80063c6:	4619      	mov	r1, r3
 80063c8:	f04f 0c0a 	mov.w	ip, #10
 80063cc:	4620      	mov	r0, r4
 80063ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063d2:	3a30      	subs	r2, #48	; 0x30
 80063d4:	2a09      	cmp	r2, #9
 80063d6:	d903      	bls.n	80063e0 <_svfiprintf_r+0x1a8>
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d0c5      	beq.n	8006368 <_svfiprintf_r+0x130>
 80063dc:	9105      	str	r1, [sp, #20]
 80063de:	e7c3      	b.n	8006368 <_svfiprintf_r+0x130>
 80063e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80063e4:	4604      	mov	r4, r0
 80063e6:	2301      	movs	r3, #1
 80063e8:	e7f0      	b.n	80063cc <_svfiprintf_r+0x194>
 80063ea:	ab03      	add	r3, sp, #12
 80063ec:	9300      	str	r3, [sp, #0]
 80063ee:	462a      	mov	r2, r5
 80063f0:	4b0f      	ldr	r3, [pc, #60]	; (8006430 <_svfiprintf_r+0x1f8>)
 80063f2:	a904      	add	r1, sp, #16
 80063f4:	4638      	mov	r0, r7
 80063f6:	f3af 8000 	nop.w
 80063fa:	1c42      	adds	r2, r0, #1
 80063fc:	4606      	mov	r6, r0
 80063fe:	d1d6      	bne.n	80063ae <_svfiprintf_r+0x176>
 8006400:	89ab      	ldrh	r3, [r5, #12]
 8006402:	065b      	lsls	r3, r3, #25
 8006404:	f53f af2c 	bmi.w	8006260 <_svfiprintf_r+0x28>
 8006408:	9809      	ldr	r0, [sp, #36]	; 0x24
 800640a:	b01d      	add	sp, #116	; 0x74
 800640c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006410:	ab03      	add	r3, sp, #12
 8006412:	9300      	str	r3, [sp, #0]
 8006414:	462a      	mov	r2, r5
 8006416:	4b06      	ldr	r3, [pc, #24]	; (8006430 <_svfiprintf_r+0x1f8>)
 8006418:	a904      	add	r1, sp, #16
 800641a:	4638      	mov	r0, r7
 800641c:	f000 f87a 	bl	8006514 <_printf_i>
 8006420:	e7eb      	b.n	80063fa <_svfiprintf_r+0x1c2>
 8006422:	bf00      	nop
 8006424:	08006b1c 	.word	0x08006b1c
 8006428:	08006b26 	.word	0x08006b26
 800642c:	00000000 	.word	0x00000000
 8006430:	08006181 	.word	0x08006181
 8006434:	08006b22 	.word	0x08006b22

08006438 <_printf_common>:
 8006438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800643c:	4616      	mov	r6, r2
 800643e:	4699      	mov	r9, r3
 8006440:	688a      	ldr	r2, [r1, #8]
 8006442:	690b      	ldr	r3, [r1, #16]
 8006444:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006448:	4293      	cmp	r3, r2
 800644a:	bfb8      	it	lt
 800644c:	4613      	movlt	r3, r2
 800644e:	6033      	str	r3, [r6, #0]
 8006450:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006454:	4607      	mov	r7, r0
 8006456:	460c      	mov	r4, r1
 8006458:	b10a      	cbz	r2, 800645e <_printf_common+0x26>
 800645a:	3301      	adds	r3, #1
 800645c:	6033      	str	r3, [r6, #0]
 800645e:	6823      	ldr	r3, [r4, #0]
 8006460:	0699      	lsls	r1, r3, #26
 8006462:	bf42      	ittt	mi
 8006464:	6833      	ldrmi	r3, [r6, #0]
 8006466:	3302      	addmi	r3, #2
 8006468:	6033      	strmi	r3, [r6, #0]
 800646a:	6825      	ldr	r5, [r4, #0]
 800646c:	f015 0506 	ands.w	r5, r5, #6
 8006470:	d106      	bne.n	8006480 <_printf_common+0x48>
 8006472:	f104 0a19 	add.w	sl, r4, #25
 8006476:	68e3      	ldr	r3, [r4, #12]
 8006478:	6832      	ldr	r2, [r6, #0]
 800647a:	1a9b      	subs	r3, r3, r2
 800647c:	42ab      	cmp	r3, r5
 800647e:	dc26      	bgt.n	80064ce <_printf_common+0x96>
 8006480:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006484:	1e13      	subs	r3, r2, #0
 8006486:	6822      	ldr	r2, [r4, #0]
 8006488:	bf18      	it	ne
 800648a:	2301      	movne	r3, #1
 800648c:	0692      	lsls	r2, r2, #26
 800648e:	d42b      	bmi.n	80064e8 <_printf_common+0xb0>
 8006490:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006494:	4649      	mov	r1, r9
 8006496:	4638      	mov	r0, r7
 8006498:	47c0      	blx	r8
 800649a:	3001      	adds	r0, #1
 800649c:	d01e      	beq.n	80064dc <_printf_common+0xa4>
 800649e:	6823      	ldr	r3, [r4, #0]
 80064a0:	68e5      	ldr	r5, [r4, #12]
 80064a2:	6832      	ldr	r2, [r6, #0]
 80064a4:	f003 0306 	and.w	r3, r3, #6
 80064a8:	2b04      	cmp	r3, #4
 80064aa:	bf08      	it	eq
 80064ac:	1aad      	subeq	r5, r5, r2
 80064ae:	68a3      	ldr	r3, [r4, #8]
 80064b0:	6922      	ldr	r2, [r4, #16]
 80064b2:	bf0c      	ite	eq
 80064b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064b8:	2500      	movne	r5, #0
 80064ba:	4293      	cmp	r3, r2
 80064bc:	bfc4      	itt	gt
 80064be:	1a9b      	subgt	r3, r3, r2
 80064c0:	18ed      	addgt	r5, r5, r3
 80064c2:	2600      	movs	r6, #0
 80064c4:	341a      	adds	r4, #26
 80064c6:	42b5      	cmp	r5, r6
 80064c8:	d11a      	bne.n	8006500 <_printf_common+0xc8>
 80064ca:	2000      	movs	r0, #0
 80064cc:	e008      	b.n	80064e0 <_printf_common+0xa8>
 80064ce:	2301      	movs	r3, #1
 80064d0:	4652      	mov	r2, sl
 80064d2:	4649      	mov	r1, r9
 80064d4:	4638      	mov	r0, r7
 80064d6:	47c0      	blx	r8
 80064d8:	3001      	adds	r0, #1
 80064da:	d103      	bne.n	80064e4 <_printf_common+0xac>
 80064dc:	f04f 30ff 	mov.w	r0, #4294967295
 80064e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064e4:	3501      	adds	r5, #1
 80064e6:	e7c6      	b.n	8006476 <_printf_common+0x3e>
 80064e8:	18e1      	adds	r1, r4, r3
 80064ea:	1c5a      	adds	r2, r3, #1
 80064ec:	2030      	movs	r0, #48	; 0x30
 80064ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064f2:	4422      	add	r2, r4
 80064f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064fc:	3302      	adds	r3, #2
 80064fe:	e7c7      	b.n	8006490 <_printf_common+0x58>
 8006500:	2301      	movs	r3, #1
 8006502:	4622      	mov	r2, r4
 8006504:	4649      	mov	r1, r9
 8006506:	4638      	mov	r0, r7
 8006508:	47c0      	blx	r8
 800650a:	3001      	adds	r0, #1
 800650c:	d0e6      	beq.n	80064dc <_printf_common+0xa4>
 800650e:	3601      	adds	r6, #1
 8006510:	e7d9      	b.n	80064c6 <_printf_common+0x8e>
	...

08006514 <_printf_i>:
 8006514:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006518:	7e0f      	ldrb	r7, [r1, #24]
 800651a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800651c:	2f78      	cmp	r7, #120	; 0x78
 800651e:	4691      	mov	r9, r2
 8006520:	4680      	mov	r8, r0
 8006522:	460c      	mov	r4, r1
 8006524:	469a      	mov	sl, r3
 8006526:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800652a:	d807      	bhi.n	800653c <_printf_i+0x28>
 800652c:	2f62      	cmp	r7, #98	; 0x62
 800652e:	d80a      	bhi.n	8006546 <_printf_i+0x32>
 8006530:	2f00      	cmp	r7, #0
 8006532:	f000 80d8 	beq.w	80066e6 <_printf_i+0x1d2>
 8006536:	2f58      	cmp	r7, #88	; 0x58
 8006538:	f000 80a3 	beq.w	8006682 <_printf_i+0x16e>
 800653c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006540:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006544:	e03a      	b.n	80065bc <_printf_i+0xa8>
 8006546:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800654a:	2b15      	cmp	r3, #21
 800654c:	d8f6      	bhi.n	800653c <_printf_i+0x28>
 800654e:	a101      	add	r1, pc, #4	; (adr r1, 8006554 <_printf_i+0x40>)
 8006550:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006554:	080065ad 	.word	0x080065ad
 8006558:	080065c1 	.word	0x080065c1
 800655c:	0800653d 	.word	0x0800653d
 8006560:	0800653d 	.word	0x0800653d
 8006564:	0800653d 	.word	0x0800653d
 8006568:	0800653d 	.word	0x0800653d
 800656c:	080065c1 	.word	0x080065c1
 8006570:	0800653d 	.word	0x0800653d
 8006574:	0800653d 	.word	0x0800653d
 8006578:	0800653d 	.word	0x0800653d
 800657c:	0800653d 	.word	0x0800653d
 8006580:	080066cd 	.word	0x080066cd
 8006584:	080065f1 	.word	0x080065f1
 8006588:	080066af 	.word	0x080066af
 800658c:	0800653d 	.word	0x0800653d
 8006590:	0800653d 	.word	0x0800653d
 8006594:	080066ef 	.word	0x080066ef
 8006598:	0800653d 	.word	0x0800653d
 800659c:	080065f1 	.word	0x080065f1
 80065a0:	0800653d 	.word	0x0800653d
 80065a4:	0800653d 	.word	0x0800653d
 80065a8:	080066b7 	.word	0x080066b7
 80065ac:	682b      	ldr	r3, [r5, #0]
 80065ae:	1d1a      	adds	r2, r3, #4
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	602a      	str	r2, [r5, #0]
 80065b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80065bc:	2301      	movs	r3, #1
 80065be:	e0a3      	b.n	8006708 <_printf_i+0x1f4>
 80065c0:	6820      	ldr	r0, [r4, #0]
 80065c2:	6829      	ldr	r1, [r5, #0]
 80065c4:	0606      	lsls	r6, r0, #24
 80065c6:	f101 0304 	add.w	r3, r1, #4
 80065ca:	d50a      	bpl.n	80065e2 <_printf_i+0xce>
 80065cc:	680e      	ldr	r6, [r1, #0]
 80065ce:	602b      	str	r3, [r5, #0]
 80065d0:	2e00      	cmp	r6, #0
 80065d2:	da03      	bge.n	80065dc <_printf_i+0xc8>
 80065d4:	232d      	movs	r3, #45	; 0x2d
 80065d6:	4276      	negs	r6, r6
 80065d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065dc:	485e      	ldr	r0, [pc, #376]	; (8006758 <_printf_i+0x244>)
 80065de:	230a      	movs	r3, #10
 80065e0:	e019      	b.n	8006616 <_printf_i+0x102>
 80065e2:	680e      	ldr	r6, [r1, #0]
 80065e4:	602b      	str	r3, [r5, #0]
 80065e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80065ea:	bf18      	it	ne
 80065ec:	b236      	sxthne	r6, r6
 80065ee:	e7ef      	b.n	80065d0 <_printf_i+0xbc>
 80065f0:	682b      	ldr	r3, [r5, #0]
 80065f2:	6820      	ldr	r0, [r4, #0]
 80065f4:	1d19      	adds	r1, r3, #4
 80065f6:	6029      	str	r1, [r5, #0]
 80065f8:	0601      	lsls	r1, r0, #24
 80065fa:	d501      	bpl.n	8006600 <_printf_i+0xec>
 80065fc:	681e      	ldr	r6, [r3, #0]
 80065fe:	e002      	b.n	8006606 <_printf_i+0xf2>
 8006600:	0646      	lsls	r6, r0, #25
 8006602:	d5fb      	bpl.n	80065fc <_printf_i+0xe8>
 8006604:	881e      	ldrh	r6, [r3, #0]
 8006606:	4854      	ldr	r0, [pc, #336]	; (8006758 <_printf_i+0x244>)
 8006608:	2f6f      	cmp	r7, #111	; 0x6f
 800660a:	bf0c      	ite	eq
 800660c:	2308      	moveq	r3, #8
 800660e:	230a      	movne	r3, #10
 8006610:	2100      	movs	r1, #0
 8006612:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006616:	6865      	ldr	r5, [r4, #4]
 8006618:	60a5      	str	r5, [r4, #8]
 800661a:	2d00      	cmp	r5, #0
 800661c:	bfa2      	ittt	ge
 800661e:	6821      	ldrge	r1, [r4, #0]
 8006620:	f021 0104 	bicge.w	r1, r1, #4
 8006624:	6021      	strge	r1, [r4, #0]
 8006626:	b90e      	cbnz	r6, 800662c <_printf_i+0x118>
 8006628:	2d00      	cmp	r5, #0
 800662a:	d04d      	beq.n	80066c8 <_printf_i+0x1b4>
 800662c:	4615      	mov	r5, r2
 800662e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006632:	fb03 6711 	mls	r7, r3, r1, r6
 8006636:	5dc7      	ldrb	r7, [r0, r7]
 8006638:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800663c:	4637      	mov	r7, r6
 800663e:	42bb      	cmp	r3, r7
 8006640:	460e      	mov	r6, r1
 8006642:	d9f4      	bls.n	800662e <_printf_i+0x11a>
 8006644:	2b08      	cmp	r3, #8
 8006646:	d10b      	bne.n	8006660 <_printf_i+0x14c>
 8006648:	6823      	ldr	r3, [r4, #0]
 800664a:	07de      	lsls	r6, r3, #31
 800664c:	d508      	bpl.n	8006660 <_printf_i+0x14c>
 800664e:	6923      	ldr	r3, [r4, #16]
 8006650:	6861      	ldr	r1, [r4, #4]
 8006652:	4299      	cmp	r1, r3
 8006654:	bfde      	ittt	le
 8006656:	2330      	movle	r3, #48	; 0x30
 8006658:	f805 3c01 	strble.w	r3, [r5, #-1]
 800665c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006660:	1b52      	subs	r2, r2, r5
 8006662:	6122      	str	r2, [r4, #16]
 8006664:	f8cd a000 	str.w	sl, [sp]
 8006668:	464b      	mov	r3, r9
 800666a:	aa03      	add	r2, sp, #12
 800666c:	4621      	mov	r1, r4
 800666e:	4640      	mov	r0, r8
 8006670:	f7ff fee2 	bl	8006438 <_printf_common>
 8006674:	3001      	adds	r0, #1
 8006676:	d14c      	bne.n	8006712 <_printf_i+0x1fe>
 8006678:	f04f 30ff 	mov.w	r0, #4294967295
 800667c:	b004      	add	sp, #16
 800667e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006682:	4835      	ldr	r0, [pc, #212]	; (8006758 <_printf_i+0x244>)
 8006684:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006688:	6829      	ldr	r1, [r5, #0]
 800668a:	6823      	ldr	r3, [r4, #0]
 800668c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006690:	6029      	str	r1, [r5, #0]
 8006692:	061d      	lsls	r5, r3, #24
 8006694:	d514      	bpl.n	80066c0 <_printf_i+0x1ac>
 8006696:	07df      	lsls	r7, r3, #31
 8006698:	bf44      	itt	mi
 800669a:	f043 0320 	orrmi.w	r3, r3, #32
 800669e:	6023      	strmi	r3, [r4, #0]
 80066a0:	b91e      	cbnz	r6, 80066aa <_printf_i+0x196>
 80066a2:	6823      	ldr	r3, [r4, #0]
 80066a4:	f023 0320 	bic.w	r3, r3, #32
 80066a8:	6023      	str	r3, [r4, #0]
 80066aa:	2310      	movs	r3, #16
 80066ac:	e7b0      	b.n	8006610 <_printf_i+0xfc>
 80066ae:	6823      	ldr	r3, [r4, #0]
 80066b0:	f043 0320 	orr.w	r3, r3, #32
 80066b4:	6023      	str	r3, [r4, #0]
 80066b6:	2378      	movs	r3, #120	; 0x78
 80066b8:	4828      	ldr	r0, [pc, #160]	; (800675c <_printf_i+0x248>)
 80066ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80066be:	e7e3      	b.n	8006688 <_printf_i+0x174>
 80066c0:	0659      	lsls	r1, r3, #25
 80066c2:	bf48      	it	mi
 80066c4:	b2b6      	uxthmi	r6, r6
 80066c6:	e7e6      	b.n	8006696 <_printf_i+0x182>
 80066c8:	4615      	mov	r5, r2
 80066ca:	e7bb      	b.n	8006644 <_printf_i+0x130>
 80066cc:	682b      	ldr	r3, [r5, #0]
 80066ce:	6826      	ldr	r6, [r4, #0]
 80066d0:	6961      	ldr	r1, [r4, #20]
 80066d2:	1d18      	adds	r0, r3, #4
 80066d4:	6028      	str	r0, [r5, #0]
 80066d6:	0635      	lsls	r5, r6, #24
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	d501      	bpl.n	80066e0 <_printf_i+0x1cc>
 80066dc:	6019      	str	r1, [r3, #0]
 80066de:	e002      	b.n	80066e6 <_printf_i+0x1d2>
 80066e0:	0670      	lsls	r0, r6, #25
 80066e2:	d5fb      	bpl.n	80066dc <_printf_i+0x1c8>
 80066e4:	8019      	strh	r1, [r3, #0]
 80066e6:	2300      	movs	r3, #0
 80066e8:	6123      	str	r3, [r4, #16]
 80066ea:	4615      	mov	r5, r2
 80066ec:	e7ba      	b.n	8006664 <_printf_i+0x150>
 80066ee:	682b      	ldr	r3, [r5, #0]
 80066f0:	1d1a      	adds	r2, r3, #4
 80066f2:	602a      	str	r2, [r5, #0]
 80066f4:	681d      	ldr	r5, [r3, #0]
 80066f6:	6862      	ldr	r2, [r4, #4]
 80066f8:	2100      	movs	r1, #0
 80066fa:	4628      	mov	r0, r5
 80066fc:	f7f9 fd70 	bl	80001e0 <memchr>
 8006700:	b108      	cbz	r0, 8006706 <_printf_i+0x1f2>
 8006702:	1b40      	subs	r0, r0, r5
 8006704:	6060      	str	r0, [r4, #4]
 8006706:	6863      	ldr	r3, [r4, #4]
 8006708:	6123      	str	r3, [r4, #16]
 800670a:	2300      	movs	r3, #0
 800670c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006710:	e7a8      	b.n	8006664 <_printf_i+0x150>
 8006712:	6923      	ldr	r3, [r4, #16]
 8006714:	462a      	mov	r2, r5
 8006716:	4649      	mov	r1, r9
 8006718:	4640      	mov	r0, r8
 800671a:	47d0      	blx	sl
 800671c:	3001      	adds	r0, #1
 800671e:	d0ab      	beq.n	8006678 <_printf_i+0x164>
 8006720:	6823      	ldr	r3, [r4, #0]
 8006722:	079b      	lsls	r3, r3, #30
 8006724:	d413      	bmi.n	800674e <_printf_i+0x23a>
 8006726:	68e0      	ldr	r0, [r4, #12]
 8006728:	9b03      	ldr	r3, [sp, #12]
 800672a:	4298      	cmp	r0, r3
 800672c:	bfb8      	it	lt
 800672e:	4618      	movlt	r0, r3
 8006730:	e7a4      	b.n	800667c <_printf_i+0x168>
 8006732:	2301      	movs	r3, #1
 8006734:	4632      	mov	r2, r6
 8006736:	4649      	mov	r1, r9
 8006738:	4640      	mov	r0, r8
 800673a:	47d0      	blx	sl
 800673c:	3001      	adds	r0, #1
 800673e:	d09b      	beq.n	8006678 <_printf_i+0x164>
 8006740:	3501      	adds	r5, #1
 8006742:	68e3      	ldr	r3, [r4, #12]
 8006744:	9903      	ldr	r1, [sp, #12]
 8006746:	1a5b      	subs	r3, r3, r1
 8006748:	42ab      	cmp	r3, r5
 800674a:	dcf2      	bgt.n	8006732 <_printf_i+0x21e>
 800674c:	e7eb      	b.n	8006726 <_printf_i+0x212>
 800674e:	2500      	movs	r5, #0
 8006750:	f104 0619 	add.w	r6, r4, #25
 8006754:	e7f5      	b.n	8006742 <_printf_i+0x22e>
 8006756:	bf00      	nop
 8006758:	08006b2d 	.word	0x08006b2d
 800675c:	08006b3e 	.word	0x08006b3e

08006760 <memcpy>:
 8006760:	440a      	add	r2, r1
 8006762:	4291      	cmp	r1, r2
 8006764:	f100 33ff 	add.w	r3, r0, #4294967295
 8006768:	d100      	bne.n	800676c <memcpy+0xc>
 800676a:	4770      	bx	lr
 800676c:	b510      	push	{r4, lr}
 800676e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006772:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006776:	4291      	cmp	r1, r2
 8006778:	d1f9      	bne.n	800676e <memcpy+0xe>
 800677a:	bd10      	pop	{r4, pc}

0800677c <memmove>:
 800677c:	4288      	cmp	r0, r1
 800677e:	b510      	push	{r4, lr}
 8006780:	eb01 0402 	add.w	r4, r1, r2
 8006784:	d902      	bls.n	800678c <memmove+0x10>
 8006786:	4284      	cmp	r4, r0
 8006788:	4623      	mov	r3, r4
 800678a:	d807      	bhi.n	800679c <memmove+0x20>
 800678c:	1e43      	subs	r3, r0, #1
 800678e:	42a1      	cmp	r1, r4
 8006790:	d008      	beq.n	80067a4 <memmove+0x28>
 8006792:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006796:	f803 2f01 	strb.w	r2, [r3, #1]!
 800679a:	e7f8      	b.n	800678e <memmove+0x12>
 800679c:	4402      	add	r2, r0
 800679e:	4601      	mov	r1, r0
 80067a0:	428a      	cmp	r2, r1
 80067a2:	d100      	bne.n	80067a6 <memmove+0x2a>
 80067a4:	bd10      	pop	{r4, pc}
 80067a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80067aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80067ae:	e7f7      	b.n	80067a0 <memmove+0x24>

080067b0 <_free_r>:
 80067b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067b2:	2900      	cmp	r1, #0
 80067b4:	d044      	beq.n	8006840 <_free_r+0x90>
 80067b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067ba:	9001      	str	r0, [sp, #4]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	f1a1 0404 	sub.w	r4, r1, #4
 80067c2:	bfb8      	it	lt
 80067c4:	18e4      	addlt	r4, r4, r3
 80067c6:	f000 f913 	bl	80069f0 <__malloc_lock>
 80067ca:	4a1e      	ldr	r2, [pc, #120]	; (8006844 <_free_r+0x94>)
 80067cc:	9801      	ldr	r0, [sp, #4]
 80067ce:	6813      	ldr	r3, [r2, #0]
 80067d0:	b933      	cbnz	r3, 80067e0 <_free_r+0x30>
 80067d2:	6063      	str	r3, [r4, #4]
 80067d4:	6014      	str	r4, [r2, #0]
 80067d6:	b003      	add	sp, #12
 80067d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80067dc:	f000 b90e 	b.w	80069fc <__malloc_unlock>
 80067e0:	42a3      	cmp	r3, r4
 80067e2:	d908      	bls.n	80067f6 <_free_r+0x46>
 80067e4:	6825      	ldr	r5, [r4, #0]
 80067e6:	1961      	adds	r1, r4, r5
 80067e8:	428b      	cmp	r3, r1
 80067ea:	bf01      	itttt	eq
 80067ec:	6819      	ldreq	r1, [r3, #0]
 80067ee:	685b      	ldreq	r3, [r3, #4]
 80067f0:	1949      	addeq	r1, r1, r5
 80067f2:	6021      	streq	r1, [r4, #0]
 80067f4:	e7ed      	b.n	80067d2 <_free_r+0x22>
 80067f6:	461a      	mov	r2, r3
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	b10b      	cbz	r3, 8006800 <_free_r+0x50>
 80067fc:	42a3      	cmp	r3, r4
 80067fe:	d9fa      	bls.n	80067f6 <_free_r+0x46>
 8006800:	6811      	ldr	r1, [r2, #0]
 8006802:	1855      	adds	r5, r2, r1
 8006804:	42a5      	cmp	r5, r4
 8006806:	d10b      	bne.n	8006820 <_free_r+0x70>
 8006808:	6824      	ldr	r4, [r4, #0]
 800680a:	4421      	add	r1, r4
 800680c:	1854      	adds	r4, r2, r1
 800680e:	42a3      	cmp	r3, r4
 8006810:	6011      	str	r1, [r2, #0]
 8006812:	d1e0      	bne.n	80067d6 <_free_r+0x26>
 8006814:	681c      	ldr	r4, [r3, #0]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	6053      	str	r3, [r2, #4]
 800681a:	4421      	add	r1, r4
 800681c:	6011      	str	r1, [r2, #0]
 800681e:	e7da      	b.n	80067d6 <_free_r+0x26>
 8006820:	d902      	bls.n	8006828 <_free_r+0x78>
 8006822:	230c      	movs	r3, #12
 8006824:	6003      	str	r3, [r0, #0]
 8006826:	e7d6      	b.n	80067d6 <_free_r+0x26>
 8006828:	6825      	ldr	r5, [r4, #0]
 800682a:	1961      	adds	r1, r4, r5
 800682c:	428b      	cmp	r3, r1
 800682e:	bf04      	itt	eq
 8006830:	6819      	ldreq	r1, [r3, #0]
 8006832:	685b      	ldreq	r3, [r3, #4]
 8006834:	6063      	str	r3, [r4, #4]
 8006836:	bf04      	itt	eq
 8006838:	1949      	addeq	r1, r1, r5
 800683a:	6021      	streq	r1, [r4, #0]
 800683c:	6054      	str	r4, [r2, #4]
 800683e:	e7ca      	b.n	80067d6 <_free_r+0x26>
 8006840:	b003      	add	sp, #12
 8006842:	bd30      	pop	{r4, r5, pc}
 8006844:	20000278 	.word	0x20000278

08006848 <sbrk_aligned>:
 8006848:	b570      	push	{r4, r5, r6, lr}
 800684a:	4e0e      	ldr	r6, [pc, #56]	; (8006884 <sbrk_aligned+0x3c>)
 800684c:	460c      	mov	r4, r1
 800684e:	6831      	ldr	r1, [r6, #0]
 8006850:	4605      	mov	r5, r0
 8006852:	b911      	cbnz	r1, 800685a <sbrk_aligned+0x12>
 8006854:	f000 f8bc 	bl	80069d0 <_sbrk_r>
 8006858:	6030      	str	r0, [r6, #0]
 800685a:	4621      	mov	r1, r4
 800685c:	4628      	mov	r0, r5
 800685e:	f000 f8b7 	bl	80069d0 <_sbrk_r>
 8006862:	1c43      	adds	r3, r0, #1
 8006864:	d00a      	beq.n	800687c <sbrk_aligned+0x34>
 8006866:	1cc4      	adds	r4, r0, #3
 8006868:	f024 0403 	bic.w	r4, r4, #3
 800686c:	42a0      	cmp	r0, r4
 800686e:	d007      	beq.n	8006880 <sbrk_aligned+0x38>
 8006870:	1a21      	subs	r1, r4, r0
 8006872:	4628      	mov	r0, r5
 8006874:	f000 f8ac 	bl	80069d0 <_sbrk_r>
 8006878:	3001      	adds	r0, #1
 800687a:	d101      	bne.n	8006880 <sbrk_aligned+0x38>
 800687c:	f04f 34ff 	mov.w	r4, #4294967295
 8006880:	4620      	mov	r0, r4
 8006882:	bd70      	pop	{r4, r5, r6, pc}
 8006884:	2000027c 	.word	0x2000027c

08006888 <_malloc_r>:
 8006888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800688c:	1ccd      	adds	r5, r1, #3
 800688e:	f025 0503 	bic.w	r5, r5, #3
 8006892:	3508      	adds	r5, #8
 8006894:	2d0c      	cmp	r5, #12
 8006896:	bf38      	it	cc
 8006898:	250c      	movcc	r5, #12
 800689a:	2d00      	cmp	r5, #0
 800689c:	4607      	mov	r7, r0
 800689e:	db01      	blt.n	80068a4 <_malloc_r+0x1c>
 80068a0:	42a9      	cmp	r1, r5
 80068a2:	d905      	bls.n	80068b0 <_malloc_r+0x28>
 80068a4:	230c      	movs	r3, #12
 80068a6:	603b      	str	r3, [r7, #0]
 80068a8:	2600      	movs	r6, #0
 80068aa:	4630      	mov	r0, r6
 80068ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068b0:	4e2e      	ldr	r6, [pc, #184]	; (800696c <_malloc_r+0xe4>)
 80068b2:	f000 f89d 	bl	80069f0 <__malloc_lock>
 80068b6:	6833      	ldr	r3, [r6, #0]
 80068b8:	461c      	mov	r4, r3
 80068ba:	bb34      	cbnz	r4, 800690a <_malloc_r+0x82>
 80068bc:	4629      	mov	r1, r5
 80068be:	4638      	mov	r0, r7
 80068c0:	f7ff ffc2 	bl	8006848 <sbrk_aligned>
 80068c4:	1c43      	adds	r3, r0, #1
 80068c6:	4604      	mov	r4, r0
 80068c8:	d14d      	bne.n	8006966 <_malloc_r+0xde>
 80068ca:	6834      	ldr	r4, [r6, #0]
 80068cc:	4626      	mov	r6, r4
 80068ce:	2e00      	cmp	r6, #0
 80068d0:	d140      	bne.n	8006954 <_malloc_r+0xcc>
 80068d2:	6823      	ldr	r3, [r4, #0]
 80068d4:	4631      	mov	r1, r6
 80068d6:	4638      	mov	r0, r7
 80068d8:	eb04 0803 	add.w	r8, r4, r3
 80068dc:	f000 f878 	bl	80069d0 <_sbrk_r>
 80068e0:	4580      	cmp	r8, r0
 80068e2:	d13a      	bne.n	800695a <_malloc_r+0xd2>
 80068e4:	6821      	ldr	r1, [r4, #0]
 80068e6:	3503      	adds	r5, #3
 80068e8:	1a6d      	subs	r5, r5, r1
 80068ea:	f025 0503 	bic.w	r5, r5, #3
 80068ee:	3508      	adds	r5, #8
 80068f0:	2d0c      	cmp	r5, #12
 80068f2:	bf38      	it	cc
 80068f4:	250c      	movcc	r5, #12
 80068f6:	4629      	mov	r1, r5
 80068f8:	4638      	mov	r0, r7
 80068fa:	f7ff ffa5 	bl	8006848 <sbrk_aligned>
 80068fe:	3001      	adds	r0, #1
 8006900:	d02b      	beq.n	800695a <_malloc_r+0xd2>
 8006902:	6823      	ldr	r3, [r4, #0]
 8006904:	442b      	add	r3, r5
 8006906:	6023      	str	r3, [r4, #0]
 8006908:	e00e      	b.n	8006928 <_malloc_r+0xa0>
 800690a:	6822      	ldr	r2, [r4, #0]
 800690c:	1b52      	subs	r2, r2, r5
 800690e:	d41e      	bmi.n	800694e <_malloc_r+0xc6>
 8006910:	2a0b      	cmp	r2, #11
 8006912:	d916      	bls.n	8006942 <_malloc_r+0xba>
 8006914:	1961      	adds	r1, r4, r5
 8006916:	42a3      	cmp	r3, r4
 8006918:	6025      	str	r5, [r4, #0]
 800691a:	bf18      	it	ne
 800691c:	6059      	strne	r1, [r3, #4]
 800691e:	6863      	ldr	r3, [r4, #4]
 8006920:	bf08      	it	eq
 8006922:	6031      	streq	r1, [r6, #0]
 8006924:	5162      	str	r2, [r4, r5]
 8006926:	604b      	str	r3, [r1, #4]
 8006928:	4638      	mov	r0, r7
 800692a:	f104 060b 	add.w	r6, r4, #11
 800692e:	f000 f865 	bl	80069fc <__malloc_unlock>
 8006932:	f026 0607 	bic.w	r6, r6, #7
 8006936:	1d23      	adds	r3, r4, #4
 8006938:	1af2      	subs	r2, r6, r3
 800693a:	d0b6      	beq.n	80068aa <_malloc_r+0x22>
 800693c:	1b9b      	subs	r3, r3, r6
 800693e:	50a3      	str	r3, [r4, r2]
 8006940:	e7b3      	b.n	80068aa <_malloc_r+0x22>
 8006942:	6862      	ldr	r2, [r4, #4]
 8006944:	42a3      	cmp	r3, r4
 8006946:	bf0c      	ite	eq
 8006948:	6032      	streq	r2, [r6, #0]
 800694a:	605a      	strne	r2, [r3, #4]
 800694c:	e7ec      	b.n	8006928 <_malloc_r+0xa0>
 800694e:	4623      	mov	r3, r4
 8006950:	6864      	ldr	r4, [r4, #4]
 8006952:	e7b2      	b.n	80068ba <_malloc_r+0x32>
 8006954:	4634      	mov	r4, r6
 8006956:	6876      	ldr	r6, [r6, #4]
 8006958:	e7b9      	b.n	80068ce <_malloc_r+0x46>
 800695a:	230c      	movs	r3, #12
 800695c:	603b      	str	r3, [r7, #0]
 800695e:	4638      	mov	r0, r7
 8006960:	f000 f84c 	bl	80069fc <__malloc_unlock>
 8006964:	e7a1      	b.n	80068aa <_malloc_r+0x22>
 8006966:	6025      	str	r5, [r4, #0]
 8006968:	e7de      	b.n	8006928 <_malloc_r+0xa0>
 800696a:	bf00      	nop
 800696c:	20000278 	.word	0x20000278

08006970 <_realloc_r>:
 8006970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006974:	4680      	mov	r8, r0
 8006976:	4614      	mov	r4, r2
 8006978:	460e      	mov	r6, r1
 800697a:	b921      	cbnz	r1, 8006986 <_realloc_r+0x16>
 800697c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006980:	4611      	mov	r1, r2
 8006982:	f7ff bf81 	b.w	8006888 <_malloc_r>
 8006986:	b92a      	cbnz	r2, 8006994 <_realloc_r+0x24>
 8006988:	f7ff ff12 	bl	80067b0 <_free_r>
 800698c:	4625      	mov	r5, r4
 800698e:	4628      	mov	r0, r5
 8006990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006994:	f000 f838 	bl	8006a08 <_malloc_usable_size_r>
 8006998:	4284      	cmp	r4, r0
 800699a:	4607      	mov	r7, r0
 800699c:	d802      	bhi.n	80069a4 <_realloc_r+0x34>
 800699e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80069a2:	d812      	bhi.n	80069ca <_realloc_r+0x5a>
 80069a4:	4621      	mov	r1, r4
 80069a6:	4640      	mov	r0, r8
 80069a8:	f7ff ff6e 	bl	8006888 <_malloc_r>
 80069ac:	4605      	mov	r5, r0
 80069ae:	2800      	cmp	r0, #0
 80069b0:	d0ed      	beq.n	800698e <_realloc_r+0x1e>
 80069b2:	42bc      	cmp	r4, r7
 80069b4:	4622      	mov	r2, r4
 80069b6:	4631      	mov	r1, r6
 80069b8:	bf28      	it	cs
 80069ba:	463a      	movcs	r2, r7
 80069bc:	f7ff fed0 	bl	8006760 <memcpy>
 80069c0:	4631      	mov	r1, r6
 80069c2:	4640      	mov	r0, r8
 80069c4:	f7ff fef4 	bl	80067b0 <_free_r>
 80069c8:	e7e1      	b.n	800698e <_realloc_r+0x1e>
 80069ca:	4635      	mov	r5, r6
 80069cc:	e7df      	b.n	800698e <_realloc_r+0x1e>
	...

080069d0 <_sbrk_r>:
 80069d0:	b538      	push	{r3, r4, r5, lr}
 80069d2:	4d06      	ldr	r5, [pc, #24]	; (80069ec <_sbrk_r+0x1c>)
 80069d4:	2300      	movs	r3, #0
 80069d6:	4604      	mov	r4, r0
 80069d8:	4608      	mov	r0, r1
 80069da:	602b      	str	r3, [r5, #0]
 80069dc:	f7fb ffd2 	bl	8002984 <_sbrk>
 80069e0:	1c43      	adds	r3, r0, #1
 80069e2:	d102      	bne.n	80069ea <_sbrk_r+0x1a>
 80069e4:	682b      	ldr	r3, [r5, #0]
 80069e6:	b103      	cbz	r3, 80069ea <_sbrk_r+0x1a>
 80069e8:	6023      	str	r3, [r4, #0]
 80069ea:	bd38      	pop	{r3, r4, r5, pc}
 80069ec:	20000280 	.word	0x20000280

080069f0 <__malloc_lock>:
 80069f0:	4801      	ldr	r0, [pc, #4]	; (80069f8 <__malloc_lock+0x8>)
 80069f2:	f000 b811 	b.w	8006a18 <__retarget_lock_acquire_recursive>
 80069f6:	bf00      	nop
 80069f8:	20000284 	.word	0x20000284

080069fc <__malloc_unlock>:
 80069fc:	4801      	ldr	r0, [pc, #4]	; (8006a04 <__malloc_unlock+0x8>)
 80069fe:	f000 b80c 	b.w	8006a1a <__retarget_lock_release_recursive>
 8006a02:	bf00      	nop
 8006a04:	20000284 	.word	0x20000284

08006a08 <_malloc_usable_size_r>:
 8006a08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a0c:	1f18      	subs	r0, r3, #4
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	bfbc      	itt	lt
 8006a12:	580b      	ldrlt	r3, [r1, r0]
 8006a14:	18c0      	addlt	r0, r0, r3
 8006a16:	4770      	bx	lr

08006a18 <__retarget_lock_acquire_recursive>:
 8006a18:	4770      	bx	lr

08006a1a <__retarget_lock_release_recursive>:
 8006a1a:	4770      	bx	lr

08006a1c <_init>:
 8006a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a1e:	bf00      	nop
 8006a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a22:	bc08      	pop	{r3}
 8006a24:	469e      	mov	lr, r3
 8006a26:	4770      	bx	lr

08006a28 <_fini>:
 8006a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a2a:	bf00      	nop
 8006a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a2e:	bc08      	pop	{r3}
 8006a30:	469e      	mov	lr, r3
 8006a32:	4770      	bx	lr
